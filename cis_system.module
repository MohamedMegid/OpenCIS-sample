<?php
// $Id: cis_system.module,v 1.2 2012/2/20 22:11:09 amr hesham Exp $

/**
 * @file
 * Main CIS Module file.
 * Implemented most of the needed hooks and helper function to serve the main components
 * and features inside the Clincal information system
 */

// Inventory Item operations

define (Quantity_Withdraw, 0);
define (Quantity_Deposit, 1);
define (Quantity_For_Testing, 2);
define (PO_Withdraw, 3);
// Medical Equipment Constant Status
define (NOT_WORKING , 651);
define (UNDER_COMPANY_MAINTENANCE , 653);
define (UNDER_MAINTENANCE, 652);
define (WORKING, 650);
define (WORKING_FINE, 659);

// job status 

define (JOB_TO_BE_FIXED_INSIDE_HOSPITAL , 0);
define (JOB_TO_BE_FIXED_BY_COMPANY , 1);
define (JOB_FIXED_BY_HOSPITAL, 2);
define (JOB_FIXED_BY_COMPANY, 3);

// CMMS Type

define (INDIVIDUAL_HOSPITAL , 0);
define (HEIRARCHIAL_HOSPITALS , 1);
define (MEDICAL_MAINTENANCE_COMPANY, 2);
define (GENERAL_MAINTENANCE_COMPANY, 3);


// Qutation Types (CCK)

define (REQUEST_SPARE_PART, 1);
define (QUOTATION , 2);
define (QUOTATION_DEPOSIT, 3);
define (QUOTATION_TESTING, 4);

// quotation for contract
define (QUOTATION_CONTRACT_FUNCTIONALITY, 1);

//assigned employee is filled automatic 
define (FILLED_ASSIGNED_EMPLOYEE_AUTOMATIC, 1);
define (FILLED_ASSIGNED_EMPLOYEE_AUTOMATIC_MC, 1);


define (FACTOR_EXCHANGE_ID, 5);

// define roles constant inside the system 
define('GROUP_LEADER',          3);
define('MANAGER',               4);
define('ADMINSTRATION_MANAGER', 5);
define('FIELD_ENGINEER',        6);
define('SECRETARY',             7);
define('SERVICE_MANAGER',       8);
define('TECHNICIAN',            9);
define('SYS_ADMIN',            10);


module_load_include('inc', 'cis_system', 'cis_system_workflow');
module_load_include('inc', 'cis_system', 'cis_system_search_form');
drupal_add_js(drupal_get_path('module', 'cis_system') . '/js/cis_system.js');
drupal_add_js(drupal_get_path('module', 'cis_system') . '/js/cis_added_features.js');
drupal_add_js(drupal_get_path('module', 'cis_system') . '/js/cis_ppm_cal_dates.js');
drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/cis_system.css');

global $quotation_contract_functionality;
$quotation_contract_functionality = variable_get('quotation_contract_functionality', 1);

global $filled_assigned_employee_automatic;
$filled_assigned_employee_automatic = variable_get('filled_assigned_employee_automatic', 1);

global $filled_assigned_employee_automatic_mc;
$filled_assigned_employee_automatic_mc = variable_get('filled_assigned_employee_automatic_mc', 1);

global $quotation_cost_based_on;
$quotation_cost_based_on = variable_get('quotation_cost_based_on', 3);

global $cmms_type;
$cmms_type = variable_get('cmms_type', 3); 

global $user;
global $hospital_nid;
$hospital_nid = _get_user_working_hospital($user->uid); 

global $current_node_type;
$current_node_type = _get_node_type(arg(1));


/**
 * Implementation of hook_menu
 */
function cis_system_menu() {
  $items = array();
  $items['spare_parts_deposit'] = array(
    'title' => 'ajax call to save spare parts to store',
    'page callback' => '_save_spare_parts_to_store',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['get_equipment_name/%/%'] = array(
    'title' => 'ajax call to save spare parts to store',
    'page callback' => '_get_equipment_name',
    'access arguments' => array('access content'),
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  
  $items['spare_parts_withdraw'] = array(
    'title' => 'ajax call to spare parts withdraw',
    'page callback' => '_withdraw_spare_parts_from_store',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['get_sub_department/%'] = array(
    'title' => 'ajax call to get sub department',
    'page callback' => '_get_sub_deprtment',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'description' => 'Gets sub department using the parent department',
    'type' => MENU_CALLBACK,
  );

  $items['get_users_group/%'] = array(
    'title' => 'ajax call to get users group',
    'page callback' => '_get_users_group',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'cis_system_workflow.inc',
    'description' => 'Get users group',
    'type' => MENU_CALLBACK,
  );

  $items['return_part_catalog_search_form/%/%/%'] = array(
    'title' => 'Part Catalog Search',
    'page callback' => '_get_part_catalog_search',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['return_equipment_search_form/%/%/%/%'] = array(
    'title' => 'equipment Search',
    'page callback' => '_get_equipment_listing_search',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['return_coding_search_form/%/%/%/%'] = array(
    'title' => 'coding Search',
    'page callback' => '_get_coding_listing_search',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['get_employees/equipment/%'] = array(
    'title' => 'ajax call to get employees according to equipement',
    'page callback' => '_get_emps_by_equipment',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['add/efficiency_record/%'] = array(
    'title' => t('Add efficiency record'),
    'page callback' => '_render_efficiency_record_add_form',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'description' => 'add new efficiency record',
    'type' => MENU_CALLBACK,
  );

  $items['efficiency_record/%/edit'] = array(
    'title' => t('Efficiency record edit'),
    'page callback' => '_render_efficiency_record_edit_form',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'description' => 'Edit efficiency record',
    'type' => MENU_CALLBACK,
  );

  /** TODO charts upgrade**/

  $items['get_defect_percentage'] = array(
    'title' => 'ajax call to get percentages of defect all over the year',
    'page callback' => '_get_defects_percentages_data',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['get_fixes_percentage'] = array(
    'title' => 'ajax call to get percentage of fixes all over the year',
    'page callback' => '_get_fixes_percentages_data',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // page for displaying ppm and calibration calendar
  $items['mycalendar'] = array(
    'title' => t('PPM and Calibration Plan'),
    'page callback' => '_return_ppm_calibration_calendar',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/sysseting'] = array(
    'title' => 'System Configuration',
    'description' => 'This setting page allows you to configure settings that affects the overall behaviour of the system',
    'page callback' => 'drupal_get_form',
    'file' => 'cis_system_workflow.inc',
    'page arguments' => array('cmms_admin'),
    'access arguments' => array('administer cmms settings'),
    'type' => MENU_NORMAL_ITEM,
  );


  $items['admin/settings/workflow_settings'] = array(
    'title' => 'Work-Flow Configuration',
    'description' => 'This setting page allows you to configure the work-flow status available with each role in the system',
    'page callback' => 'drupal_get_form',
    'file' => 'cis_system_workflow.inc',
    'page arguments' => array('workflow_admin'),
    'access arguments' => array('administer workflow settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/notifications'] = array(
    'title' => 'Notifications Configuration',
    'description' => 'This setting page allows you to configure the notifications during workflow and other events',
    'page callback' => 'drupal_get_form',
    'file' => 'cis_system_workflow.inc',
    'page arguments' => array('notification_admin'),
    'access arguments' => array('administer notification settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/settings/employee_group_assignment'] = array(
    'title' => 'Employees groups assignment',
    'description' => 'This setting page allows you to define every maintenance group member and role of employee',
    'page callback' => 'drupal_get_form',
    'file' => 'cis_system_workflow.inc',
    'page arguments' => array('employees_groups_admin'),
    'access arguments' => array('administer notification settings'),
    'type' => MENU_NORMAL_ITEM,
  );





  $items['get_equipment_info/%'] = array(
    'title' => 'ajax call to get equipment information according to data item input',
    'page callback' => '_get_equipment_info_by_coding',
    'file' => 'cis_system_workflow.inc',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['add/new/component/%/%'] = array(
    'page callback' => 'save_new_component_to_be_fixed',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['save/new/equipment/%/%'] = array(
    'page callback' => 'save_new_equipment',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['get/equipment/brand/%'] = array(
    'page callback' => '_get_equipment_brand',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['user/autocomplete'] = array(
    'page callback' => 'autocomplete_equipment_name_search',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['user/autocomplete/english'] = array(
    'page callback' => 'autocomplete_equipment_english_name_search',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['user/autocomplete/part'] = array(
    'page callback' => 'autocomplete_part_name_search',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['user/autocomplete/part/number'] = array(
    'page callback' => 'autocomplete_part_number_search',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['user/autocomplete/workflow/client'] = array(
    'page callback' => 'autocomplete_search_client_workflow',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['get/last/part/price'] = array(
    'page callback' => 'get_last_part_price',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['check/entries/ppm'] = array(
    'title' => 'Search PPM Entries',
    'page callback' => 'ppm_entries_checked',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['check/entries/cal'] = array(
    'title' => 'Search Calibration Entries',
    'page callback' => 'cal_entries_checked',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['equipment/sn/autocomplete/ppm/entry'] = array(
    'page callback' => 'equipment_sn_autocomplete_ppm_entry',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['maintenance/contract/autocomplete'] = array(
    'page callback' => 'maintenance_contract_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['model/autocomplete/ppm/cal/entry'] = array(
    'page callback' => 'model_autocomplete_ppm_cal_entry',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['brand/field/autocomplete'] = array(
    'page callback' => 'brand_field_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['fill/assigned/employee/auto/%'] = array(
    'page callback' => 'fill_assigned_employee_automatic',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['fill/assigned/employee/auto/mc/%'] = array(
    'page callback' => 'fill_assigned_employee_automatic_mc',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['search/maintenance/costs'] = array(
    'title' => 'Maintenance Income Report',
    'page callback' => 'search_maintenance_costs',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['currency/form'] = array(
    'title' => 'Price of the currency',
    'page callback' => 'price_of_currency',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['edit/currency/form'] = array(
    'title' => 'Edit price of the currency',
    'page callback' => 'edit_price_of_currency',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['factor/form'] = array(
    'title' => 'Factors form',
    'page callback' => 'factor',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['edit/factor/form'] = array(
    'title' => 'Edit factor form',
    'page callback' => 'edit_factor',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['requestion/part/catalog/report'] = array(
    'title' => 'Part catalog requisition report',
    'page callback' => 'part_catalog_requestion',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
 
  $items['autocomplete/part/catalog/number'] = array(
    'page callback' => 'autocomlete_part_catalog_number',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['edit/workflow/status'] = array(
    'title' => 'Change workflow status',
    'page callback' => 'edit_workflow_status',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['recieve/data/%/%/%'] = array(
    'page callback' => '_update_calendar_item_info_ajax_edit',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['get/employees'] = array(
    'page callback' => 'return_employees_calendar_item_ajax_edit',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
 
  $items['fill/group/leader/auto/%'] = array(
    'page callback' => 'fill_group_leader_automatic_ajax_base_client',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['maintenance/info/tab'] = array(
    'page callback' => 'maintenance_info_tab_hide',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
/*
  $items['get/factor/exchange/value'] = array(
    'page callback' => 'get_factor_exchange_value',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
*/
  $items['unit/price/wo/%'] = array(
    'page callback' => '_return_unit_price_wo',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['get/qty/requested/received/po/%'] = array(
    'page callback' => 'get_qty_requested_received_from_po',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['set_task_review_in_pentry'] = array(
    'page callback' => 'set_task_review_value_in_pentry',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['get_official_holiday'] = array(
    'page callback' => 'get_official_holiday_to_set_into_calendar',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['return/company/name/autocomplete'] = array(
    'page callback' => 'return_autocomplete_company_name',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['set_task_review_in_work_order'] = array(
    'page callback' => 'set_task_review_value_in_work_order',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['set/department/options/in/equipment/%'] = array(
    'page callback' => 'set_department_options_in_equipment',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['upload/clients'] = array(
    'title' => 'Import Clients Form',
    'page callback' => 'upload_client',
    'access arguments' => array('upload clients'),
    'type' => MENU_CALLBACK,
  );

  $items['upload/models'] = array(
    'title' => 'Upload Models Form',
    'page callback' => 'upload_model',
    'access arguments' => array('upload models'),
    'type' => MENU_CALLBACK,
  );

  $items['upload/parts'] = array(
    'title' => 'Upload Parts Form',
    'page callback' => 'upload_part',
    'access arguments' => array('upload parts'),
    'type' => MENU_CALLBACK,
  );

  $items['upload/equipment'] = array(
    'title' => 'Upload Equipment Form',
    'page callback' => 'upload_equipment',
    'access arguments' => array('upload equipment'),
    'type' => MENU_CALLBACK,
  );

  $items['upload/calls'] = array(
    'title' => 'Upload Calls Form',
    'page callback' => 'upload_call',
    'access arguments' => array('upload calls'),
    'type' => MENU_CALLBACK,
  );

  $items['performance/evaluation'] = array(
    'title' => 'Performance Evaluation',
    'page callback' => 'performance_evaluation',
    'access arguments' => array('performance evaluation report'),
    'type' => MENU_CALLBACK,
  );
  $items['upload/equipment/name'] = array(
    'title' => 'Upload Equipment name',
    'page callback' => 'upload_equipment_name',
    'access arguments' => array('upload equipment name'),
    'type' => MENU_CALLBACK,
  );

  $items['get/last/part/price/wo/%'] = array(
    'page callback' => 'get_last_part_price_wo',
    'access arguments' => array('get last part price in work order'),
    'type' => MENU_CALLBACK,
  );

  $items['evaluation/print/all/%/%/%/%'] = array(
    'page callback' => 'performance_evaluation_print_all',
    'access arguments' => array('Performance evaluation print all'),
    'file' => 'cis_system_search_form.inc',
    'type' => MENU_CALLBACK,
  );

  $items['calculate/traveling/hours'] = array(
    'title' => 'Traveling hours',
    'page callback' => 'calculate_traveling_hours',
    'access arguments' => array('Calculate traveling hours'),
    'file' => 'cis_system_search_form.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * get factor exchange ajax call
 */
function get_factor_exchange_value(){
  $factor_exchange = db_result(db_query('SELECT factor_value FROM factors WHERE factor_id =%d', FACTOR_EXCHANGE_ID));
  echo $factor_exchange;
}
*/

/**
 * check maintenance info configuration
 */
function maintenance_info_tab_hide(){
  $configuration_result = variable_get('show_maintenance_info_based_on_first_action_in_call', 0);
  echo $configuration_result;
}

/**
 * fill assigned employee automatic
 * related to maintenance contract
 */
function fill_assigned_employee_automatic_mc(){
  global $filled_assigned_employee_automatic_mc;
  if ($filled_assigned_employee_automatic_mc == FILLED_ASSIGNED_EMPLOYEE_AUTOMATIC_MC){
    $equipment_nid = arg(5);
    $query = db_query('SELECT role.uid group_leader FROM content_type_medical_equipment equipment INNER JOIN content_type_client client ON client.nid = equipment.field_equipment_client_nid INNER JOIN content_type_hospital_employee employee ON employee.field_employee_group_value = client.field_client_group_value INNER JOIN node ON node.nid = employee.nid INNER JOIN users_roles role ON node.uid = role.uid WHERE role.rid = 3 AND equipment.nid = %d', $equipment_nid);
    if ($result = db_fetch_object($query)){
      $group_leader = $result->group_leader;
    }
    echo $group_leader;
  }
}


/**
 * fill assigned employee automatic
 * related to medical equipment
 */
function fill_assigned_employee_automatic(){
  global $filled_assigned_employee_automatic;
  if ($filled_assigned_employee_automatic == FILLED_ASSIGNED_EMPLOYEE_AUTOMATIC){
    $client_nid = arg(4);
    $query = db_query('SELECT role.uid group_leader FROM content_type_client client INNER JOIN content_type_hospital_employee employee ON employee.field_employee_group_value = client.field_client_group_value INNER JOIN node ON node.nid = employee.nid INNER JOIN users_roles role ON node.uid = role.uid WHERE role.rid = 3 AND client.nid = %d', $client_nid);
    if ($result = db_fetch_object($query)){
      $group_leader = $result->group_leader;
    }
    echo $group_leader;
  }
}

/**
 * function to make equ serial number
 * autocomplete @ check/entries/ppm
 */

function equipment_sn_autocomplete_ppm_entry($string){
  $matches = array();
  $result = db_query_range("SELECT title FROM node WHERE type = 'medical_equipment' AND LOWER(title) LIKE LOWER('%s%')", $string, 0, 20);
  while ($data = db_fetch_object($result)) {
    $matches[$data->title] = check_plain($data->title);
  }
  print drupal_to_js($matches);
  exit();
}

/**
 * function to make contract number field
 * autocomplete 
 */
function maintenance_contract_autocomplete($string){
  $matches = array();
  $result = db_query_range("SELECT title FROM node WHERE (type = 'maintainancecontracts' OR type = 'invoice') AND LOWER(title) LIKE LOWER('%s%')", $string, 0, 20);
  while ($data = db_fetch_object($result)) {
    $matches[$data->title] = check_plain($data->title);
  }
  print drupal_to_js($matches);
  exit();
}


/**
 * function to make model
 * autocomplete @ check/entries/ppm/cal
 */
function model_autocomplete_ppm_cal_entry($string){
  $matches = array();
  $result = db_query_range("SELECT name FROM term_data INNER JOIN term_hierarchy USING (tid) WHERE term_hierarchy.parent != 0 AND LOWER(name) LIKE LOWER('%s%')", $string, 0, 20);
  while ($data = db_fetch_object($result)) {
    $matches[$data->name] = check_plain($data->name);
  }
  print drupal_to_js($matches);
  exit();
}

/**
 * function to make brand field
 * autocomplete 
 */
function brand_field_autocomplete($string){
  $matches = array();
  $result = db_query_range("SELECT name FROM term_data INNER JOIN term_hierarchy ON (term_data.tid = term_hierarchy.parent) WHERE LOWER(name) LIKE LOWER('%s%')", $string, 0, 20);
  while ($data = db_fetch_object($result)) {
    $matches[$data->name] = check_plain($data->name);
  }
  print drupal_to_js($matches);
  exit();
}

/**
 * render calibration entries form
 * to search and update entries
 */
function cal_entries_checked(){
  return drupal_get_form('cal_entries_checked_form');
}


/**
 * the form of calibration entries
 * with the table(the result of the search)
 */
function cal_entries_checked_form(){
  if (!empty($_GET['expecteddate_from'])){
    $date_from = date('Y-m-d', $_GET['expecteddate_from']);
  }
  if (!empty($_GET['expecteddate_to'])){
    $date_to = date('Y-m-d', $_GET['expecteddate_to']);
  }
  $equipment_sn = $_GET['equipment_sn'];
  $model = $_GET['model'];
  $client = $_GET['client'];
  $job_sheet = $_GET['job_sheet'];
  $form['cal_entries'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['cal_entries']['equipment_sn'] = array(
    '#type'  => 'textfield',
    '#title' => t('Medical equipment S.N'),
    '#autocomplete_path' => 'equipment/sn/autocomplete/ppm/entry',
    '#default_value' => $equipment_sn,
  );
  $form['cal_entries']['model'] = array(
    '#type'  => 'textfield',
    '#title' => t('Model'),
    '#default_value' => $model,
    '#autocomplete_path' => 'model/autocomplete/ppm/cal/entry',
  );
  $form['cal_entries']['client'] = array(
    '#type'  => 'textfield',
    '#title' => t('Client'),
    '#autocomplete_path' => 'client/autocomplete',
    '#default_value' => $client,
  );
  $form['cal_entries']['job_sheet'] = array(
    '#type' => 'textfield',
    '#title' => t('Job sheet number'),
    '#default_value' => $job_sheet,
  );
  $dateformat = 'Y-m-d';
  $form['cal_entries']['expecteddate_from'] = array(
    '#type' => 'date_popup',
    '#date_format' => $dateformat,
    '#default_value' => $date_from,
    '#title' => t('from'),
  );
  $form['cal_entries']['expecteddate_to'] = array(
    '#type' => 'date_popup',
    '#date_format' => $dateformat,
    '#default_value' => $date_to,
    '#title' => t('to'),
  );
  $form['cal_entries']['apply'] = array(
    '#type' => 'submit',
    '#value' => t('Apply'),
  );
  $expected_date_from = $_GET['expecteddate_from'];
  $expected_date_to = $_GET['expecteddate_to'];
  $equipment_sn = $_GET['equipment_sn'];
  $model = $_GET['model'];
  $client       = $_GET['client'];
  $job_sheet    = $_GET['job_sheet'];
  $value        = 1;
  $id           = 1;
  $any = 'xcvxcvbnvvcc';
  $where = " WHERE node_equipment.title != '{$any}'";
  if(!empty($client)){
    $where .= " AND node_client.title = '{$client}'";
  }
  if(!empty($equipment_sn)){
    $where .= " AND node_equipment.title = '{$equipment_sn}'";
  }
  if(!empty($model)){
    $where .= " AND term_data.name = '{$model}'";
  }
  if(!empty($job_sheet)){
    $where .= " AND centry.field_centry_work_order_number_value = '{$job_sheet}'";
  }
  if(!empty($expected_date_from) && !empty($expected_date_to)){
    $where .= " AND centry.field_centry_date_value BETWEEN $expected_date_from AND $expected_date_to";
  }
  global $user;
  if (!empty($user->roles[FIELD_ENGINEER]) || !empty($user->roles[TECHNICIAN])){
    $where .= " AND centry.field_hospital_person_uid = $user->uid";
  }
  $query = 'SELECT term_data.name model_name,centry.field_centry_visit_status_value status, centry.nid nid, centry.field_centry_date_value centry_value, node_equipment.title equipment_sn, node_client.title client, centry.field_centry_work_order_number_value work_order FROM content_type_centry centry INNER JOIN node node_equipment ON node_equipment.nid = centry.field_centry_medical_equips_nid INNER JOIN content_type_medical_equipment equ ON equ.nid = centry.field_centry_medical_equips_nid INNER JOIN node node_client ON node_client.nid = equ.field_equipment_client_nid INNER JOIN content_field_type_l2 model ON centry.field_centry_medical_equips_nid = model.nid INNER JOIN term_data ON model.field_type_l2_value = term_data.tid' . $where;
  $result = pager_query($query, 50);
  $rows = array();
  global $language;
  if ($language->language == 'ar'){
    $header = array('<input type="checkbox" name="checkboxall" id="checkall">'. t('تحقق الكل'),t("زيارة المعايره"), t("تاريخ الزياره"), t("الرقم المسلسل للجهاز"), t("الموديل"), t("العميل"), t("رقم التقرير الفني"), t("الحالة"));
  }
  else{
    $header = array('<input type="checkbox" name="checkboxall" id="checkall">'. t('Check All'),t("Calibration Entry"), t("Entry date"), t("Equipment S.N"), t("Model"), t("Client"), t("Job sheet Number"), t("Status"));
  }
  while ($data = db_fetch_object($result)){
    $centry_nid = url('node/' . $data->nid);
    $row = array();
    $nid = $data->nid;
    $row[] = '<input type="checkbox" name="check_list['.$nid.']" class="checkbox1" id = '.$id.'value='.$value.'>';
    if ($language->language == 'ar'){
      $row[] = array('data' => "<a href='".$centry_nid."'>عرض زيارة المعايره</a>");
    }
    else{
      $row[] = array('data' => "<a href='".$centry_nid."'>View Calibration Entry</a>");
    }
    $row[] = array('data' => date('d/m/Y', $data->centry_value));
    $row[] = array('data' => $data->equipment_sn);
    $row[] = array('data' => $data->model_name);
    $row[] = array('data' => $data->client);
    if (empty($data->work_order)){
      $row[] = 'N/A';
    }
    else{
      $row[] = array('data' => $data->work_order);
    }
    if ($data->status == NULL){
      $row[] = 'N/A';
    }
    else if ($data->status == 0){
      $row[] = 'Done';
    }
    else if($data->status == 1){
      $row[] = 'Not yet';
    }
    else{
      $row[] = 'On hold';
    }
    $value++;
    $id++;
    $rows[] = $row;
  }
  $html_body .= "<div class='portlet box green'>
                     <div class='portlet-title'>
                        <div class='caption'><i class='icon-cogs'></i> ". t('Calibration entries table'). "
                                                                                                      </div>
                        <div class='tools'>
                           <a class='collapse' href='javascript:;'></a>
                           <a class='config' data-toggle='modal' href='#portlet-config'></a>
                           <a class='reload' href='javascript:;'></a>
                           <a class='remove' href='javascript:;'></a>
                        </div>
                     </div>

                     <div class='portlet-body lookup-table flip-scroll' >";
  $html_body .= theme('table', $header, $rows);
  $html_body .= theme('pager', 50);
  $html_body .= "</div>";
  $html_body .= "</div>";
  $form['result'] = array(
    '#value' => $html_body,
  );
  $form['cal_entries_value'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['cal_entries_value']['visit_status'] = array(
    '#type' => 'select',
    '#title' => t('Visit Status'),
    '#options' => array(
      '0' => 'Done',
      '1' => 'Not yet',
      '2' => 'On hold',
    ),
  );
  $form['cal_entries_value']['task_status'] = array(
    '#type' => 'select',
    '#title' => t('Task status'),
    '#options' => array(
      '0' => 'Pass',
      '1' => 'Fail',
    ),
  );
  $form['cal_entries_value']['overall_work_status'] = array(
    '#type' => 'select',
    '#title' => t('Device status'),
    '#options' => array(
      '0' => 'Accepted',
      '1' => 'Not Accepted',
    ),
  );
  $form['cal_entries_value']['job_sheet_change'] = array(
    '#type'  => 'textfield',
    '#title' => t('Job Sheet'),
  );
  $form['cal_entries_value']['working_hours'] = array(
    '#type'  => 'textfield',
    '#title' => t('Working hours'),
  );
  $form['cal_entries_value']['traveling_hours'] = array(
    '#type'  => 'textfield',
    '#title' => t('Traveling hours'),
  );
  $form['cal_entries_value']['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * sumbit action the form
 * button => apply to search entries
 * & button => save to update entries' values
 */

function cal_entries_checked_form_submit($form, &$form_state){
  if(isset($_POST['check_list'])) {
    $nid = array();
    foreach ($_POST['check_list'] as $key => $value){
      $nid[] = $key;
    }
  }
  if ($_POST['op'] == t('Apply')){
    $expected_date_from    = strtotime($form_state['values']['expecteddate_from']);
    $expected_date_to      = strtotime($form_state['values']['expecteddate_to']);
    $equipment_sn = $form_state['values']['equipment_sn'];
    $model = $form_state['values']['model'];
    $client         = $form_state['values']['client'];
    $job_sheet      = $form_state['values']['job_sheet'];
    drupal_goto("check/entries/cal","client=$client&equipment_sn=$equipment_sn&model=$model&job_sheet=$job_sheet&expecteddate_from=$expected_date_from&expecteddate_to=$expected_date_to");
  }
  $job_sheet_number = $form_state['values']['job_sheet_change'];
  $working_hours = $form_state['values']['working_hours'];
  $traveling_hours = $form_state['values']['traveling_hours'];
  $job_sheet_number = (string)$job_sheet_number;
  $visit_status = $form_state['values']['visit_status'];
  $task_status = $form_state['values']['task_status'];
  $overall_work_status = $form_state['values']['overall_work_status'];
  if ($_POST['op'] == t('Save')){
    if(empty($job_sheet_number)){
      form_set_error("", $message = t('Job sheet field is required'));
      return;
    }
    if(!empty($nid)){
      $nid_str = implode(',', $nid);
      foreach($nid as $key => $value){
        $task_count[$value] = db_result(db_query('SELECT count(field_centry_task_value) FROM content_field_centry_task WHERE nid = %d',$value));
      }
      foreach($nid as $key => $value){
        $vid[$value] = db_result(db_query('SELECT vid FROM content_field_centry_task WHERE nid = %d', $value));
      }
    }
    if (!empty($nid_str)){
      $delete_query = db_query('DELETE FROM content_field_centry_task_status WHERE nid IN('.$nid_str.')');
    }
    if(!empty($task_count)){
      foreach ($task_count as $nid => $count){
        for ($i = 0; $i < $count; $i++){
          $insert_query = db_query('INSERT INTO content_field_centry_task_status (vid, nid, delta, field_centry_task_status_value) VALUES (%d, %d, %d, "%s")', $vid[$nid], $nid, $i, $task_status);
        }
      }
    }
    if (!empty($job_sheet_number) && !empty($_POST['check_list'])){
      $query = db_query('UPDATE content_type_centry centry, content_field_centry_task_status status SET status.field_centry_task_status_value ='.$task_status.', centry.field_centry_working_hours_value = %d, centry.field_centry_traveling_hours_value = %d, centry.field_centry_visit_status_value = '.$visit_status.', centry.field_centry_work_order_number_value = "%s", centry.field_centry_status_value = '.$overall_work_status.' WHERE status.nid IN('.$nid_str.') AND centry.nid IN ('.$nid_str.')', $working_hours, $traveling_hours, $job_sheet_number);
      drupal_set_message(t('Database have been updated'));
      clear_cache_page();
    }
  }
}


/**
 * render ppm entries form
 * to search and update entries
 */
function ppm_entries_checked(){
  return drupal_get_form('ppm_entries_checked_form');
}

/**
 * the form of ppm entries
 * with the table(the result of the search)
 */
function ppm_entries_checked_form(){
  if (!empty($_GET['expecteddate_from'])){
    $date_from = date('Y-m-d', $_GET['expecteddate_from']);
  }
  if (!empty($_GET['expecteddate_to'])){
    $date_to = date('Y-m-d', $_GET['expecteddate_to']);
  }
  $equipment_sn = $_GET['equipment_sn'];
  $model = $_GET['model'];
  $client = $_GET['client'];
  $job_sheet = $_GET['job_sheet'];
  $form['ppm_entries'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['ppm_entries']['equipment_sn'] = array(
    '#type'  => 'textfield',
    '#title' => t('Medical equipment S.N'),
    '#autocomplete_path' => 'equipment/sn/autocomplete/ppm/entry',
    '#default_value' => $equipment_sn,
  );
  $form['ppm_entries']['model'] = array(
    '#type'  => 'textfield',
    '#title' => t('Model'),
    '#autocomplete_path' => 'model/autocomplete/ppm/cal/entry',
    '#default_value' => $model,
  );
  $form['ppm_entries']['client'] = array(
    '#type'  => 'textfield',
    '#title' => t('Client'),
    '#autocomplete_path' => 'client/autocomplete',
    '#default_value' => $client,
  );
  $form['ppm_entries']['job_sheet'] = array(
    '#type' => 'textfield',
    '#title' => t('Job sheet number'),
    '#default_value' => $job_sheet,
  );
  $dateformat = 'Y-m-d';
  $form['ppm_entries']['expecteddate_from'] = array(
    '#type' => 'date_popup',
    '#date_format' => $dateformat,
    '#default_value' => $date_from,
    '#title' => t('from'),
  );
  $form['ppm_entries']['expecteddate_to'] = array(
    '#type' => 'date_popup',
    '#date_format' => $dateformat,
    '#default_value' => $date_to,
    '#title' => t('to'),
  );
  $form['ppm_entries']['apply'] = array(
    '#type' => 'submit',
    '#value' => t('Apply'),
  );
  $expected_date_from    = $_GET['expecteddate_from'];
  $expected_date_to      = $_GET['expecteddate_to'];
  $equipment_sn = $_GET['equipment_sn'];
  $model = $_GET['model'];
  $client       = $_GET['client'];
  $job_sheet    = $_GET['job_sheet'];
  $value        = 1;
  $id           = 1;
  $any = 'xcvxcvbnvvcc';
  $where = " WHERE node_equipment.title != '{$any}'";
  if(!empty($client)){
    $where .= " AND node_client.title = '{$client}'";
  }
  if(!empty($equipment_sn)){
    $where .= " AND node_equipment.title = '{$equipment_sn}'";
  }
  if(!empty($model)){
    $where .= " AND term_data.name = '{$model}'";
  }
  if(!empty($job_sheet)){
    $where .= " AND pentry.field_pentry_work_order_number_value = '{$job_sheet}'";
  }
  if(!empty($expected_date_from) && !empty($expected_date_to)){
    $where .= " AND pentry.field_pentry_date_value BETWEEN $expected_date_from AND $expected_date_to";
  }
  global $user;
  if (!empty($user->roles[FIELD_ENGINEER]) || !empty($user->roles[TECHNICIAN])){
    $where .= " AND pentry.field_pentry_hospital_person_uid = $user->uid";
  }
  $query = 'SELECT term_data.name model_name, pentry.field_pentry_visit_status_value status, pentry.nid nid, pentry.field_pentry_date_value pentry_value, node_equipment.title equipment_sn, node_client.title client, pentry.field_pentry_work_order_number_value work_order FROM content_type_pentry pentry INNER JOIN node node_equipment ON node_equipment.nid = pentry.field_pentry_medical_equips_nid INNER JOIN content_type_medical_equipment equ ON equ.nid = pentry.field_pentry_medical_equips_nid INNER JOIN node node_client ON node_client.nid = equ.field_equipment_client_nid INNER JOIN content_field_type_l2 model ON pentry.field_pentry_medical_equips_nid = model.nid INNER JOIN term_data ON model.field_type_l2_value = term_data.tid' . $where;
  $result = pager_query($query, 50);
  $rows = array();
  global $language;
  if ($language->language == 'ar'){
    $header = array('<input type="checkbox" name="checkboxall" id="checkall">'. t('ﺖﺤﻘﻗ ﺎﻠﻜﻟ'),t("ﺰﻳﺍﺭﺓ ﺎﻠصيانة الدورية"), t("ﺕﺍﺮﻴﺧ ﺎﻟﺰﻳﺍﺮﻫ"), t("ﺎﻟﺮﻘﻣ ﺎﻠﻤﺴﻠﺴﻟ ﻞﻠﺠﻫﺍﺯ"), t("ﺎﻠﻣﻭﺪﻴﻟ"), t("ﺎﻠﻌﻤﻴﻟ"), t("ﺮﻘﻣ ﺎﻠﺘﻗﺮﻳﺭ ﺎﻠﻔﻨﻳ"), t("ﺎﻠﺣﺎﻟﺓ"));
  }
  else{
    $header = array('<input type="checkbox" name="checkboxall" id="checkall">'. t('Check All'),t("PPM Entry"), t("Entry date"), t("Equipment S.N"), t("Model"), t("Client"), t("Job sheet Number"), t("Status"));
  }
  while ($data = db_fetch_object($result)){
    $pentry_nid = url('node/' . $data->nid);
    $row = array();
    $nid = $data->nid;
    $row[] = '<input type="checkbox" name="check_list['.$nid.']" class="checkbox1" id = '.$id.'value='.$value.'>';
    if ($language->language == 'ar'){
      $row[] = array('data' => "<a href='".$pentry_nid."'>عرض زيارة الصيانة الدورية</a>");
    }
    else{
      $row[] = array('data' => "<a href='".$pentry_nid."'>View PPM Entry</a>");
    }
    $row[] = array('data' => date('d/m/Y', $data->pentry_value));
    $row[] = array('data' => $data->equipment_sn);
    $row[] = array('data' => $data->model_name);
    $row[] = array('data' => $data->client);
    if (empty($data->work_order)){
      $row[] = 'N/A';
    }
    else{
      $row[] = array('data' => $data->work_order);
    }
    if ($data->status == NULL){
      $row[] = 'N/A';
    }
    else if ($data->status == 0){
      $row[] = 'Done';
    }
    else if($data->status == 1){
      $row[] = 'Not yet';
    }
    else{
      $row[] = 'On hold';
    }
    $value++;
    $id++;
    $rows[] = $row;
  }
  $html_body .= "<div class='portlet box green'>
                     <div class='portlet-title'>
                        <div class='caption'><i class='icon-cogs'></i> ". t('PPM entries table'). "
                                                                                                      </div>
                        <div class='tools'>
                           <a class='collapse' href='javascript:;'></a>
                           <a class='config' data-toggle='modal' href='#portlet-config'></a>
                           <a class='reload' href='javascript:;'></a>
                           <a class='remove' href='javascript:;'></a>
                        </div>
                     </div>

                     <div class='portlet-body lookup-table flip-scroll' >";
  $html_body .= theme('table', $header, $rows);
  $html_body .= theme('pager', 50);
  $html_body .= "</div>";
  $html_body .= "</div>";
  $form['result'] = array(
    '#value' => $html_body,
  );
  $form['ppm_entries_value'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['ppm_entries_value']['visit_status'] = array(
    '#type' => 'select',
    '#title' => t('Visit status'),
    '#options' => array(
      '0' => 'Done',
      '1' => 'Not yet',
      '2' => 'On hold',
    ),
  );
  $form['ppm_entries_value']['task_status'] = array(
    '#type' => 'select',
    '#title' => t('Task status'),
    '#options' => array(
      '0' => 'Pass',
      '1' => 'Fail',
    ),
  );
  $form['ppm_entries_value']['overall_work_status'] = array(
    '#type' => 'select',
    '#title' => t('Device status'),
    '#options' => array(
      '0' => 'Accepted',
      '1' => 'Not Accepted',
    ),
  );
  $form['ppm_entries_value']['job_sheet_change'] = array(
    '#type'  => 'textfield',
    '#title' => t('Job Sheet'),
  );
  $form['ppm_entries_value']['working_hours'] = array(
    '#type'  => 'textfield',
    '#title' => t('Working hours'),
  );
  $form['ppm_entries_value']['traveling_hours'] = array(
    '#type'  => 'textfield',
    '#title' => t('Traveling hours'),
  );
  $form['ppm_entries_value']['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * sumbit action the form
 * button => apply to search entries
 * & button => save to update entries' values
 */
function ppm_entries_checked_form_submit($form, &$form_state){
  if(isset($_POST['check_list'])) {
    $nid = array();
    foreach ($_POST['check_list'] as $key => $value){
      $nid[] = $key;
    }
  }
  //print_r($_POST); exit();
  if ($_POST['op'] == t('Apply')){
    $expected_date_from    = strtotime($form_state['values']['expecteddate_from']);
    $expected_date_to      = strtotime($form_state['values']['expecteddate_to']);
    $equipment_sn = $form_state['values']['equipment_sn'];
    $model = $form_state['values']['model'];
    $client         = $form_state['values']['client'];
    $job_sheet      = $form_state['values']['job_sheet'];
    drupal_goto("check/entries/ppm","client=$client&equipment_sn=$equipment_sn&model=$model&job_sheet=$job_sheet&expecteddate_from=$expected_date_from&expecteddate_to=$expected_date_to");
  }
  $visit_status = $form_state['values']['visit_status'];
  $job_sheet_number = $form_state['values']['job_sheet_change'];
  $job_sheet_number = (string)$job_sheet_number;
  $working_hours = $form_state['values']['working_hours'];
  $traveling_hours = $form_state['values']['traveling_hours'];
  $status = $form_state['values']['status'];
  $task_status = $form_state['values']['task_status'];
  $overall_work_status = $form_state['values']['overall_work_status'];
  if ($_POST['op'] == t('Save')){
    if(empty($job_sheet_number)){
      form_set_error("", $message = t('Job sheet field is required'));
      return;
    }
    if(!empty($nid)){
      $nid_str = implode(',', $nid);
      foreach($nid as $key => $value){ 
        $task_count[$value] = db_result(db_query('SELECT count(field_pentry_task_value) FROM content_field_pentry_task WHERE nid = %d',$value));
      }
      foreach($nid as $key => $value){
        $vid[$value] = db_result(db_query('SELECT vid FROM content_field_pentry_task WHERE nid = %d', $value));
      }
    }
    if(!empty($nid_str)){
      $delete_query = db_query('DELETE FROM content_field_pentry_task_status WHERE nid IN('.$nid_str.')');
    }
    if (!empty($task_count)){
      foreach ($task_count as $nid => $count){
        for ($i = 0; $i < $count; $i++){
          $insert_query = db_query('INSERT INTO content_field_pentry_task_status (vid, nid, delta, field_pentry_task_status_value) VALUES (%d, %d, %d, "%s")', $vid[$nid], $nid, $i, $task_status);
        }
      }
    }
    if (!empty($job_sheet_number) && !empty($_POST['check_list'])){
      $query = db_query('UPDATE content_type_pentry pentry, content_field_pentry_task_status status SET status.field_pentry_task_status_value ='.$task_status.', pentry.field_pentry_visit_status_value = '.$visit_status.', pentry.field_pentry_status_value = '.$overall_work_status.', pentry.field_pentry_work_order_number_value = "%s", pentry.field_pentry_working_hours_value = %d, pentry.field_pentry_traveling_hours_value = %d WHERE status.nid IN('.$nid_str.') AND pentry.nid IN ('.$nid_str.')', $job_sheet_number, $working_hours, $traveling_hours);
      drupal_set_message('Database have been updated');
      clear_cache_page();
    }
  }
}



function get_last_part_price(){
  if (variable_get('quotation_cost_based_on', 3) == 1){
    $call_nid = arg(5);
    $part_nid = arg(4);
    $query = db_query('SELECT client.field_client_type_of_customer_value type_of_customer, client.field_client_taxes_value taxes FROM content_field_job_client job_client INNER JOIN content_type_client client ON job_client.field_job_client_nid = client.nid WHERE job_client.nid = %d', $call_nid);
    while ($result = db_fetch_object($query)){
      $type_of_customer = $result->type_of_customer;
      $taxes = $result->taxes;
    }
    $factor_value = db_result(db_query('SELECT factor_value FROM factors WHERE type_of_customer = %d AND taxes = %d', $type_of_customer, $taxes));
    $query2 = db_query('SELECT field_part_sell_value, field_part_currency_type_value FROM content_type_part_catalog WHERE nid = %d', $part_nid);
    if ($result = db_fetch_object($query2)){
      $sell_price = $result->field_part_sell_value;
      $currency = $result->field_part_currency_type_value;
    }
    $price_of_currency = db_result(db_query('SELECT currency_price_in_egp FROM current_price_of_currency WHERE id_of_currency = %d', $currency));
    $unit_price = $sell_price * $price_of_currency * $factor_value;
    echo $unit_price;
  }
  else if (variable_get('quotation_cost_based_on', 3) == 0){
    $part_nid = arg(4);
    $query = db_query('SELECT unit_price.field_quotation_unit_price_value price, item_code.nid FROM content_field_quotation_item_code item_code INNER JOIN content_field_quotation_unit_price unit_price ON unit_price.nid = item_code.nid AND unit_price.delta = item_code.delta WHERE field_quotation_item_code_nid = %d ORDER BY unit_price.field_quotation_unit_price_value DESC limit 1', $part_nid);
    if($result = db_fetch_object($query)){
      $last_price = $result->price;
    }
    echo $last_price;
  }
}
/**
 * autocomplete field to search by client
 * @ workflow related to handle_search_client_workflow
 */
function autocomplete_search_client_workflow($string){
  $matches = array();
  $result = db_query_range("SELECT node.title title, node.nid from node  WHERE node.type='client' and  LOWER(node.title) LIKE LOWER('%%%s%')", $string, 0, 20);
  while ($data = db_fetch_object($result)) {
    $matches[$data->title.":".$data->nid] = check_plain($data->title);
  }
  print drupal_to_js($matches);
  exit();
}




/**
 * autocomplete to search by equipment arabic name
 * related to form handle_search_equipments_form
 */
function autocomplete_equipment_name_search($string){
  $matches = array();
  $result = db_query_range("SELECT arabic_name FROM {equipment_name} WHERE LOWER(arabic_name) LIKE LOWER('%%%s%')", $string, 0, 20);
  while ($data = db_fetch_object($result)) {
    $matches[$data->arabic_name] = check_plain($data->arabic_name);
  }
  print drupal_to_js($matches);
  exit();
}

/**
 * autocomplete equipment english name @ search equipments
 */
function autocomplete_equipment_english_name_search($string){
  $matches = array();
  $result = db_query_range("SELECT english_name FROM {equipment_name} WHERE LOWER(english_name) LIKE LOWER('%%%s%')", $string, 0, 20);
  while ($data = db_fetch_object($result)) {
    $matches[$data->english_name] = check_plain($data->english_name);
  }
  print drupal_to_js($matches);
  exit();
}

/**
 * autocomplete part english name @ search parts
 */
function autocomplete_part_name_search($string){
  $matches = array();
  $result = db_query_range("SELECT field_part_data_part_name_e_value part_name FROM {content_type_part_catalog} WHERE LOWER(field_part_data_part_name_e_value) LIKE LOWER('%%%s%')", $string, 0, 20);
  while ($data = db_fetch_object($result)) {
    $matches[$data->part_name] = check_plain($data->part_name);
  }
  print drupal_to_js($matches);
  exit();
}

/**
 * autocomplete part number @ search parts
 */
function autocomplete_part_number_search($string){
  $matches = array();
  $result = db_query_range("SELECT node.title title FROM {content_type_part_catalog} INNER JOIN node WHERE LOWER(node.title) LIKE LOWER('%s%')", $string, 0, 20);
  while ($data = db_fetch_object($result)) {
    $matches[$data->title] = check_plain($data->title);
  }
  print drupal_to_js($matches);
  exit();
}


/**
 * returns equipment brand
 * using equipment model
 */
function _get_equipment_brand() {
  $query = db_query('select parent from term_hierarchy inner join term_data using(tid) where term_data.name = "%s"', arg(3));
  if ($result = db_fetch_object($query)){
    $parent = $result->parent;
  }
  $query = db_query('select name from term_data where tid = %d', $parent);
  if ($result = db_fetch_object($query)){
    $brand = $result->name;
  }
  echo $brand;
}



/**
 * ajax call to save new equiment 
 */
function save_new_equipment(){
  $equipment_arabic_name = arg(3);
  $equipment_english_name = arg(4);
 // $get_arabic_name = _get_equ_arabic_names();
 // $get_english_name = _get_equ_english_names(); 
  $sql = "INSERT INTO {equipment_name}(arabic_name, english_name) VALUES  ('%s', '%s')";
  $result = db_query($sql , $equipment_arabic_name, $equipment_english_name);
}


/**
 * get equipment name
 */
function _get_equipment_name() {
  if (arg(1) == 'eng') {
    echo db_result(db_query('select english_name from equipment_name where arabic_name = "%s"', arg(2)));
  }
  else {
    //echo 'select english_name from equipment_name where arabic_name =' . arg(2);
    echo db_result(db_query('select arabic_name from equipment_name where english_name = "%s"', arg(2)));
  }
}

/**
 * ajax call to save new component to be fixed 
 */
function save_new_component_to_be_fixed(){
  $equipment_arabic_name = arg(3);
  $equipment_english_name = arg(4);
  $nid = arg(5);
  $equipment_id = _get_equipment_name_value_by_equipment_nid($nid);
  $sql = "INSERT INTO {cis_spare_part}(spare_name, spare_name_english, equipment_name_id) VALUES  ('%s', '%s', '%s')";
  $result = db_query($sql , $equipment_arabic_name, $equipment_english_name, $equipment_id);

  $lastid = @db_last_insert_id();
  $component_option_html =  "<option value='".$lastid."'>$equipment_arabic_name|$equipment_english_name</option>";  
  echo $component_option_html;
}



/**
 * TODO .. need to be renamed if it is still being used
 */
function _get_part_english_names() {
  $ar_names = array();
  $res = db_query("SELECT id, part_name_arabic as arabic_name FROM {part_names}");
  while($row = db_fetch_array($res)) {
    $ar_names[$row['id']] = $row['arabic_name'];
  }
  return $ar_names;
}


/**
 * returns arabic names list of equipment name
 * to be displayed as options in the select box 
 * or used in any other information needed
 */
function _get_equ_arabic_names() {
  $ar_names = array();
  $res = db_query("SELECT id, arabic_name FROM {equipment_name}");
  while($row = db_fetch_array($res)) {
    $ar_names[$row['id']] = $row['arabic_name'];
  }
  return $ar_names;
}



/**
 * returns arabic names list of equipment name
 * to be displayed as options in the select box 
 * or used in any other information needed
 */
function _get_equ_english_names() {
  $en_names = array();
  $res = db_query("SELECT id, english_name FROM {equipment_name}");
  while($row = db_fetch_array($res)) {
    $en_names[$row['id']] = $row['english_name'];
  }
  return $en_names;
}



/**
 * Equipment Lookup
 * This function return the form to be presented in the lookup
 * window showed by the user to select the part name needed 
 * the form is also used when getting update the table data through ajax
 * when the user click in the search button
 * Equipment look up is different as it used to multiselect many equipment in the same time .
 */
function _get_equipment_listing_search () {
 
  global $hospital_nid;
  global $cmms_type;

  if ($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY) {
    $query = 'select distinct(node.nid) as nid, node.title as title, e.field_equipment_name_value as name, brand.field_type_l1_value as e_brand , model.field_type_l2_value as e_model, equ_client_node.title client_name from node inner join content_type_medical_equipment p using(nid) inner join content_field_equipment_name e using(nid) inner join content_field_type_l1 brand using(nid) inner join content_field_type_l2 model using(nid) inner join node equ_client_node ON equ_client_node.nid = p.field_equipment_client_nid where node.type = "medical_equipment" AND p.field_equipment_m_contract_stat_value = 3 and p.field_medical_equip_hospital_nid = ' . $hospital_nid;
 
  }
  else {
    $query = 'select distinct(node.nid) as nid, node.title as title, e.field_equipment_name_value as name, brand.field_type_l1_value as e_brand , model.field_type_l2_value as e_model from node inner join content_type_medical_equipment p using(nid) inner join content_field_equipment_name e using(nid) inner join content_field_type_l1 brand using(nid) inner join content_field_type_l2 model using(nid)  where node.type = "medical_equipment" AND p.field_equipment_m_contract_stat_value = 3 and p.field_medical_equip_hospital_nid =' . $hospital_nid;
 
  }

  $where_clause = '';
  // add equipment name where clause
  if(arg(1) > 0) {
     $where_clause =  " and e.field_equipment_name_value =". arg(1);
  }
  // add brand where clause
  if (arg(2) > 0)
    $where_clause .= " and brand.field_type_l1_value =". arg(2);
  // add model where clause
  if (arg(3) > 0) { // _ underscore indicate empty part code entered 
    $where_clause .= " and model.field_type_l2_value =". arg(3);
  }
   // sn
  if (arg(4) != '_') { // _ underscore indicate empty part code entered 
    $where_clause .= " and node.title like '%". arg(4) . "%'";
  }
   // client
  if (arg(5) != '_' && ($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY)) { // _ underscore indicate empty part code entere
    $client = arg(5);
    $where_clause .= ' and LOWER(equ_client_node.title) like "%'. strtolower($client) .'%" or  LOWER(equ_client_node.title) like "'. strtolower($client) .'%"';
  }

 
  $query .= $where_clause;
  //echo $query;
  $result = pager_query($query, 30,0);
  $rows = array();
  while ($row = db_fetch_array($result)) {

   //$row['nid'] = '<input id="test" type="checkbox" name ="'.$row['nid'].'" value="'. $row['title'] .'">' ; 
    $cck_field_name = 'field_equ_name_english';
    $value = $row['name'];
    $value_name = _get_field_real_name_by_field_name_value($value, $cck_field_name);
    $row['name'] = $value_name;
    $row['nid'] = '<input id="'.$row['nid'].'"  class="'.$value_name.'" type="checkbox" name ="equipment_selected" value="'. $row['title'] .'">' ; 

    $key = 'field_type_l1';
    $content_field = content_fields($key);
    $allowed_values = content_allowed_values($content_field);
    $value = $row['e_brand'];
    $row['e_brand'] = $allowed_values[$value];

    $cck_field_name = 'field_type_l2';
    $value = $row['e_model'];
    $value_name = _get_field_real_name_by_field_name_value($value, $cck_field_name);
    $row['e_model'] = $value_name;
    if($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY){
      $row['client_name'] = $row['client_name'];
    }
    else {
      unset($row['client_name']);
    }
    $rows [] = $row;
  }

  $html_body = '<input id="lookup_close_btn" type="button" value="X" onclick="'.  "close_lookup() " .'">';
  $html_body .= "<div id='lookup_filters'>" . drupal_get_form(_search_equipment_list);
  $html_body .= '<input type="button" value="Search" onclick="'.
  "
  search_and_get_result_to_lookup()
 
  "
 .'"></div>';
  $html_body .= "
  <div class='portlet box green'>
                     <div class='portlet-title'>
                        <div class='caption'><i class='icon-cogs'></i> ". t('Equipments listing'). "
                                                                                                      </div>
                        <div class='tools'>
                           <a class='collapse' href='javascript:;'></a>
                           <a class='config' data-toggle='modal' href='#portlet-config'></a>
                           <a class='reload' href='javascript:;'></a>
                           <a class='remove' href='javascript:;'></a>
                        </div>
                     </div>
                     <div class='portlet-body lookup-table flip-scroll' style='max-height:200px; overflow-y:auto'>";
 
   //echo $cmms_type; exit();

  if (sizeof($rows) > 0) {
    if($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY){
      $table_body = theme_table(array('',t('S.N'), t('equipment name'), t('Brand'), t('Model'), t('Client')), $rows, array('table-bordered table-striped table-condensed flip-content'));
    }
    else {
      $table_body = theme_table(array('',t('S.N'), t('equipment name'), t('Brand'), t('Model')), $rows, array('table-bordered table-striped table-condensed flip-content'));
    }
    
    $html_body .= $table_body;

    global $filled_assigned_employee_automatic_mc;
    if ($filled_assigned_employee_automatic_mc == FILLED_ASSIGNED_EMPLOYEE_AUTOMATIC_MC){
      $calling_function ="apply_selected_equipments_with_assigned_employee();";
    }
    else{
      $calling_function ="apply_selected_equipments();";
    }

    $button_select .= '   <button id ="equipment_select_btn" type="button" 
                  
                  onclick="' .
                  "
      $calling_function
                  ". 
                  
                  '">Submit!</button></div>';
    $html_body .=  '</div>' . $button_select;
  }
  else {
    $table_body = t("No Results");
    $html_body .= $table_body;
  }

  $inline_script = _return_inline_scripts_for_lookup();
  $html_footer = $inline_script . "</html>";

  if (!empty($where_clause)) {
    echo $table_body ;
  }
  else {
    echo $html_header . $html_body . $html_footer;
  }
}



/**
 * Equipment Coding Lookup
 * This function return the form to be presented in the lookup
 * window showed by the user to select the part name needed 
 * the form is also used when getting update the table data through ajax
 * when the user click in the search button
 */
function _get_coding_listing_search () {
 

  $query = 'select distinct(node.nid) as nid, node.title as title, e.field_equipment_name_value as name, brand.field_type_l1_value as e_brand 
  , model.field_type_l2_value as e_model from node inner join content_type_item_data p using(nid) inner join content_field_equipment_name e using(nid) inner join content_field_type_l1 brand using(nid) inner join content_field_type_l2 model using(nid) where node.type = "item_data"';
  $where_clause = '';
  // add equipment name where clause
  if(arg(1) > 0) {
     $where_clause =  " and e.field_equipment_name_value =". arg(1);
  }
  // add brand where clause
  if (arg(2) > 0)
    $where_clause .= " and brand.field_type_l1_value =". arg(2);
  // add model where clause
  if (arg(3) > 0) { // _ underscore indicate empty part code entered 
    $where_clause .= " and model.field_type_l2_value =". arg(3);
  }
   // sn
  if (arg(4) != '_') { // _ underscore indicate empty part code entered 
    $where_clause .= " and node.title like '%". arg(4) . "%'";
  }

 $query .= $where_clause;
 $result = pager_query($query, 30,0);
 $rows = array();
 while ($row = db_fetch_array($result)) {

   $row['nid'] = '<input type="radio" name ="code_select" value="'. $row['title'] ." [nid:". $row['nid'].']">' ; 
   $cck_field_name = 'field_equ_name_english';
   $value = $row['name'];
   $value_name = _get_field_real_name_by_field_name_value($value, $cck_field_name);
   $row['name'] = $value_name;

   $key = 'field_type_l1';
   $content_field = content_fields($key);
   $allowed_values = content_allowed_values($content_field);
   $value = $row['e_brand'];
   $row['e_brand'] = $allowed_values[$value];

   $cck_field_name = 'field_type_l2';
   $value = $row['e_model'];
   $value_name = _get_field_real_name_by_field_name_value($value, $cck_field_name);
   $row['e_model'] = $value_name;
   $rows [] = $row;
 }


  $html_body = '<input id="lookup_close_btn" type="button" value="X" onclick="'.  "close_lookup() " .'">';
  $html_body .= "<div id='lookup_filters'>" . drupal_get_form(_search_equipment_list);
  $html_body .= '<input type="button" value="Search" onclick="'.
  "
    $('.art-msg').hide();    
    $('.art-msg').show();    
    var sn = $('#edit-sn').val();
    var equipment_name = $('#edit-equipment-name').val();
    var brand = $('#edit-ffield-type-l1-value').val();
    var model = $('#edit-ffield-type-l2-value').val();
    if (sn.length == 0) {
      sn = '_';
    }
    if (model.length == 0) {
      model = '0';
    }
    if (sn == '_' && brand==0 && model ==0 && equipment_name == 0) {
    }
    else {
      $.get(Drupal.settings.basePath +'return_coding_search_form'+'/'+ equipment_name + '/' + brand + '/' + model + '/' + sn, null, function(response) { 
        $('.lookup-table').html(response);  
      });
    }
 
 "
 
 
 
 .'"></div>';
 $html_body .= "
<div class='portlet box green' >
                     <div class='portlet-title'>
                        <div class='caption'><i class='icon-cogs'></i> ". t('Models listing'). "
                                                                                                      </div>
                        <div class='tools'>
                           <a class='collapse' href='javascript:;'></a>
                           <a class='config' data-toggle='modal' href='#portlet-config'></a>
                           <a class='reload' href='javascript:;'></a>
                           <a class='remove' href='javascript:;'></a>
                        </div>
                     </div>
                     <div class='portlet-body lookup-table flip-scroll' style='max-height:200px; overflow-y:auto'>";
 
  if (sizeof($rows) > 0) {
    $table_body = theme_table(array('',t('code'), t('equipment name'), t('Brand'), t('Model')), $rows, array('table-bordered table-striped table-condensed flip-content'));
    $html_body .= $table_body;
    $button_select .= '   <button id ="code_select_btn" type="button" 
                  
                  onclick="' .
                  "
apply_selected_part_catalog()
                  ". 
                  
                  '">Submit!</button></div>';
    $html_body .=  '</div>' . $button_select;
  }
  else {
    $table_body = t("No Results");
    $html_body .= $table_body;
  }


  $inline_script = _return_inline_scripts_for_lookup();
  $html_footer = $inline_script . "</html>";
  //$html_footer = $scripts . $inline_script . "</html>";

  if (!empty($where_clause)) {
    echo $table_body ;
  }
  else {
    echo $html_header . $html_body . $html_footer;
  }
}





/**
 * Part Catalog Lookup
 * This function return the form to be presented in the lookup
 * window showed by the user to select the part name needed 
 * the form is also used when getting update the table data through ajax
 * when the user click in the search button
 */
function _get_part_catalog_search () {
  
  $query = 'select node.nid as nid,node.title as title,  p.field_part_data_part_name_e_value as part_name, p.field_part_qty_on_hand_value as qty from node inner join content_type_part_catalog p using(nid) inner join content_field_equipment_name e using(nid) where node.type = "part_catalog"';

  $where_clause = '';
  // add equipment name where clause
  if(arg(1) > 0) {
    $where_clause =  " and e.field_equipment_name_value =". arg(1);
  }
  // add part name where clause

  if (!is_numeric(arg(2))) {
    $where_clause .= " and p.field_part_data_part_name_e_value like'%". arg(2) . "%'";
  }
  elseif(arg(2) == 0) {
  } 
  // add part code where clause
 
  if (arg(3) != '_') { // _ underscore indicate empty part code entered 
    $where_clause .= " and node.title like '%". arg(3) . "%'";
  }
 
 $query .= $where_clause;
 //echo $query; exit();
 $result = pager_query($query, 30,0);
 $rows = array();
 while ($row = db_fetch_array($result)) {

   $row['nid'] = '<input id ="'.$row['qty'].'" type="radio" name ="code_select" value="'. $row['title'] ." [nid:". $row['nid'].']">' ;


   /*$cck_field_name = 'field_equipment_name';
   $value = $row['name'];
   $value_name = _get_field_real_name_by_field_name_value($value, $cck_field_name);
   $row['name'] = $value_name;*/

   //$cck_field_name = 'field_part_data_part_name_e';
   //$value = $row['part_name'];
   //$value_name = _get_field_real_name_by_field_name_value($value, $cck_field_name);
   $row['part_name'] = $row['part_name'];//$value_name;
   $row['qty'] = $row['qty'];
   $cck_field_name = 'field_part_grouping';
   $value = $row['part_group'];
   $value_name = _get_field_real_name_by_field_name_value($value, $cck_field_name);
   $row['part_group'] = $value_name;

   $rows [] = $row;
 }

  $html_body = '<input id="lookup_close_btn" type="button" value="X" onclick="'.  "close_lookup() " .'">';
  $html_body .= "<div id='lookup_filters'>" . drupal_get_form(_search_part_list_code);
  $html_body .= '<button type="button" onclick="'.
  "
    var equipment_name = $('#edit-equipment-name').val();
    var part_name = $('#edit-part-catalog-name').val();
    var part_code = $('#edit-item-code').val();
    if ($('#edit-item-code').val() == '') {
      part_code = '_';
    }
    if ($('#edit-part-catalog-name').val()  == '') {
      part_name = '_';
    }
    if ( part_code == '_' && equipment_name == 0 && part_name == 0 ) {
    }
    else {
      $.get(Drupal.settings.basePath +'return_part_catalog_search_form'+'/'+ equipment_name + '/' + part_name + '/' + part_code, null, function(response) { 
        $('.lookup-table').html(response);  
      });
    }
 
 "
 
 
 
 .'">Search</button></div>';
 $html_body .= "
<div class='portlet box green'>
                     <div class='portlet-title'>
                        <div class='caption'><i class='icon-cogs'></i> ". t('Part Catalog listing'). "
                                                                                                      </div>
                        <div class='tools'>
                           <a class='collapse' href='javascript:;'></a>
                           <a class='config' data-toggle='modal' href='#portlet-config'></a>
                           <a class='reload' href='javascript:;'></a>
                           <a class='remove' href='javascript:;'></a>
                        </div>
                     </div>
                     <div class='portlet-body lookup-table flip-scroll' style='max-height:200px; overflow-y:auto'>";
  
  
  if (sizeof($rows) > 0) {

    $table_body = theme_table(array('',t('Part Number'),t('Description'), t('Qty')), $rows, array('table-bordered table-striped table-condensed flip-content'));

    $html_body .= $table_body;
    $button_select .= '   <button id ="codee_select_btn" type="button" 
                  
                  onclick="' .
                  "
apply_selected_spare_part()
                  ". 
                  
                  '">Submit!</button></div>';
    $html_body .= '</div>' . $button_select;
  }
  else {
    $table_body = t("No Results");
    $html_body .= $table_body;
  }


  //$html_body .= theme('pager', NULL, 10, 0);
  $html_footer = $scripts . "</html>";

  if (!empty($where_clause)) {
    echo $table_body ;
  }
  else {
    echo $html_header . $html_body . $html_footer;
  }
}




/**
 * return inline scripts to be added in the lookup form
 */
function _return_inline_scripts_for_lookup() {

  $inline_script = "
  <script>
      // prevent enter in textbox in lookup
    equipment_box_change();
    $('#edit-sn').keypress(function(event) {
      if (event.keyCode == 13) {
        event.preventDefault();
      }
    });
    $('#edit-ffield-type-l2-value-wrapper').hide();
    $('#edit-ffield-type-l1-value').change(function(){
      $('#edit-ffield-type-l2-value-wrapper').show();
      var root_value = $('#edit-ffield-type-l1-value').val();
   
      $.get(Drupal.settings.basePath + language +'get_cck_childs/'+ root_value +'|' + '1'  +'', null, function(response) { 
        $('#edit-ffield-type-l2-value').html(response);
      });

    });
  </script>
  ";
  return $inline_script;



}

/**
 * This function has been previously made by sayed
 * and needed to be removed from the system if it is not
 * needed any more .. or keep it to be used later if needed
 * or take an idea of the code written from it .
 */
function _service_report_withdrawGetSpareParts() {
  /*$node = db_query("SELECT type FROM {node} WHERE nid = %d", arg(1));
  $type = db_fetch_object($node);
  switch($type->type) {
    case "job":
      $table = "content_type_job";
      $field = "field_job_medical_equip_nid";
      break;
    case "service_report":
      $table = "content_type_service_report";
      $field = "field_service_report_equip_nid";
      break;
    default:
      $table = "content_type_importcode";
      $field = "field_importcode_equipment_nid";
  }
  $equ_nid = db_query("SELECT $field FROM {$table} WHERE nid = %d", arg(1));
  $row = db_fetch_object($equ_nid);
  $res = db_query("SELECT title FROM {node} WHERE nid= %d", $row->$field);
  $row = db_fetch_object($res);
  $title = $row->title;
  $res = db_query("SELECT item_id, item_desc FROM {spare_parts} WHERE eq_name_id = '{$title}'");
  while($row = db_fetch_object($res)) {
    $items[$row->item_id] = $row->item_desc;
  }
  return $items;
*/
}



/**
 * This function has been previously made by sayed
 * and needed to be removed from the system if it is not
 * needed any more .. or keep it to be used later if needed
 * or take an idea of the code written from it .
 */
function _withdraw_spare_parts_from_store() {
  global $user;
  $success = true;
  $items = json_decode($_POST['postData'], true);
  for($i=0; $i<count($items['item_descriptions']); $i++)  {
    $result = db_query("UPDATE {spare_parts} SET num=num-".$items['number_items'][$i]." WHERE item_id = ".$items['item_descriptions'][$i]);
    $transaction = db_query("INSERT INTO {transactions} VALUES(DEFAULT,{$items['item_descriptions'][$i]}, {$items['number_items'][$i]}, 2, {$user->uid}, '{$items['op_types'][$i]}', NOW())");
    if(!$result && !$trans) {
      $failedItems = $i+1;
      $success = false;
      break;
    }
  }
  print_r(json_encode(array($success, $failedItems)));
}



/**
 * This function has been previously made by sayed
 * and needed to be removed from the system if it is not
 * needed any more .. or keep it to be used later if needed
 * or take an idea of the code written from it .
 */
function _save_spare_parts_to_store() {
  global $user;
  $success = true;
  $items = json_decode($_POST['postData'], true);
  //$nid_res = db_query("SELECT nid FROM {node} WHERE title = '%s'", $items['equipment']);
  //$n_row = db_fetch_object($nid_res);
  $res = db_query('SELECT field_equipment_department_nid FROM {content_type_medical_equipment} WHERE nid = %d', $items['equipment_nid']);
  $row = db_fetch_object($res);
  $department = $row->field_equipment_department_nid;
  $res = db_query("SELECT field_equipment_name_value FROM {content_field_equipment_name} WHERE nid = %d", $items['equipment_nid']);
  $row = db_fetch_object($res);
  $equipment_name_id = $row->field_equipment_name_value;
  $res = db_query('SELECT field_type_l1_value FROM {content_field_type_l1} WHERE nid = %d', $items['equipment_nid']);
  $row = db_fetch_object($res);
  $brand = is_null($row->field_type_l1_value) ? 0 : $row->field_type_l1_value;
  $res = db_query('SELECT field_type_l2_value FROM {content_field_type_l2} WHERE nid = %d', $items['equipment_nid']);
  $row = db_fetch_object($res); 
  $model = is_null($row->field_type_l2_value) ? 0 : $row->field_type_l2_value;
  for($i=0; $i<count($items['item_descriptions']); $i++)  {
    $result = db_query("INSERT INTO {spare_parts} VALUES(DEFAULT, '{$items['item_descriptions'][$i]}', {$items['number_items'][$i]}, {$items['unit_prices'][$i]}, '{$items['import_code']}', {$department}, {$equipment_name_id}, {$brand}, {$model}, '{$items['op_types'][$i]}', {$items['hospital_id']}, NOW())");
    //save to transactions table
    $lastID = @db_last_insert_id();
    $trans = db_query("INSERT INTO {transactions} VALUES(DEFAULT,{$lastID}, {$items['number_items'][$i]}, 1, {$user->uid}, '{$items['op_types'][$i]}', NOW())");
    if(!$result && !$trans) {
      $failedItems = $i+1;
      $success = false;
      break;
    }
  }
  print_r(json_encode(array($success, $failedItems)));
}



/**
 * Returns the ppm and calibration calendar to be displayed
 * in the dashboard 
 */
function _return_ppm_calibration_calendar() {
  return ' 
       <div class="portlet box purple">
                        <div class="portlet-title">
                           <div class="caption"><i class="icon-calendar"></i>PPM Calendar</div>
                           <div class="actions">
                           </div>
                        </div>
                        <div class="portlet-body">
       <div class="row-fluid">
                  ' .
                  
                   views_embed_view('ppm_schedule', 'calendar_1') .  
                  
                  
                  '</div><div>
                 <div class="portlet box purple">
                        <div class="portlet-title">
                           <div class="caption"><i class="icon-calendar"></i>Calibration Calendar</div>
                           <div class="actions">
                           </div>
                        </div>
                        <div class="portlet-body">
       <div class="row-fluid"> 
                  '.

                   views_embed_view('calibration_schedule', 'calendar_1').
                   '</div></div>';

}



/** 
 * Returns form to allow user to enter 
 * effeciency record
 */
function _render_efficiency_record_add_form() {
 
  $nid = arg(2);
  $result = db_query('select title from node where nid =%d', $nid);
  if($row = db_fetch_object($result)) 
  $output = t('Medical Equipment SN : ') . $row->title;
  $output .= drupal_get_form('efficiency_record_add_form');
  return $output;
}



/**
 * Returns for to allow user to edit
 * the effeciency record for specific equipment 
 */
function _render_efficiency_record_edit_form() {
 
  $nid = arg(2);
  $result = db_query('select title from node where nid =%d', $nid);
  if($row = db_fetch_object($result)) 
  $output = t('Medical Equipment SN : ') . $row->title;
  $output .= drupal_get_form('efficiency_record_edit_form');
  return $output;
}



/**
 * equipment list search form in lookup 
 */
function _search_equipment_list() {
  global $cmms_type; 
  $form['sn'] = array (
		'#type'		=>	'textfield',
		'#title'	=>	t('Model Code/S.N'),
	);

  $form['equipment_name'] = array(
    '#type' => 'select',
    '#title' => t('Equipment Name'),
    '#options' => array(0 => 'None') + _get_equ_english_names(),
  );

  $form['ffield_type_l1_value'] = array(
    '#type' => 'select',
    '#title' => t('Brand'),
    '#options' =>  array(0 => 'None') + _return_list_of_terms_from_taxonomy(1, 'parent'),
  );
 
  $form['ffield_type_l2_value'] = array(
    '#type' => 'select',
    '#title' => t('Model'),
    '#options' =>  array(0 => 'None') + _return_list_of_terms_from_taxonomy(1, 'child'),
  );

  if($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY){
    $form['client'] = array(
      '#type' => 'textfield',
      '#title' => t('Client'),
      '#autocomplete_path' => 'client/autocomplete/field',
    );
  }

  return $form;

}
 


/**
 * part list search form 
 */
function _search_part_list_code() {
 


  $form['equipment_name'] = array(
    '#type' => 'select',
    '#title' => t('Equipment Name'),
    '#options' => array(0 => 'None') + _get_equ_english_names(),
  );

  $form['part_catalog_name'] = array (
		'#type'		=>	'textfield',
		'#title'	=>	t('Description'),
  );
  $form['item_code'] = array (
		'#type'		=>	'textfield',
		'#title'	=>	t('Part Number'),
  );
  return $form;

}
 


/**
 * Effeciecny Record Add Form 
 */
function efficiency_record_add_form() {

  $years_array = array();
  $current_year = date("Y");
  $current_month = date("n");
  for($i= $current_year; $i>= $current_year-3; $i--) {
    $years_array[$i] = $i ;
  }

  $form['group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Efficency Info'),
  ); 

  $form['group']['number_of_cases'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of cases'),
    '#default_value' => $node->title,
    '#size' => 20,
    '#maxlength' => 20,
  );  
 
  $form['group']['efficiency_year'] = array(
    '#type' => 'select',
    '#title' => t('Year'),
    '#options' => $years_array,
    '#default_value' => $current_year,
    '#required' => true,
  );
  
  $form['group']['efficiency_month'] = array(
    '#type' => 'select',
    '#title' => t('Month'),
    '#default_value' => $current_month -1 ,
    '#options' => array(1 => 1 ,2 => 2 ,3 => 3, 4 => 4, 5=> 5, 6=> 6, 7=> 7, 8 =>8, 9 => 9, 10 => 10, 11 => 11, 12 => 12),
    '#required' => true,
  );
  

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  ); 

  return $form;
}



/** 
 * Efficiency Record edit form 
 */
function efficiency_record_edit_form() {

  $result = db_query('select * from equipment_efficiency where id = %d', arg(1));
  $row = db_fetch_object($result);
  $current_year = date('Y');
  $years_array = array();
  for($i= $current_year; $i>= $current_year-3; $i--) {
    $years_array[$i] = $i ;
  }

  $form['group'] = array(
    '#type' => 'fieldset',
    '#title' => t('Efficency Info'),
  ); 


  $form['group']['number_of_cases'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of cases'),
    '#default_value' => $row->number_of_cases,
    '#size' => 20,
    '#maxlength' => 20,
  );  
 

  $form['group']['efficiency_month'] = array(
    '#type' => 'select',
    '#title' => t('Month'),
    '#options' => array(1 => 1 ,2 => 2 ,3 => 3, 4 => 4, 5=> 5, 6=> 6, 7=> 7, 8 =>8, 9 => 9, 10 => 10, 11 => 11, 12 => 12),
    '#default_value' => $row->month ,
    '#required' => true,
  );
 
  $form['group']['efficiency_year'] = array(
    '#type' => 'select',
    '#title' => t('Year'),
    '#options' => $years_array,
    '#default_value' => $row->year,
    '#required' => true,
  );
  
 
  $form['group']['update_delete'] = array(
    '#type' => 'select',
    '#title' => t('Type of operation'),
    '#default_value' => 0,
    '#options' => array(0 => t('Update'), 1=> t('delete')),
    '#required' => true,
  );

 
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  ); 

  return $form;
}



/**
 * submit function for efficiency add form
 */
function efficiency_record_add_form_submit($form, &$form_state) {
  //print_r($form); exit();
  //global $user;
  //$hospital_nid = _get_user_working_hospital($user->uid);
  global $hospital_nid;
  $number_of_cases = $form['submit']['#post']['number_of_cases'];
  $month = $form['submit']['#post']['efficiency_month'];
  $year = $form['submit']['#post']['efficiency_year'];
  if(is_numeric(arg(2))) {
    db_query("INSERT INTO {equipment_efficiency } VALUES  ('', %d, %d, %d, %d, %d)", arg(2), $month, $year, $number_of_cases, $hospital_nid);
   
  }

  drupal_set_message('New Efficency Records Has Been Saved Successfully');
}



/**
 * submit for efficiency edit form
 */
function efficiency_record_edit_form_submit($form, &$form_state) {
  //print_r($form); exit();
  $id = arg(1);
  $number_of_cases = $form['submit']['#post']['number_of_cases'];
  $month = $form['submit']['#post']['efficiency_month'];
  $year = $form['submit']['#post']['efficiency_year'];
  $op = $form['submit']['#post']['update_delete'];

  if(is_numeric(arg(1)) && $op == 0) {
    db_query("UPDATE {equipment_efficiency } set month =%d , year =%d, number_of_cases= %d where id =%d", $month, $year, $number_of_cases, $id);
    drupal_set_message('Efficency Records Has Been Updated Successfully');
  }
  else {
    db_query('DELETE from {equipment_efficiency } where id =%d', $id) ; 
    drupal_set_message('Efficency Record Has Been deleted Successfully');
  }

}



/**
 * Implementation of hook_views_data
 */
function cis_system_views_data() {
  /*sayyed - spare parts*/
  $data['spare_parts']['table']['base'] = array(
    'field' => 'item_id',
    'title' => t('spare parts table'),
    'help' => t("let you display spare parts in store"),
    'weight' => -10,
  );
  //relations
  $data['spare_parts']['table']['join']['node'] = array(
    'left_field' => 'nid',
    'field' => 'dep',
  );
  $data['spare_parts']['table']['join']['equipment_name'] = array(
    'left_field' => 'id',
    'field' => 'eq_name_id',
  );
  $data['spare_parts']['table']['join']['node'] = array(
    'left_field' => 'nid',
    'field' => 'hospital_id',
  ); 
  
  $data['spare_parts']['table']['group'] = t('Store');
  // describtion for item_id
  $data['spare_parts']['item_id'] = array(
    'title' => t('item id'),
    'help' => t('autogenerated id in the database '),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  // describtion for item_id
  $data['spare_parts']['item_nid'] = array(
    'title' => t('item nid'),
    'help' => t('data input item nid '),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'relationship' => array(
      'base' => 'node',
      'field' => 'nid',
      'handler' => 'views_handler_relationship',
      'label' => t('data input item nid'),
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
 // fields with relations
 $data['spare_parts']['dep'] = array(
    'title' => t('Department nid'),
    'help' => t('Do A relation department to get related information'),
    'relationship' => array(
      'base' => 'node',
      'field' => 'nid',
      'handler' => 'views_handler_relationship',
      'label' => t('department nid'),
    ),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );
  $data['spare_parts']['hospital_id'] = array(
    'title' => t('Hospital nid'),
    'help' => t('Do A relation hospital to get related information'),
    'relationship' => array(
      'base' => 'node',
      'field' => 'nid',
      'handler' => 'views_handler_relationship',
      'label' => t('hospital nid'),
    ),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );
  $data['spare_parts']['eq_name_id'] = array(
    'title' => t('equipment name id'),
    'help' => t('Do A relation equipment to get related information'),
    'relationship' => array(
      'base' => 'equipment_name',
      'field' => 'id',
      'handler' => 'views_handler_relationship',
      'label' => t('equipment name id'),
    ),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );
  /*END fields with relations*/
  $data['spare_parts']['num'] = array(
    'title' => t('number of items'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $data['spare_parts']['brand'] = array(
    'title' => t('Brand'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['spare_parts']['model'] = array(
    'title' => t('Model'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  
  $data['spare_parts']['item_desc'] = array(
    'title' => t('Item Description'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  $data['spare_parts']['impcode_num'] = array(
    'title' => t('Import Code Number'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );

  $data['spare_parts']['op_type'] = array(
    'title' => t('Op Types'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );
  $data['spare_parts']['unit_price'] = array(
    'title' => t('Unit Price'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_float',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['spare_parts']['created'] = array(
    'title' => t('Date'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
  );
  /*END spare parts*/

  /*Transactions Table*/
  $data['transactions']['table']['base'] = array(
    'field' => 'transaction_id',
    'title' => t('transactions table'),
    'help' => t("display store transactions"),
    'weight' => -10,
  );
  //relations
  $data['spare_parts']['table']['join']['users'] = array(
    'left_field' => 'uid',
    'field' => 'user_id',
  );
  $data['spare_parts']['table']['join']['spare_parts'] = array(
    'left_field' => 'item_id',
    'field' => 'item_id',
  );
  $data['transactions']['table']['group'] = t('Transactions');
  // describtion for transaction_id
  $data['transactions']['transaction_id'] = array(
    'title' => t('transaction id'),
    'help' => t('autogenerated id in the database '),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
 // fields with relations
 $data['transactions']['user_id'] = array(
    'title' => t('user id'),
    'help' => t('Do A relation with users'),
    'relationship' => array(
      'base' => 'users',
      'field' => 'uid',
      'handler' => 'views_handler_relationship',
      'label' => t('user uid'),
    ),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );
  $data['transactions']['part_code_nid'] = array(
    'title' => t('item code nid'),
    'help' => t('Do A relation to node'),
    'relationship' => array(
      'base' => 'node',
      'field' => 'nid',
      'handler' => 'views_handler_relationship',
      'label' => t('item id'),
    ),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );

  $data['transactions']['transaction_node_nid'] = array(
    'title' => t('transaction node nid'),
    'help' => t('transaction node nid for importcode or quotation'),
    'relationship' => array(
      'base' => 'node',
      'field' => 'nid',
      'handler' => 'views_handler_relationship',
      'label' => t('item id'),
    ),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );
  /*END fields with relations*/
  $data['transactions']['quantity_on_hand'] = array(
    'title' => t('Quantity on hand before transaction'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['transactions']['quantity_received'] = array(
    'title' => t('Quantity received'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $data['transactions']['quantity_requested'] = array(
    'title' => t('Quantity delivered'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['transactions']['transaction_type'] = array(
    'title' => t('Transaction Type'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['transactions']['op_type'] = array(
    'title' => t('Op Types'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );
  
  $data['transactions']['created'] = array(
    'title' => t('Date'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
  );
  /*END  transactoins table*/

  $data['equipment_efficiency']['table']['base'] = array(
    'field' => 'id',
    'title' => t('efficiency table'),
    'help' => t("let you display the efficiency results for equipments"),
    'weight' => -10,
  );
 
  // adding relationship with users
  $data['equipment_efficiency']['table']['join']['node'] = array(
    'left_field' => 'nid',
    'field' => 'equipment_nid',
  );
 
  $data['equipment_efficiency']['table']['group'] = t('efficiency information');
  // describtion for id
  $data['equipment_efficiency']['id'] = array(
    'title' => t('efficiency id'),
    'help' => t('autogenerated id in the database '),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
 // describtion for exporter uid
 $data['equipment_efficiency']['equipment_nid'] = array(
    'title' => t('Equipment nid'),
    'help' => t('Do A relation with equipment to get related information'),
    'relationship' => array(
      'base' => 'node',
      'field' => 'nid',
      'handler' => 'views_handler_relationship',
      'label' => t('equipment nid'),
    ),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  ); 

  $data['equipment_efficiency']['month'] = array(
    'title' => t('Effiency Month'),
    'help' => t('Month recorded with the efficiency'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['equipment_efficiency']['year'] = array(
    'title' => t('Effiency Year'),
    'help' => t('Year recorded with the efficiency'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );

  $data['equipment_efficiency']['number_of_cases'] = array(
    'title' => t('Number of Cases'),
    'help' => t('Number of cases recored every month for the equipment'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  
  $data['equipment_efficiency']['hospital'] = array(
    'title' => t('Hospital nid'),
    'help' => t('Hospital'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_numeric',
    ),
  );

  return $data;
}



/**
 * Implementation of Hook_cron ()
 */
function cis_system_cron() {
 // set finshed maintenance contract to the targeted equipments
 /* $select_contracts = ' select cs.nid, me.field_mcontracts_medical_equip_nid  as equ_nid from  content_field_mcontracts_medical_equip me inner join  content_type_maintainancecontracts cs on cs.nid = me.nid where field_mcontracts_end_date_value2 < %d';
  $result = db_query($select_contracts, time());
  $equipments_array = array();
  while ($row = db_fetch_object($result)) {
    $equipments_array[$row->nid] = $row->equ_nid;
    $equipment_node = node_load($row->equ_nid, NULL, TRUE);
    $equipment_node->field_equipment_m_contract_stat[0]['value'] = 1;
    node_save($equipment_node);
  }     

// set the un finished maintenance contract to the targeted equipments
  $select_contracts = 'select cs.nid, me.field_mcontracts_medical_equip_nid  as equ_nid from  content_field_mcontracts_medical_equip me inner join  content_type_maintainancecontracts cs on cs.nid = me.nid where field_mcontracts_end_date_value2 > %d';
  $result = db_query($select_contracts, time());
  $equipments_array = array();
  while ($row = db_fetch_object($result)) {
    $equipments_array[$row->nid] = $row->equ_nid;
    $equipment_node = node_load($row->equ_nid, NULL, TRUE);
    $equipment_node->field_equipment_m_contract_stat[0]['value'] = 0;
    node_save($equipment_node);
  }
 */
} 



/** 
 * Implementation of hook_nodeapi()
 */
function cis_system_nodeapi(&$node, $op, $teaser, $page) {
   global $cmms_type;
  /********************* handle transfer employee node api in a seprate function *****************/
  _handle_transfer_employee($node);
  

  // do charts calculations needed in the dashboard - home page in node 80
  if ($node->nid == 80 ) {
    /** print inline var data in the dashboard
        to be displayed in the graph charts   **/
    // retrieve quotation cost
    _get_quotation_cost_data();
    // retreive percentage of ppm
    _get_ppm_percentages_data();
    // retreive percentage of calibration
    _get_cal_percentages_data();
    // retrieve percentage of fixs
    _get_fixes_percentages_data();
    // retrieve percentage of defects
    _get_defects_percentages_data();

  }
 
  /****************************************************************************************************/
  // handle different node type api
  switch($node->type) {
   /******* handle scraping node type  **********/
    case 'scraping':
      switch ($op) {
        case 'insert':  
        case 'update':
          $nid = $node->field_scraping_med_equip_sn[0]['nid'] ;
          db_query("UPDATE {node} SET status = 0  WHERE nid = %d",$nid);
          break; // break perior switch case
      }// close inner switch 
      break;    // break main perior switch case
  
    /***********************************************/
  

    /******* handle item_data node type  **********/
    case 'item_data':
      switch ($op) {
        case 'presave':
          _handle_item_data_presave($node);
          break;
        case 'validate':
          _handle_item_data_validataions($node);
          break; // break perior switch case
      }// close inner switch 
      break;    // break main perior switch case
  
    /***********************************************/
    /*** handle quotation node type ****************/
    case 'quotation':
      switch ($op) {
        case 'insert':
          _handle_quotation_insert($node);
          _handle_quotation_withdraw_spare_parts($node);
          break;
        case 'update':
          // calculate total price
          _handle_quotation_withdraw_spare_parts($node);
          break; // break perior switch case
        case 'presave':
          _handle_quotation_calculations($node);
          break;
        case 'validate' :
          // handle quotaion_validate
          _handle_quotation_validations($node);
        case 'delete':
          _handle_quotation_delete($node);
          break;
      }// close inner switch
      break; // break main perior switch case
    /***********************************************/
   
    /********* Handle Target Contracts node type **************/
    case 'target_contracts':

      switch ($op){
        case 'presave':
          _handle_target_contarcts_insert($node);
          break;
        case 'update':
          _handle_target_contarcts_insert($node);
      }// close inner switch
      break; // break main perior switch case
    /**********************************************************/
    /*** handle importcode node type ***************/
    case 'importcode':

      switch ($op) {
        case 'load':
          global $original_im_node;
          $original_im_node = $node;
          break;
        case 'insert': 
          _handle_importcode_insert($node);
          _handle_import_code_save($node);
          break;
        case 'update':
          // handle_imporcode_save
          _handle_import_code_save($node);
          break; // break perior switch case
        case 'presave':
          _handle_import_code_calculations($node);
          global $original_im_node;
          _handle_log_history((array)$node,(array)$original_im_node);
        case 'validate':
          _handle_import_code_validations($node);
          break;
        case 'delete':
          _handle_import_code_delete($node);
          break;
      }// close inner switch
      break; // break main perior switch case

  
    /***********************************************/
 
    /****** handle invoice node type ***************/

    case 'invoice':
      switch ($op) {
        case 'load':
          global $original_invoice_node;
          $original_invoice_node = $node;
          break;
        case 'presave':
          _handle_invoice_total_calculations($node);
          break;
        case 'insert':
          _handle_invoice_save($node);
          _handle_maintenance_income($node);
          break;
        case 'update':
          _handle_invoice_save($node);
          _handle_maintenance_income($node);
          break; // break perior switch case
        case 'delete':
          _handle_invoice_delete($node);
          break;
        case 'validate':
          _validate_part_name_description($node);
          break;
      }// close inner switch
      break; // break main perior switch case

    /***********************************************/


 
    /*** TODO -- later to be removed handle spare part node type ***************/
    case 'spare_part':
      switch ($op) {
        case 'presave':
          if(is_numeric($_GET['service_report_equip'])) {
            // get all medical equipment that have the same medical equipment name
            $node->field_spare_part_medical_equip= _get_equipments_by_equipment_name($_GET['service_report_equip']);
            //$node->field_spare_part_medical_equip=_get_equipments_by_equipment_name($_GET['service_report_equip']);
          }
          if(is_numeric(arg(3))) {
            $node->field_spare_part_medical_equip = _get_equipments_by_equipment_name(arg(3));
          }
          break; // break perior switch case 
      }// close inner switch
      break; // break main perior switch case

    /***********************************************/

    /**** handle medical equipment node type *******/
    case 'medical_equipment':
      switch ($op) {
        case 'load':
          global $original_eq_node;
          $original_eq_node = $node;
          break;
        case 'presave': 
          if (arg(2) == 'edit'){
            _handle_warranty_ppm_cal($node);
            insert_into_equipmentmaintenance_cost($node);
            delete_old_ppm_cal_and_generate_new($node);
          }
          _handle_equipment_presave($node);
          global $original_eq_node;
          _handle_log_history((array)$node,(array)$original_eq_node);
          break;
        case 'insert':
          if (arg(1) == 'add'){
            _handle_warranty_ppm_cal($node);
            insert_into_equipmentmaintenance_cost($node);
          }
          break;
        case 'validate':


          _handle_equipment_validations($node);
          break;
        case 'delete':
          handle_equipment_delete($node);
          break;
      }// close inner switch
      break; // break main perior switch case

    
    /***********************************************/
    
    /***** handle Service Report / Work Order / Report Visit node type *****/
    case 'service_report':
      switch ($op) {
        case 'load':
          global $original_ser_node;
          $original_ser_node = $node;
          break;

        case 'presave':
          $date_installation_spare_part = $node->field_wrk_order_install_sp_date[0]['value'];
          $warranty_months = $node->field_wrk_order_warranty_months[0]['value'];
          if (!empty($date_installation_spare_part)){
            if (empty($warranty_months)){
              $warranty_months = 0;
            }
            $spare_part_warranty_end_date =strtotime("+$warranty_months month", $date_installation_spare_part);
            $node->field_wrk_order_part_warranty_en[0]['value'] = $spare_part_warranty_end_date;
          }

	   //in case of node/add/service-report and there is job
          if(is_numeric($_GET['service_report_job']) && empty($_GET['service_report_job'])) {
            $date_installation_spare_part = $node->field_wrk_order_install_sp_date[0]['value'];

            $job_nid = '';
            $job_nid = $node->field_service_report_job[0]['nid'] ;
            if ($job_nid == '') {
              // do nothing
            }
            else {
              // transfer all the maintenance information and company information to the 
              // target job
              $equipment_nid ='';
              $job_node = node_load($job_nid);

              if($job_node->type == 'job') {
                _transer_service_report_info_to_job($job_node, $node);
              }
            }
          }
          elseif(is_numeric($_GET['service_report_job']) && is_numeric($_GET['service_report_job'])) {
            $job_nid = 0;
            $job_nid = $_GET['service_report_job'] ;
            $job_node = node_load($job_nid);
            _transer_service_report_info_to_job($job_node, $node);
          }
          elseif (arg(2) == 'edit') {
            $job_nid = '';
            $job_nid = $node->field_service_report_job[0]['nid'] ;
            if ($job_nid == '') {
              // do nothing
            }
            else {
              // transfer all the maintenance information and company information to the 
              // target job
              $equipment_nid ='';
              $job_node = node_load($job_nid);
              if($job_node->type == 'job') {
                _transer_service_report_info_to_job($job_node, $node);

              }
            }
          }
          global $original_ser_node;
          _handle_log_history((array)$node,(array)$original_ser_node);
          break;// break perior switch case
        case 'insert' :
          _handle_service_report_insert($node);
          break;
        case 'validate':
          _handle_work_order_validations($node);
          break;
      }// close inner switch
      break;  // break main perior switch case

    /******************************************************************************************/

    /************* handel  Job / Call / Request ***********************************************/
    case 'job':

      switch ($op) {
        case 'load':
          /* store the information loaded from the database before
          * any modification has been done on the node 
          * store it in a session so it can be used in other operations
          * inside the hook_nodeapi
          */
          global $original_loaded_node;
          $original_loaded_node = $node;
          break;
        case 'delete':
          db_query('delete from task where nid=%d', $node->nid);
          break;
        case 'validate':
          _handle_job_validations($node);
          /*
           * match auto complete equipment name field with serial number
           */
          $equipment_nid = $node->field_job_medical_equip[0]['nid'];
          $equipment_name = $node->field_equipment_name[0]['value'];
          if (!empty($equipment_name)){
            $myquery = db_query('SELECT field_equipment_coding_nid FROM content_type_medical_equipment WHERE nid=%d', $equipment_nid);
            if ($myresult = db_fetch_object($myquery)){
              $model_nid = $myresult->field_equipment_coding_nid;
            }
            $query = db_query('SELECT field_equipment_name_value FROM content_field_equipment_name WHERE nid=%d', $model_nid);
            if ($result = db_fetch_object($query)){
              if ($result->field_equipment_name_value == $equipment_name){
                // that is right
              }
              else{
                form_set_error("", $message = t("The equipment serial number doesn't match the equipment name"));
              }
            }
          }
          global $user;
          //$hospital_nid = _get_user_working_hospital($user->uid);

          global $hospital_nid;
          $job_exist_nid = _check_job_id_exist($hospital_nid, $node->title, $node->nid);
          if (is_numeric($job_exist_nid)) {
            //form_set_error("edit-title", $message = 'This Call Id has been exist  ' . l('view Job','node/'.$job_exist_nid), $reset = FALSE); 
          }

         break; // break first perior switch case validate

        case 'presave':
        // check the status of the job it is being edited or creatd
          $current_case = "new";
          $job_status = $node->field_job_status[0]['value'];
          $start_date = $node->field_requested_date[0]['value'];
          $end_date   = $node->field_end_of_work[0]['value'];
          if(!empty($start_date) && !empty($end_date)){
            $defected_days = $end_date - $start_date;
            $defected_days = $defected_days / (60 * 60 * 24);
            $node->field_job_number_of_defect[0]['value'] = $defected_days;
          }
          if(arg(2) == 'edit') {
            $current_case = "update";
            $equipment_nid = $node->field_job_medical_equip[0]['nid'];
          }
        
          else if(arg(1) == 'add' && arg(2) == 'job') {
            if (empty($node->field_job_expected_date_of_visit)){
              $node->field_job_expected_date_of_visit = $node->field_requested_date;
            }
            if ($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY) {
              if (!empty($node->field_job_assigned_user[0]['uid'])) {
                $node->field_job_status[0]['value'] = 5;
              }
            }
            $current_case = "new";
            $equipment_nid = arg(3);
          }
          else if (arg(1) == 'add' && arg(2) == 'service-report') {
            $current_case = "new";
            $equipment_nid = $_GET['service_report_equip']; 
            if (empty($_GET['service_report_equip'])) {
              $equipment_nid = $node->field_job_medical_equip[0]['nid'];
            }
          }

          // case UNDER_MAINTENANCE
          if ($job_status == 0) {
            set_medical_equipment_status($equipment_nid,NOT_WORKING,UNDER_MAINTENANCE); 
          }
          else if ($job_status == 1 || $job_status == 4 || $job_status == 5 || $job_status == 7) {
            set_medical_equipment_status($equipment_nid,NOT_WORKING,UNDER_COMPANY_MAINTENANCE); 
          }
          // case WORKING
          else { //if (($job_status == 2 || $job_status == 3) && ( $current_case == "update" || ($current_case == "new" && arg(2) == 'service-report' ))){
            if (check_jobs_for_medical_equipment($equipment_nid) > 1) { 
               // that's means there are different jobs other than the current one to be resolved
               set_medical_equipment_status($equipment_nid,NOT_WORKING,UNDER_COMPANY_MAINTENANCE); 
            }
            else { 
              // that's means there at maximum one job and it should be that job opened
              set_medical_equipment_status($equipment_nid,WORKING,WORKING_FINE); 
            }
          }
          // handle log history
          global $original_loaded_node;
          _handle_log_history((array)$node,(array)$original_loaded_node);
          $assigned_emplyee = $node->field_job_assigned_user[0]['uid'];
          if (variable_get('automatic_user_assigned', 1) == 1 && arg(1) == 'add' && empty($assigned_emplyee)) {
            $uid = _get_assigned_employee_to_client($node->field_job_client[0]['nid']);
            if (!empty($uid)){
              $node->field_job_assigned_user[0]['uid'] = $uid;
            }
            //dpm($node);
          }

          if (arg(1) == 'add' && arg(2) == 'job') {
            _handle_job_code_id($node, $node->field_job_hospital[0]['nid']);
          }
          break; // break second perior swtich case presave
      }// close inner switch case
      break; // break main perior switch case

    /*****************************************************************************************/
  }// close main switch case of $node->type

}

/**
 * Implementation of hook_form_alter()
 */
function cis_system_form_alter(&$form, &$form_state, $form_id) {
  _add_required_js_and_css_files();
  global $user;
  //$hospital_nid = _get_user_working_hospital($user->uid);
  global $hospital_nid;
  switch($form_id) {

    /*********In Case views_exposed_form ***********************/
    case 'views_exposed_form':
      handle_exposed_views_form_alter($hospital_nid, $form);
      break;

    /*************************************************************/

    /*****In Case of Calibrarion form***************************/
    case 'cal_node_form' :
      handle_cal_form_alter($form);
      break;

    /************************************************************/

 
    /********* In Case of PPM Form********************************/
    case 'ppm_node_form' :
      handle_ppm_form_alter($form);
      break; 
    /**************************************************************/
    /**************** In case of pentry form **********************/
    case 'pentry_node_form' :
      handle_pentry_form_alter($form);
      break;


    /*******************************************************************/
    /**************** In case of centry form **********************/
    case 'centry_node_form' :
      handle_centry_form_alter($hospital_nid, $form);
      break;

    /*******************************************************************/
                                                                                       
    /******* In Case of Call node Form*********************************/
    case 'job_node_form' :
      handle_job_form_alter($hospital_nid, $form);
      break; 

    /*******************************************************************/
    
    /********* In Case of service report / work order / visit report  node form*********************/
    case 'service_report_node_form' :
      handle_service_report_form_alter($hospital_nid, $form);
      break;

    /*******************************************************************/

    /*********** In Case of Quotaion Node form**************************/
    case 'quotation_node_form' :
      handle_quotation_form_alter($hospital_nid, $form);
      break;

    /*******************************************************************/

    /****** In Case of Import Code Form*********************************/
    case 'importcode_node_form' :
      handle_importcode_form_alter($hospital_nid, $form);
      break;

    /*******************************************************************/

     /*********** IN case of invoice form *******************************/
    case 'invoice_node_form' :
      handle_invoice_form_alter($form);
      break;
    /*******************************************************************/

    /***** In Case of Medical equipment Node form***********************/
    case 'medical_equipment_node_form' :
      handle_equipment_form_alter($hospital_nid, $form);
      break;

    /*****************************************************************************/


    /*********In Case of hospital employee Node form ****************************/
    case 'hospital_employee_node_form' :
      handle_hospital_employee_form_alter($hospital_nid, $form);
      break;

    /******************************************************************************/

    /*************** In Case of Spare Part Node Form ******************************/
    /// to be removeeddd **********************************************************/
    case 'spare_part_node_form' :
      break;

    /********************************************************************************/

    /*********** In Case Of Target Contracts Node Form  **************************/
    case 'target_contracts_node_form' :
      handle_target_contracts_form_alter($form);
      break;
    /*****************************************************************************/
    /*********** In Case of Spare Part Node Form *********************************/
    case 'maintainancecontracts_node_form' :
      handle_maintenance_contracts_form_alter($hospital_nid, $form);
      break;

     /************************************************************************************/


      /********************************************************************************/

    /*********** In Case of Spare Part Node Form *********************************/
    case 'scraping_node_form' :
      handle_scraping_form_alter($hospital_nid, $form); 
      break;

     /************************************************************************************/


   /*********** In Case of item data input Node Form *********************************/
    case 'item_data_node_form' :
      handle_item_data_form_alter($form);
      break;
      /*
        unused now cause of using autocomplete 
      $form['field_equipment_name']['#suffix'] = 
                  "<input id = 'show_my_div'' type='button' value='Add New'>".
                  "<div id = 'add_new_equipment'' style='display: none;'><table><tr><td>Arabic  name:</td><td>
                        <input id ='add_arabic_name' type='text' name='arabicname' ></td></tr><br><tr><td>English name:</td><td>
                        <input id = 'add_english_name' type='text' name='englishname' ></td></tr><tr><td>
                        <input id='close' type='button' value='close' onclick=''></td><td>
                        <input id='save' type='button' value='Save' onclick=''></td></tr></table></div>";
      */
     /************************************************************************************/



  }// end of main switch case 
}


/**
 * handle exposed views form alter
 */
function handle_exposed_views_form_alter($hospital_nid, &$form){
  global $user;
  if ((arg(0) == 'jobs' && arg(1) == 'search') || arg(0) == 'service_reports_list' || arg(0) == 'quotations_list' || (arg(0) == 'equipments' && arg(1) == 'quotations_cost' || (arg(0) == 'ppms' && arg(1) == 'search') || (arg(0) == 'calibrations' && arg(1) == 'search')) || (arg(0) == 'all' && arg(1) == 'transactions') || arg(0) == 'list_all_equps') {
    handle_search_client_workflow($form);
  }
  if(arg(0) == 'jobs' && arg(1) == 'search'){
    handle_job_search_form_alter($hospital_nid, $form);
  }
  elseif (arg(0) == 'list_all_equps' || arg(0) == 'item-data-input-list'){
    handle_search_equipments_form($form);
  }
  elseif (arg(0) == 'store' && arg(1) == 'parts'){
    handle_search_parts_form($form);
  }
  // hide the client group filter in case of Group Leader // cause there was an ERROR
  elseif (arg(0) == 'overall' && arg(1) == 'calendar'){
    if(!empty($user->roles[GROUP_LEADER])){
      $javascript = '$(".views-widget-filter-field_client_group_value_many_to_one").attr("style", "display : none !important");';
      drupal_add_js($javascript, 'inline');
    }
  }
}

/**
 * handle calibration form alter
 */
function handle_cal_form_alter(&$form){
  if(!is_numeric(arg(1))) {
    $query = 'select count(*)+1  as new_calibration_id from content_type_cal';
    $result = db_query($query);
    if ($row = db_fetch_array($result)) {
      $calibration_id = 1000 + $row['new_calibration_id'];
    }
    $form['title']['#default_value']= $calibration_id;
  }
}

/**
 * handle PPM form alter
 */
function handle_ppm_form_alter(&$form){
  if(!is_numeric(arg(1))) {
    $query = 'select count(*)+1  as new_ppm_id from content_type_ppm';
    $result = db_query($query);
    if ($row = db_fetch_array($result)) {
      $ppm_id = 1000 + $row['new_ppm_id'];
    }
    $form['title']['#default_value']= $ppm_id;
  }
}

/**
 * handle Pentry form alter
 */
function handle_pentry_form_alter(&$form){
  global $cmms_type;
  if ($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY) {
    $form['field_pentry_hospital']['#access'] = FALSE;
  }
  if(arg(1) == 'add') {//print_r($form);exit();
    if (is_numeric($_GET['base_pentry'])) {
      $pentry_node = node_load($_GET['base_pentry']);
      $form['title']['#default_value']  = $pentry_node->title;
      $form['field_pentry_ppm_schedule']['#default_value'][0]['nid'] =  $pentry_node->field_pentry_ppm_schedule[0]['nid'];
      $form['field_pentry_work_order_number'][0]['#default_value']['value'] =  $pentry_node->field_pentry_work_order_number[0]['value'];
      $form['field_pentry_medical_equips'][0]['#default_value']['nid'] =  $pentry_node->field_pentry_medical_equips[0]['nid'];
      $form['field_pentry_hospital_person']['#default_value'][0]['uid'] =  $pentry_node->field_pentry_hospital_person[0]['uid'];
      //$form['field_pentry_date'][0]['#default_value']['value'] =  date("Y-m-d", $pentry_node->field_pentry_date[0]['value']);
      if (!empty($pentry_node->field_pentry_actual_date_visit[0]['value'])) {
        $form['field_pentry_actual_date_visit'][0]['#default_value']['value'] =  date("Y-m-d", $pentry_node->field_pentry_actual_date_visit[0]['value']);
      }
      $form['field_job_client']['#default_value'][0]['nid'] =  $pentry_node->field_job_client[0]['nid'];
      $form['field_pentry_task'][0]['#default_value']['value'] =  $pentry_node->field_pentry_task[0]['value'];
      if (!empty($pentry_node->field_pentry_next_visit_date[0]['value'])) {
        $form['field_pentry_date'][0]['#default_value']['value'] =  date("Y-m-d", $pentry_node->field_pentry_next_visit_date[0]['value']);
      }
      $form['field_pentry_working_hours'][0]['#default_value']['value'] =  $pentry_node->field_pentry_working_hours[0]['value'];
      $form['field_pentry_traveling_hours'][0]['#default_value']['value'] =  $pentry_node->field_pentry_traveling_hours[0]['value'];
      $form['field_pentry_status']['#default_value'][0]['value'] =  $pentry_node->field_pentry_status[0]['value'];
      $form['#node']->field_pentry_task = $pentry_node->field_pentry_task;
      $i = 0;
      $tasks_div_info = array();
      $tasks_div_info = $form['field_pentry_task'][0];
      foreach ($pentry_node->field_pentry_task as $key => $value) {
        $form['field_pentry_task'][$i] = $tasks_div_info;
        $form['field_pentry_task'][$i]['#default_value']['value'] = $value['value'];
        $form['field_pentry_task'][$i]['#weight'] = $i;
        $form['field_pentry_task'][$i]['#delta'] = $i; 
        $i++;
      }
    }
  }
}

/**
 * handle centry form alter
 */
function handle_centry_form_alter($hospital_nid, &$form) {
  global $cmms_type;
  if ($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY) {
    $form['field_centry_hospital']['#access'] = FALSE;
  }
  if(arg(1) == 'add') {//print_r($form);exit();
    if (is_numeric($_GET['base_centry'])) {
      $centry_node = node_load($_GET['base_centry']);
      $form['title']['#default_value']  = $centry_node->title; 
      $form['field_centry_cal_schedule']['#default_value'][0]['nid'] =  $centry_node->field_centry_cal_schedule[0]['nid'];
      $form['field_centry_work_order_number'][0]['#default_value']['value'] =  $centry_node->field_centry_work_order_number[0]['value'];
      $form['field_centry_medical_equips'][0]['#default_value']['nid'] =  $centry_node->field_centry_medical_equips[0]['nid'];
      $form['field_centry_hospital_person']['#default_value'][0]['uid'] =  $centry_node->field_centry_hospital_person[0]['uid'];
      if (!empty($centry_node->field_centry_actual_date_visit[0]['value'])) {
        $form['field_centry_actual_date_visit'][0]['#default_value']['value'] =  date("Y-m-d", $centry_node->field_centry_actual_date_visit[0]['value']);
      }
      $form['field_job_client']['#default_value'][0]['nid'] =  $centry_node->field_job_client[0]['nid'];
      $form['field_centry_task'][0]['#default_value']['value'] =  $centry_node->field_centry_task[0]['value'];
      if (!empty($centry_node->field_centry_next_visit_date[0]['value'])) {
        $form['field_centry_date'][0]['#default_value']['value'] =  date("Y-m-d", $centry_node->field_centry_next_visit_date[0]['value']);
      }
      $form['field_centry_working_hours'][0]['#default_value']['value'] =  $centry_node->field_centry_working_hours[0]['value'];
      $form['field_centry_traveling_hours'][0]['#default_value']['value'] =  $centry_node->field_centry_traveling_hours[0]['value'];
      $form['field_centry_status']['#default_value'][0]['value'] =  $centry_node->field_centry_status[0]['value'];
      $form['#node']->field_centry_task = $centry_node->field_centry_task;
      $i = 0;
      $tasks_div_info = array();
      $tasks_div_info = $form['field_centry_task'][0];
      foreach ($centry_node->field_centry_task as $key => $value) {
        $form['field_centry_task'][$i] = $tasks_div_info;
        $form['field_centry_task'][$i]['#default_value']['value'] = $value['value'];
        $form['field_centry_task'][$i]['#weight'] = $i;
        $form['field_centry_task'][$i]['#delta'] = $i;
        $i++;
      }
    }
  }
}

/**
 * handle equipment form alter
 */
function handle_equipment_form_alter($hospital_nid, &$form) {
  // automatic assign the medical equipment to hospital belong to the loged in hospital administratro
  global $cmms_type;
  if ($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY) {
    $form['field_equipment_price'][0]['#title'] = t('Sales invoice');
  }
  if (variable_get('maintenance_costs_feature', 0) != 1){
    $form['field_equipment_warrantymon_cost']['#access'] = FALSE;
    $form['field_equipment_warrantymon_perc']['#access'] = FALSE;
    $form['field_equipment_extendedmon_cost']['#access'] = FALSE;
    $form['field_equipment_extendedmon_perc']['#access'] = FALSE;
  }
  $form['field_equipment_ppm_months']['#suffix'] = '<div id = "ppms_item"></div>';
  $form['field_equipment_cal_months']['#suffix'] = '<div id = "calibrations_item"></div>';

  if (arg(2) == 'edit' && $form['field_medical_equip_hospital']['#default_value'][0]['nid'] != $hospital_nid ) {
     //TODO
  }
  elseif ( arg(0) == 'node' && arg(1) == 'add' ) {
    $form['field_equipment_status']['tids']['#default_value'] = array(0 => 659, 1 => 650);
    $form['field_medical_equip_hospital']['#default_value'][0]['nid'] = $hospital_nid;
  }
  else {
    $form['field_medical_equip_hospital']['#default_value'][0]['nid'] = $hospital_nid;
  }
  $form['field_equipment_group']['#access'] = false;
  
/*
  // access false to ppm time period and calibration if their plan have been created
  if(arg(2) == 'edit'){
    $nid = arg(1);
    $cal_check_query = "select cal.nid from content_type_cal cal inner join content_field_cal_medical_equips ce using (nid) where ce.field_cal_medical_equips_nid = %d and cal.field_calibration_assigned_to_value='CW'" ;
    $results = db_query($cal_check_query, $nid);
    if ($row = db_fetch_array($results)) {
      $form['field_equipment_cal_months']['#access'] = false;
    }
    $ppm_check_query = "select ppm.nid from content_type_ppm ppm inner join content_field_ppm_medical_equips pe using (nid) where pe.field_ppm_medical_equips_nid = %d and ppm.field_ppm_assigned_to_value='CW'" ;
    $result = db_query($ppm_check_query, $nid);
    if ($rows = db_fetch_array($result)) {
      $form['field_equipment_ppm_months']['#access'] = false;
    }
  }
*/
  if ($cmms_type == INDIVIDUAL_HOSPITAL || $cmms_type == HEIRARCHIAL_HOSPITALS ) {
    $form['field_equipment_coding']['#access'] = FALSE;
    $form['field_equipment_client']['#access'] = FALSE;
    $form['field_equipment_contractor']['#access'] = FALSE;
  }
}


/**
 * handle hospital employee form alter
 */
function handle_hospital_employee_form_alter($hospital_nid, &$form){
  // automatic assign the user to hospital belong to the loged in hospital administratro
  global $user;
  //$hospital_nid = _get_user_working_hospital($user->uid);
  global $hospital_nid;

  if (arg(2) == 'edit' && $form['field_medical_equip_hospital']['#default_value'][0]['nid'] != $hospital_nid ) {
    //TODO
  }
  else {
    $form['field_employee_hospital']['#default_value'][0]['nid'] = $hospital_nid;
  }
  if (variable_get('automatic_user_assigned', 1) == 1) {
    $form['field_employee_client']['#required'] = true;
  }
  else {
    $form['field_employee_client']['#access'] = false;
  }
}

/**
 * handle target contracts form alter
 */
function handle_target_contracts_form_alter(&$form){
  $form['field_target_total']['#access'] = false;
  $form['field_target_total_overall']['#access'] = false;
  if (arg(1) == 'add'){
    $form['title']['#default_value'] = "TC-"._get_current_year() ."-". _generate_target_contracts_code_id();
  }
}

/**
 * handle maintenance contracts form alter
 */
function handle_maintenance_contracts_form_alter($hospital_nid, &$form){
  global $cmms_type;
  if ($cmms_type == HEIRARCHIAL_HOSPITALS  || $cmms_type == INDIVIDUAL_HOSPITAL ) {
    $form['field_mcontracts_company']['#required'] = true; 
  }
  global $quotation_contract_functionality;//print_r($quotation_contract_functionality);exit();
  if ($quotation_contract_functionality != QUOTATION_CONTRACT_FUNCTIONALITY){
    //$form['field_mcontracts_selected_eqs']['#prefix'] = '<div id = "mc_type"></div>';
    $form['field_mcontracts_begin_as_quotat']['#access'] = FALSE;
  }
  if(variable_get('delete_ppm_cal_inv_based_on', 3) != 1){
    $form['field_mcontracts_invoices_check']['#access'] = FALSE;
  }
  $form['field_mcontracts_ppm_m']['#prefix'] = '<div id = "last_year"></div>';
  $form['field_mcontracts_ppm_m']['#suffix'] = '<div id = "my_ppms_item"></div>';
  $form['field_mcontracts_cal_m']['#suffix'] = '<div id = "my_calibrations_item"></div>';
  $form['field_mcontracts_pay']['#suffix'] = '<div id = "my_invoice_collection_item"></div>';
  $form['field_mcontracts_invoices_check']['#default_value']  = array(0);
  handle_mcontracts_form_alter($hospital_nid, $form);
  //$mynode = node_load(18334);
  //dpm($mynode);
  //dpm($form);
  if(arg(1) == 'add') {
    if (is_numeric($_GET['base_contract'])) {
      drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/edit_contract_fields.css');
      $contract_node = node_load($_GET['base_contract']);
      $today_date = time();
      $years = $contract_node->field_mcontracts_years[0]['value'];
      $from_date = $contract_node->field_mcontracts_end_date[0]['value'];
      $end_date = strtotime("+$years year", $from_date);
      if ($today_date >= $end_date){
        $form['field_mcontracts_end_date'][0]['#default_value']['value'] = date("Y-m-d", $end_date);
      }
      $form['field_mcontracts_pay']['#default_value'][0]['value'] =  $contract_node->field_mcontracts_pay[0]['value'];
      $form['field_mcontracts_total_price']['#default_value'] =  $contract_node->field_mcontracts_total_price[0]['value'];
      $form['field_mcontracts_parts_warranty']['#default_value'] =  $contract_node->field_mcontracts_parts_warranty[0]['value'];
      $form['field_mcontracts_comment']['#default_value'] =  $contract_node->field_mcontracts_comment[0]['value'];
      $form['field_mcontracts_years']['#default_value'] =  $contract_node->field_mcontracts_years[0]['value'];
      $form['field_mcontracts_1year'][0]['#default_value']['value'] = $contract_node->field_mcontracts_1year[0]['value'];
      $form['field_mcontracts_2year'][0]['#default_value']['value'] = $contract_node->field_mcontracts_2year[0]['value'];
      $form['field_mcontracts_3year'][0]['#default_value'] =  $contract_node->field_mcontracts_3year[0]['value'];
      $form['field_mcontracts_4year'][0]['#default_value'] =  $contract_node->field_mcontracts_4year[0]['value'];
      $form['field_mcontracts_5year'][0]['#default_value'] =  $contract_node->field_mcontracts_5year[0]['value'];
      $form['field_mcontracts_emergency_visit'][0]['#default_value'] =  $contract_node->field_mcontracts_emergency_visit[0]['value'];
      $form['field_mcontracts_ppm_m']['#default_value'][0]['value'] = $contract_node->field_mcontracts_ppm_m[0]['value'];
      $form['field_mcontracts_cal_m']['#default_value'][0]['value'] =  $contract_node->field_mcontracts_cal_m[0]['value'];
      $form['#node']->field_mcontracts_medical_equip = $contract_node->field_mcontracts_medical_equip;
      $i = 0;
      $equipment_div_info = array();
      $equipment_div_info = $form['field_mcontracts_medical_equip'][0];
//print_r($form['field_mcontracts_selected_eqs'][0]['#default_value']['value']);exit();
      if (!empty($contract_node->field_mcontracts_medical_equip)){
        foreach ($contract_node->field_mcontracts_medical_equip as $key => $value) {
          $form['field_mcontracts_medical_equip'][$i] = $equipment_div_info;
          $form['field_mcontracts_medical_equip'][$i]['#default_value']['nid'] = $value['nid'];
          $form['field_mcontracts_medical_equip'][$i]['#weight'] = $i;
          $form['field_mcontracts_medical_equip'][$i]['#delta'] = $i;
          $form['field_mcontracts_selected_eqs'][0]['#default_value']['value'] .= $value['nid']. ',';
          $i++;
        }
      }
    } 
    //dpm($form);
    $form['title']['#default_value'] = "MC-"._get_current_year() ."-". _generate_maintenance_contract_code_id();
  }
  if (arg(2) == 'edit'){
    $selected_eqs = $form['field_mcontracts_selected_eqs'][0]['#default_value']['value'];
    if ($selected_eqs == ',' || empty($selected_eqs)){
      drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/hide_mcontract_equipment_table.css');
    }
    else{
      drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/hide_mcontract_lookup.css');
    }
  }
}

/**
 * handle invoice form alter
 */
function handle_invoice_form_alter(&$form){
  // this to check if the system will use virtual store or
  // will use actual store with real quantity
  if (variable_get('spare_part_store', 0) == 1) {
    $form['field_invoice_item_code']['#access'] = FALSE;
  }
  else {
    $form['field_spare_part']['#access'] = false;
  }
  if (arg(1) == 'add') {
    $po_node = node_load($_GET['invoice_po_number']);
    $form['#node']->field_invoice_item_code     = $po_node->field_importcode_item_code;
    $form['#node']->field_invoice_qty_requested = $po_node->field_importcode_items_count;
    $form['#node']->field_invoice_unit_price    = $po_node->field_importcode_unit_price;
    //$form['#node']->field_invoice_qty_recieved  = $po_node->field_importcode_qty_received;
    $form['#node']->field_invoice_discount      = $po_node->field_importcode_discount;
    $form['#node']->field_invoice_part_name     = $po_node->field_importcode_part_name;
    $form['#node']->field_invoice_currency      = $po_node->field_importcode_currency;
    $form['#node']->field_invoice_quotation_id  = $po_node->field_import_code_quotation_id;
    global $hospital_nid;
    $hospital_code = '';
    if (variable_get('insert_org_code_in_title_code', 0) == 1){
      $hospital_code = db_result(db_query('SELECT field_hospital_code_value FROM content_type_hospital WHERE nid = ' . $hospital_nid));
      $hospital_code = $hospital_code . "-";
    }
    $form['title']['#default_value'] = "INV-" . $hospital_code . _generate_invoice_code_id();
  }
}


/**
 * handle seach call autocomplete client
 */
function handle_search_client_workflow(&$form){
 
  global $cmms_type;
  if ($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY) {
    $form['client'] = array(
      '#type' => 'textfield',
      '#title' => t('Client'),
      '#size' => 30,
      '#maxlength' => 60,
      '#autocomplete_path' => 'user/autocomplete/workflow/client',
      '#weight' => -1,
    );
    return $form;
  }
}

/**
 * function to get group by client nid
 */
function _get_group_by_clientnid($clientnid) {
  $groupid = db_result(db_query("select field_client_group_value from content_type_client where nid =%d",$clientnid));
  if(!empty($groupid))
    return $groupid;
  else return false;

}


/**
 * handle work order insert 
 * notification 
 */
function _handle_service_report_insert(&$node) {
  global $user;
  $status = "Created";
  $subject = "New Work Order/ Job Sheet No# " . $node->title . " has been created - Please read urgently";
        
  $recieving_notification_users = _return_users_to_receive_notification_based_workflow_config($node, $node->field_service_report_job[0]['nid'],$node->nid);
  $mail_recipients = _get_recipients_mails_concatenated($recieving_notification_users, ",");
  //$sms_recipients =  _get_sms_recipients_mobil_numbers_concatenated($recieving_notification_users, ",");
  if ($node->field_wrk_order_m_situation[0]['value'] == 8 ) { // if it is need a quoation
    $subject .= " -- Need A Quotation !!!";
    $smanagers_users = _return_admin_managers();
    $smanager_mail_recipients = _get_recipients_mails_concatenated($smanagers_users, ",");
    //$smanager_sms_recipients =  _get_sms_recipients_mobil_numbers_concatenated($smanagers_users, ",");
    $mail_recipients = $mail_recipients .','. $smanager_mail_recipients;
    /*$sms_type = NEW_JOB_ASSIGNED_SMS;
    $sms_recipients =  _get_sms_recipients_mobil_numbers_concatenated($recieving_notification_users, ",");
     _notifications_send_routing_sms($node, $sms_type, $sms_recipients);*/
  }      
  $mail_type = NEW_WORK_ORDER_CREATED;
  //$sms_type = NEW_JOB_ASSIGNED_SMS; 
  _notifications_send_routing_email($node, $mail_type, $status , $subject, $mail_recipients, $user->name);
}


/**
 * handle quotation insert
 * notification 
 */
function _handle_quotation_insert(&$node) {
  global $user;
  $status = "Created";
  if ($node->field_quotation_op_type[0]['value'] == 1 || $node->field_quotation_op_type[0]['value'] == 4 ) {
    $subject = "Spare Part Request # " . $node->title . " - Please read urgently";
    $mail_type = QUOTAION_EMAIL ;
  }
  else {
    $subject = "Quotation # " . $node->title . " has been created - Please read urgently";
    $mail_type = REQUEST_SPAREPART_EMAIL;
  }
        
  $recieving_notification_users = _return_users_to_receive_notification_based_workflow_config($node, $node->field_quotation_job[0]['nid'],$node->nid);
  $mail_recipients = _get_recipients_mails_concatenated($recieving_notification_users, ",");
  $sms_recipients =  _get_sms_recipients_mobil_numbers_concatenated($recieving_notification_users, ",");
        
  //$sms_type = NEW_JOB_ASSIGNED_SMS; 
  _notifications_send_routing_email($node, $mail_type, $status , $subject, $mail_recipients, $user->name);
}

/**
 * handle target contracts
 * insert case
 */
function _handle_target_contarcts_insert(&$node){
  $count_items = count($node->field_target_model);
  for ($i = 0; $i < $count_items; $i++){
    $price = $node->field_target_price[$i]['value'];
    $count = $node->field_target_count[$i]['value'];
    $total = $price * $count;
    $node->field_target_total[$i]['value'] = $total;
    $total_overall += $total;
  }
  $node->field_target_total_overall[0]['value'] = $total_overall;
}

/**
 * handle importcode insert
 * notification 
 */
function _handle_importcode_insert(&$node) {

  global $user;
  $status = "Created";
  $subject = "Purchase Order # " . $node->title . " has been created - Please read urgently";
        
  $recieving_notification_users = _return_users_to_receive_notification_based_workflow_config($node, $node->field_importcode_job[0]['nid'],$node->nid);
  $mail_recipients = _get_recipients_mails_concatenated($recieving_notification_users, ",");
  $sms_recipients =  _get_sms_recipients_mobil_numbers_concatenated($recieving_notification_users, ",");
        
  $mail_type = PURCHASE_ORDER_EMAIL;
  //$sms_type = NEW_JOB_ASSIGNED_SMS; 
  _notifications_send_routing_email($node, $mail_type, $status , $subject, $mail_recipients, $user->name);

  if(arg(1) == 'add' && !is_numeric(arg(1))) { 
    global $hospital_nid;
    $node->title = _get_importcode_new_id($hospital_nid);
  }
}

/**
 * handles equipment presave
 */
function _handle_equipment_presave(&$node) {

  global $user;
  //$hospital_nid = _get_user_working_hospital($user->uid); 
  global $hospital_nid;

  // Generate automatic code for medical equipment
  $current_case = "new";
  if(arg(2) == 'edit') {
    $current_case = "update";
    $hospital_nid = $node->field_medical_equip_hospital[0]['nid'];
    if (variable_get('automatic_coding_based_initials', 0) == 0) {
      $code_id = modify_generating_equ_code_id($node);
      $node->field_equipment_code[0]['value'] = $code_id;
   }
  }
  elseif(arg(2) == 'medical-equipment' && arg(1) == 'add') {
    $current_case = "new";
    $hospital_nid = $node->field_medical_equip_hospital[0]['nid'];
    $code = '';
    if (variable_get('automatic_coding_based_initials', 0) == 0) {
      $equipment_serial = $node->title;
      $equipment_department = $node->field_equipment_department[0]['nid'];
      $code_id = _generate_medical_equipment_code_id($hospital_nid, $equipment_serial, $equipment_department);
    }
    else {
      // TODO make check if to apply the old code or the new code generation by initials and other
      $code_id = _generate_code_from_initials($node);            
    }
    $node->field_equipment_code[0]['value'] = $code_id . $node->field_equipment_code[0]['value'];
  }
  $clientnid = $node->field_equipment_client[0]['nid'];
  $groupid = _get_group_by_clientnid($clientnid);
  if (is_numeric($groupid)) {
    $node->field_equipment_group[0]['value'] = $groupid;
  }

}




/**
 * handle job code id generation
 */
function _handle_job_code_id(&$node, $hospital_nid) {

  $job_id = _generate_job_code_id($hospital_nid);
  //print $job_id; exit();
  $node->title = $job_id;
}

/**
 * return assigned user for client
 * @param nid of client
 */
function _get_assigned_employee_to_client($client_nid) {
  $uid = db_result(db_query('select node.uid from node inner join content_type_hospital_employee employee using(nid) where employee.field_employee_client_nid = %d', $client_nid));
  return $uid; 
}


/**
 * this function return code for equipment from 
 * data item input and client intials
 */

function _generate_code_from_initials($node) {
  //print_r($node); exit();
  $coding_data_input_item_nid = $node->field_equipment_coding[0]['nid'];
  $client_nid = $node->field_equipment_client[0]['nid'];
  
  $coding_initials = '';
  $query = 'select field_item_intial_value as initial from content_type_item_data where nid =%d';
  $result = db_query($query, $coding_data_input_item_nid);
  if($row = db_fetch_array($result)) {
    $coding_initials = $row['initial'];
  }

  $client_initials = '';
  $query = 'select field_client_code_value as initial from content_type_client where nid =%d';
  $result = db_query($query, $client_nid);
  if ($row = db_fetch_array($result)) {
    $client_initials = $row['initial'];
  }
  
  $serial_number = _generate_serial_for_coding($client_initials, $coding_initials);
 
  return "$coding_initials-$client_initials-$serial_number";
}



/**
 * function to generate unique serial code to
 * the equ initial with client initial
 */
function _generate_serial_for_coding($client_initials, $coding_initials){
  $check = "$coding_initials-$client_initials-";
  $query = db_query("select field_equipment_code_value from content_type_medical_equipment where field_equipment_code_value like '{$check}%'");
  $divide = array();
  $list_of_code_numbers = array();
  $maxvalue = 0;
  while ($row = db_fetch_array($query)){
    $code_value = $row['field_equipment_code_value'];
    $divide = explode("-", $code_value);
    $list_of_code_numbers[] = $divide[2];
  }
  if (!empty($list_of_code_numbers)) {
    $maxvalue = max($list_of_code_numbers);
  }
  $last = $maxvalue + 1;
  return $last;
}



/**
 * generates new id for quotation 
 */
function _get_quotation_new_id($hospital_nid) {
  $year = _get_current_year();
  $year = substr($year, -2);
  $hospital_code = '';
  if (variable_get('insert_org_code_in_title_code', 0) == 1){
    $hospital_code = db_result(db_query('SELECT field_hospital_code_value FROM content_type_hospital WHERE nid = ' . $hospital_nid));
    $hospital_code = $hospital_code . "-";
  }
  $last_id = db_result(db_query("select title from node where node.type='quotation' order by nid DESC limit 1"));
  $last_id_arr = explode('-', $last_id);
  if (!empty ($hospital_code)){
    $last_id = $last_id_arr[3];
  }
  else{
    $last_id = $last_id_arr[2];
  }
  $org_code = variable_get('higher_corporation_code', '');
  return "$org_code-" . $hospital_code . $year .'-'. ($last_id + 1);
}

/**
 * generates new id for target contracts
 */
function _generate_target_contracts_code_id(){
  $last_id = db_result(db_query("select count(title) from node where node.type='target_contracts' order by nid DESC limit 1"));
  $last_code = $last_id + 1;
  return $last_code;
}

/**
 * generates new id for invoice
 */
function _generate_invoice_code_id(){
  $last_id = db_result(db_query("select count(title) from node where node.type='invoice' order by nid DESC limit 1"));
  $last_code = $last_id + 1;
  return $last_code;
}

/**
 * generates new id for import code 
 */
function _get_importcode_new_id($hospital_nid) {
  $hospital_code = '';
  if (variable_get('insert_org_code_in_title_code', 0) == 1){
    $hospital_code = db_result(db_query('SELECT field_hospital_code_value FROM content_type_hospital WHERE nid = ' . $hospital_nid));
    $hospital_code = $hospital_code . "-";
  } 
  $last_id = db_result(db_query("select count(title) from node where node.type='importcode' order by nid DESC limit 1"));
  $last_code = "PO-" . $hospital_code ._get_current_year(). "-" .($last_id + 1);
  return $last_code;
}



/** 
 * returns list of equipment nids based in medical equipment
 * name acqurired from nid of a medical equipment passed 
 * as an argument 
 * @param $equipment_nid 
 *
 * @return array of $nodes_nids
 */
function _get_equipments_by_equipment_name($equipment_nid) {
  $nodes_array= array();
  $equipment_node = node_load($equipment_nid);
  $equipment_name_value = $equipment_node->field_equipment_name[0]['value'];
  $sql = "select nid from {content_type_medical_equipment} where field_equipment_name_value = %d";
  $result = db_query($sql, $equipment_name_value);
  $i=0;
  while ($row = db_fetch_array($result)) {
    $nodes_array[$i]['nid']=$row['nid'];
    $i++;
  }
  return $nodes_array;
}



/**
 * Implementation of hook_block().
 */
function cis_system_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array();
      $blocks['breadcrumb'] = array ('info' => 'CIS breadcrumb block');
      $blocks['workflow_top'] = array ('info' => 'WorkFlow Status');
      return $blocks;
      break;
    case 'view':
      // prepare the $content variable
      switch($delta) {
        case 0 :
        $content = "";
        //$subject = "test";
        if (arg(0) == 'node' && is_numeric(arg(1))) {
          $node = node_load(arg(1));
          if ($node->type == 'job') {
            $equipment_nid = $node->field_job_medical_equip[0]['nid'] ;
          }
          if($node->type == 'pentry') {
            $equipment_nid = $node->field_pentry_medical_equips[0]['nid'];
          }
          if ($node->type == 'maintainancecontract') {
            $equipment_nid = $node->field_m_contract_medical_equip[0]['nid'] ;
          }
          elseif ($node->type == 'service_report') {
            $equipment_nid = $node->field_service_report_equip[0]['nid'] ;
          }
          elseif ($node->type == 'quotation') {
            $equipment_nid = $node->field_quotation_equipment[0]['nid'];
          }
          elseif($node->type == 'importcode') {
            //$q_node = node_load($node->field_import_code_quotation_id[0]['nid']);
            //$service_report_node = node_load($q_node->field_quotation_service_report[0]['nid']);
            $equipment_nid = $node->field_importcode_equipment[0]['nid'];
          } 
        }
        elseif (arg(0) == 'node' && arg(1) == 'add') {
          $equipment_nid = arg(3);//$node->field_job_medical_equip[0]['nid'];
          if ($node->type == 'job' || $node->type == 'maintainancecontract' ) {

            $equipment_nid = arg(3);//$node->field_job_medical_equip[0]['nid'];

          }
          elseif(is_numeric($_GET['service_report_equip'])) {
            $equipment_nid = $_GET['service_report_equip'];
          }
          elseif(is_numeric($_GET['quotation_equipment'])) {
            $equipment_nid = $_GET['quotation_equipment'];
          }
          elseif(is_numeric($_GET['importcode_equipment'])) {
            $equipment_nid = $_GET['importcode_equipment'];
          }

        }  
        elseif (arg(0) == 'service_report' && arg(2) == 'quotation') {
          $node = node_load(arg(1));
          if ($node->type == 'service_report') {
            $equipment_nid = $node->field_service_report_equip[0]['nid'] ;
          }
        }
        elseif (arg(0) == 'equipment') {
          $equipment_nid = arg(1);
        }
        elseif(arg(1) == 'efficiency_record') {
          $equipment_nid = arg(2);
        }
        elseif(arg(0) == 'efficiency_record') {
          $result = db_query('select equipment_nid as nid from equipment_efficiency where id=%d', arg(1));
          $row = db_fetch_object($result);
          $equipment_nid = $row->nid;
        }

        $content = _get_equipment_information($equipment_nid);
        $block = array(
          'subject' => t('Medical Equipment Info'),
          'content' => "$content",
        );
        break;
        case 1:
          $block = array(
            'subject' => t('WorkFlow Status'),
            'content' => "here is my block to view",
          );
          break;
       }
      return $block;
      break;
  }
}


/**
 * return the equipment nid based on the current path
 * of the system used by the current user
 */
function _get_equipment_nid_from_current_path() {
  $equipment_nid = 'all';
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if ($node->type == 'job') {
      $equipment_nid = $node->field_job_medical_equip[0]['nid'] ;
    }
    if($node->type == 'pentry') {
      $equipment_nid = $node->field_pentry_medical_equips[0]['nid'];
    }
    if ($node->type == 'maintainancecontract') {
      $equipment_nid = $node->field_m_contract_medical_equip[0]['nid'] ;
    }
    elseif ($node->type == 'service_report') {
      $equipment_nid = $node->field_service_report_equip[0]['nid'] ;
    }
    elseif ($node->type == 'quotation') {
      $equipment_nid = $node->field_quotation_equipment[0]['nid'];
    }
    elseif($node->type == 'importcode') {
      $q_node = node_load($node->field_import_code_quotation_id[0]['nid']);
      $service_report_node = node_load($q_node->field_quotation_service_report[0]['nid']);
      $equipment_nid = $service_report_node->field_service_report_equip[0]['nid'];
    }
  }
  elseif (arg(0) == 'node' && arg(1) == 'add') {
    $equipment_nid = arg(3);//$node->field_job_medical_equip[0]['nid'];
    if ($node->type == 'job' || $node->type == 'maintainancecontract' ) {
      $equipment_nid = arg(3);//$node->field_job_medical_equip[0]['nid'];
    }
    elseif(is_numeric($_GET['service_report_equip'])) {
      $equipment_nid = $_GET['service_report_equip'];
    }
    elseif(is_numeric($_GET['quotation_equipment'])) {
      $equipment_nid = $_GET['quotation_equipment'];
    }
    elseif(is_numeric($_GET['importcode_equipment'])) {
      $equipment_nid = $_GET['importcode_equipment'];
    }

  }
  elseif (arg(0) == 'service_report' && arg(2) == 'quotation') {
    $node = node_load(arg(1));
    if ($node->type == 'service_report') {
      $equipment_nid = $node->field_service_report_equip[0]['nid'] ;
    }
  }
  if (arg(0) == 'equipment') {
    $equipment_nid = arg(1);
  }
  return $equipment_nid;
}



/**
 * return value of equipment name
 * using equipment nid
 */
function _return_equipment_name_by_nid($equipment_nid) {
  if(is_numeric($equipment_nid)) {
    $equipment_node = node_load($equipment_nid);
    $equipment_name_value = $equipment_node->field_equipment_name[0]['value'];
  }
  return $equipment_name_value;
}


/** 
 * gets the sub department using the parent department
 */
function _get_sub_deprtment( $department_nid){
  $department_nid = arg(1);
  $sub_department = array();
  if(arg(2) == 'view') {
    $sub_departments_to_be_send= "<option value=\"All\">- Any -</option>";
  }
  else {
    $sub_departments_to_be_send= "<option value=\"\">- None -</option>";
  }
  $select_query = "select r.nid as nid, node.title as title, s.field_sub_dep_name_english_value as eng_name from relativity r inner join node using(nid) inner join content_type_sub_department s using(nid) where node.type='sub_department' and r.parent_nid = %d"; 
  
  $result = db_query($select_query, $department_nid);
  global $language;
  while ($row = db_fetch_array($result)) {
    if ($language->language != 'ar') {
      $sub_departments_to_be_send .= "<option value =". $row['nid'] . ">" . $row['title'] . "</option>";
    }
    else {
      $sub_departments_to_be_send .= "<option value =". $row['nid'] . ">" . $row['eng_name']  . "</option>";
    }
  }
  echo $sub_departments_to_be_send;
}




/** 
 * gets employees by equipment nid
 */
function _get_emps_by_equipment( $equipment_nid){
  global $user ;
  //$hospital_nid = _get_user_working_hospital($user->uid);

  global $hospital_nid;
  $equipment_nid = arg(2);
  $emps_array = array();
  $emps_to_be_send= "<option value=\"\">- None -</option>";
  
  if ($equipment_nid == 1) {
    $select_query = " select distinct(node.title), d.nid from content_field_employee_department d  inner join node on (d.nid = node.nid) inner join content_field_employee_hospital h on(h.nid = d.nid)  where  h.field_employee_hospital_nid=%d"; 
    $result = db_query($select_query, $hospital_nid);
  }
  else {
    $select_query = " select node.title, d.nid from content_field_employee_department d inner join content_type_medical_equipment e on (d.field_employee_department_nid = e.field_equipment_department_nid) inner join node on (d.nid = node.nid) inner join content_field_employee_hospital h on(h.nid = d.nid)  where e.nid =%d and h.field_employee_hospital_nid=%d"; 
    $result = db_query($select_query, $equipment_nid, $hospital_nid);
  }
  while ($row = db_fetch_array($result)) {
    $emps_to_be_send .= "<option value =". $row['nid'] . ">" . $row['title'] . "</option>";
    // echo  check_plain( $row['city_name']);
  }
  echo $emps_to_be_send;
}


/** 
 * gets employees by equipment nid
 */
function _get_emps_uid_by_equipment( $equipment_nid){

  $uids = array() ;
  $select_query = " select node.uid uid, d.nid from content_field_employee_department d inner join content_type_medical_equipment e on (d.field_employee_department_nid = e.field_equipment_department_nid) inner join node on (d.nid = node.nid) inner join content_field_employee_hospital h on(h.nid = d.nid)  where e.nid =%d ";
  $result = db_query($select_query, $equipment_nid);
  while ($row = db_fetch_object($result)) {
    $uids[$row->uid] = $row->uid ;
  }
  return $uids;
}



/**
 * The following function set the medical equipment status value
 *
 * @param $nid
 *   Medical Equipment Node ID 
 * @param $status
 *   The new status of the medical equipment to be either (Active or InActive).
 */
function set_medical_equipment_status($nid, $status, $sub_status) {
  if(is_numeric ($nid)) {
    $equipment_node = node_load($nid);
    $equipment_node->field_status_l1[0]['value'] = $status;
    $equipment_node->field_status_l2[0]['value'] = $sub_status;
    node_save($equipment_node);
  }
}



/**
 * Get the parent node of any child 
 *
 * @param   $child_nid 
 *   child nid might be any nid of any node type that act as child for the parent node type.
 * @return  $equipment_nid
 *   Parent nid might be nid of any node type that act as parent for other child node type.
 */
function get_parent_nid($child_nid) {
  $query = 'select parent_nid from relativity where nid = %d';
  $result = db_query($query, $child_nid);
  if ($row = db_fetch_array($result)) {
	  $equipment_nid = $row['parent_nid'];
	}
  return $equipment_nid;
}

/**
 * Clear Cache page.
 * This function needed for clearing the cachs of page for the data inserted through native sql query
 */
function clear_cache_page(){
  module_load_include('inc', 'system', 'system.admin');
  $form = $form_state = array();
  system_clear_cache_submit($form, $form_state);
  return true;
}



/**
 * check if there is job already opened for specific medical equipment
 * 
 * @param  $equipment_nid
 *   Medical Equipment Node ID
 *
 * @return $opened_jobs
 *   Number of opened jobs for the medical equipment
 */
function check_jobs_for_medical_equipment($equipment_nid){
  $opened_jobs = 0;
  $query = 'select count(*) as total_jobs_count from content_type_job inner join content_field_job_status using (nid) where field_job_status_value in (0,1,4,5) and field_job_medical_equip_nid =%d';
  $result = db_query($query, $equipment_nid);
  if ($row = db_fetch_array($result)) {
    $opened_jobs = $row['total_jobs_count'];
  }
  return $opened_jobs;
}



/**
 * Get equipment serial number by nid 
 * 
 * @param $nid
 *   Medical Equipment Node ID
 *
 * @return $sn
 *   Medical Equipment Serial Number
 */
function _get_equipment_sn($nid) {
  $get_equipment_query = "select title from node where nid =%d";
  $result = db_query($get_equipment_query, $nid);
  $sn = "";
  if ($row = db_fetch_array($result)) {
    $sn = $row['title'];
  }
  return $sn;
}



/**
 * Gets user's Working hospital
 * @param $uid
 *   user id
 * 
 * @return $nid 
 *   nid of the user's hospital
 */
function _get_user_working_hospital($uid) {

  $hospital_nid = db_result(db_query('SELECT h.field_employee_hospital_nid from content_type_hospital_employee e  inner join content_field_employee_hospital h on (e.nid = h.nid) inner join node n on (n.nid=e.nid) where n.type = "hospital_employee" and n.uid = %d', $uid));
  return $hospital_nid;
  
  /************* OLD CODE ****************/
  /*$query = 'select nid  from node where uid = %d and type = "profile"';
  $result = db_query($query, $uid);
  $hospital_nid = 0;
  if ($row = db_fetch_array($result)) {
    //$profile_nid = $row['nid'];
    //$profile_node = node_load($profile_nid);
    //$hospital_nid = $profile_node->field_employee_hospital[0]['nid'];
    $hospital_nid = db_result(db_query('SELECT h.field_employee_hospital_nid from content_type_hospital_employee e  inner join content_field_employee_hospital h on (e.nid = h.nid) inner join node n on (n.nid=e.nid) where n.type = "hospital_employee" and n.uid = %d', $uid));
    //print $uid .$hospital_nid; exit();

  }
  else {
    
  }*/
}



/**
 * Gets hospital Code
 * @param $nid
 *   Node Id
 * 
 * @return $hospital_code 
 *   Hospital Code
 */
function _get_hospital_code($nid) {
  $query = 'select field_hospital_code_value from content_type_hospital where nid = %d;';
  $result = db_query($query, $nid);
  if ($row = db_fetch_array($result)) {
    $hospital_code = $row['field_hospital_code_value'];
	}
  return $hospital_code;
}



/**
 * Generate Medical Equipment Code ID
 * @param $hospital_nid
 *   Hospital Node Id
 * 
 * @return $code_id 
 *   New medical equipment Code ID
 */
function _generate_medical_equipment_code_id($hospital_nid, $equipment_serial, $equipment_department) {
  $country = variable_get('country', 0);
  $country = substr($country, 0, 3);
  $higher_corporation = variable_get('higher_corporation_code', '');
  $sub_corporation = variable_get('Sub_Enterprise_code', '');
  $hospital_code = db_result(db_query('SELECT field_hospital_code_value FROM content_type_hospital WHERE nid = %d', $hospital_nid));
  $equipment_department = db_result(db_query('SELECT field_department_name_english_value FROM content_type_department WHERE nid = %d', $equipment_department));
  $equipment_department = substr($equipment_department, 0, 3);
  $query = 'select field_equipment_code_value as new_code_id from content_type_medical_equipment inner join content_type_hospital hospital on (field_medical_equip_hospital_nid = hospital.nid) where hospital.nid = %d order by content_type_medical_equipment.nid Desc limit 1 ';
  $hospital_nid;
  $result = db_query($query, $hospital_nid);
  if ($row = db_fetch_array($result)) {
    $code_arr = explode('-' , $row['new_code_id']);
    $last_code = $code_arr[3] + 1;
    if (is_numeric($code_arr[3])) {
      $universal_code_id = $hospital_code ."-MED-". $equipment_department ."-". "$last_code";
    }
    else {
      $universal_code_id = $hospital_code ."-MED-". $equipment_department ."-"."$last_code";
    }
  }
  else {
    $universal_code_id = $hospital_code ."-MED-". $equipment_department ."-1" ;
  }
  $universal_code_id = strtoupper($universal_code_id);
  return $universal_code_id;
}

/**
 * modify Medical Equipment Code ID
 * @param $node
 *   if the department field is changed
 *
 * @return $universal_code_id
 *   modify medical equipment Code ID
 */
function modify_generating_equ_code_id(&$node){
  global $original_eq_node;
  $old_department = $original_eq_node->field_equipment_department[0]['nid'];
  $new_department = $node->field_equipment_department[0]['nid'];
  if ($old_department != $new_department){
    $equipment_department = db_result(db_query('SELECT field_department_name_english_value FROM content_type_department WHERE nid = %d', $new_department));
    $equipment_department = substr($equipment_department, 0, 3);
    $code = $original_eq_node->field_equipment_code[0]['value'];
    $code = explode('-' , $code);
    $universal_code_id = $code[0] ."-". $code[1] ."-".$equipment_department ."-". $code[3];
    $universal_code_id = strtoupper($universal_code_id);
  }
  else{
    $universal_code_id = $original_eq_node->field_equipment_code[0]['value'];
  }
  return $universal_code_id;
}

function _get_equipment_contract_status( $status) { 
   $status_list = array (0 => t("Under warranty contract"),
                         1 => t("Under Extended warranty"),
                         2 => t("Under Maintenance contract"),
                         3 => t("No Contract"));
   return $status_list[$status];
}
/**
 * Get Equipment Information Needed to be displayed
 * @param $equipment_nid
 *   Equipment Node Id
 * 
 * @return $equipment_information 
 *   Inofrmation about the medical equipment
 */
function _get_equipment_information($equipment_nid) {
  if (is_numeric($equipment_nid)) {
     
    $equipment_node = node_load($equipment_nid);
    $hospital_name = _get_node_title($equipment_node->field_medical_equip_hospital[0]['nid']);
    $department_name = _get_node_title($equipment_node->field_equipment_department[0]['nid']);
    $sub_department_name = _get_node_title($equipment_node->field_equipment_sub_department[0]['nid']);
    $warranty_end_date = date('d-m-Y',$equipment_node->field_warranty_end_date[0]['value']);
    if($equipment_node->field_warranty_end_date[0]['value'] =="") {
      $warranty_end_date = t('No Warranty');
    }
    $equipment_status = $equipment_node->field_status[0]['value'];
    $equipment_maintenance = t('Contract Status') .  " : " ;
    $equipment_maintenance .= _get_equipment_contract_status($equipment_node->field_equipment_m_contract_stat[0]['value']);
    $cck_field_name = 'field_equ_name_english';
    $en_equipment_name_value = $equipment_node->field_equ_name_english[0]['value'];
    $en_equipment_name = _get_field_real_name_by_field_name_value($en_equipment_name_value, $cck_field_name);
    $cck_field_name = 'field_equipment_name';
    $equipment_name_value = $equipment_node->field_equipment_name[0]['value'];
    $equipment_name = _get_field_real_name_by_field_name_value($equipment_name_value, $cck_field_name);
    $equipment_company_name = _get_node_title($equipment_node->field_company_name[0]['nid']);
    $information_title = t('Medical Equipment Info');
    
    $end_support_date = date('d-m-Y', db_result(db_query('select field_item_end_support_date_value from content_type_item_data where nid=%d', $equipment_node->field_equipment_coding	[0]['nid'])));
    global $cmms_type;
    $organization = t("Hospital");
    if ($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY) {
      $organization = t("Company");
    }
    if ($end_support_date == '01-01-1970') $end_support_date = "N/A";
    $equipment_information ="<ul class='unstyled profile-nav '>".  
    
   "<li>". l(t("S.N")." :". $equipment_node->title,"node/$equipment_node->nid")."</li>
         ". t('Equipment Name')." : $equipment_name<br>
        <li id ='name'> ". t('Equipment Name in english')." : $en_equipment_name</li>
        <li id ='hospital'> $organization :  $hospital_name </li>
        <li id ='warranty_date'>".t('Warranty End Date') ." : $warranty_end_date</li>
        <li id ='end_support_date'>".t('End of support date') ." : $end_support_date</li>
        <li id ='department'>". t('Department')." : $department_name</li>
        <li id ='department'>". t('Sub Department')." </b>: $sub_department_name</li>
        <li id ='status'> $equipment_status</li>
        <li id ='company_name'>". t('Company')." : $equipment_company_name </li>
        <li id ='maintenance_contract'>$equipment_maintenance</li></ul>
    ";
                     
    return $equipment_information;
  }
}



/**
 * Get Equipment Information Needed to be displayed
 * @param $equipment_nid
 *   Equipment Node Id
 * 
 * @return $equipment_information as array 
 *   
 */
function _get_equipment_information_array_by_equipment_nid($equipment_nid) {
  
  if (is_numeric($equipment_nid)) {
    $equipment_information = array();  
    $equipment_node = node_load($equipment_nid);
    $equipment_information['hospital_name'] = _get_node_title($equipment_node->field_medical_equip_hospital[0]['nid']);
   // $equipment_information['department'] = _get_node_title($equipment_node->field_equipment_department[0]['nid']);
    $equipment_information['department'] = db_result(db_query('select d.field_department_name_english_value as eng_name from content_type_department d  where nid=%d ', $equipment_node->field_equipment_department[0]['nid']));
    $equipment_information['sub_department'] = _get_node_title($equipment_node->field_equipment_sub_department[0]['nid']);
    $equipment_information['warranty_end_date'] = date('d-m-Y',$equipment_node->field_warranty_end_date[0]['value']);
    $equipment_information['code'] = $equipment_node->field_equipment_code[0]['value']; 
    $cck_field_name = 'field_equ_name_english';
    $en_equipment_name_value = $equipment_node->field_equ_name_english[0]['value'];
    $en_equipment_name = _get_field_real_name_by_field_name_value($en_equipment_name_value, $cck_field_name);
    $cck_field_name = 'field_equipment_name';
    $equipment_name_value = $equipment_node->field_equipment_name[0]['value'];
    $equipment_name = _get_field_real_name_by_field_name_value($equipment_name_value, $cck_field_name);
    
    $equipment_information['equipment_english_name'] = $en_equipment_name;
    $equipment_information['equipment_arabic_name'] = $equipment_name;
    //$equipment_company_name = _get_node_title($equipment_node->field_company_name[0]['nid']);
    //$equipment_information [''] 
    return $equipment_information;
  }
}


/**
 * returns the real name of value of spcific field
 * can be used to return the text of value of equipment name or 
 * any other fields that have value|text in cck select fields
 */
function _get_field_real_name_by_field_name_value($field_name_value, $cck_field_name) {

  $content_field = content_fields($cck_field_name);
  $allowed_values = content_allowed_values($content_field);
  $field_real_name = $allowed_values[$field_name_value];
  return $field_real_name;

}


/**
 * returns the name of term based on term id
 * need to be reviewed by the developers before using it
 */
function _get_type_name_by_type_value($type_value) {
  $type_name = db_fetch_object(db_query('select name from term_data where tid =%d', $type_value)); 
  return $type_name->name;
}


/**
 * this is function is now not being used and may be kept for reviwel
 * and might be deleted after making sure that it is not used
 * by any part of code in the system 
 */
function _get_field_real_name_by_field_name_value_make($field_name_value, $cck_field_name) {
  $cck_field = db_fetch_object(db_query("SELECT global_settings FROM {content_node_field} WHERE field_name = '%s'", $cck_field_name));
  $cck_field_global_settings = unserialize($cck_field->global_settings);
  $allowed_values = explode("\r\n", trim($cck_field_global_settings['allowed_values'], "\r\n"));
  $field_real_name = $allowed_values[$field_name_value - 2 ];//$equipment_node->field_equipment_name[0]['value'];
  $field_name_arr = explode('|',$field_real_name);
  $field_real_name = $field_name_arr[1];
  return $field_real_name;
}



/**
 * reruns the title of a node
 * based on nid 
 * used mostly cause the system is build on node table
 */
function _get_node_title($nid) {
  $title = "";
  $query = "select title from node where nid= %d";
  $result = db_query($query, $nid);
  if ($row = db_fetch_array($result)) {
    $title = $row['title'];
  }
  return $title;
}



/**
 * Generate Call Code ID
 * @param $hospital_nid
 *   Hospital Node Id
 * 
 * @return $job_id 
 *   New Call Code ID
 */
function _generate_job_code_id($hospital_nid) {
 
  $current_year = _get_current_year();
  //$date_clause = " and created BETWEEN $from AND $end_date and node.type = 'job' ";
  //$query = 'select count(*)+1  as new_code_id from content_type_job job inner join node using(nid) where field_job_hospital_nid =%d ' . $date_clause;
  $hospital_code = '';
  if (variable_get('insert_org_code_in_title_code', 0) == 1){
    $hospital_code = db_result(db_query('SELECT field_hospital_code_value FROM content_type_hospital WHERE nid = ' . $hospital_nid));
    $hospital_code = $hospital_code . "-";
  }
  $query = 'select node.nid,  node.title as new_code_id from content_type_job job inner join node using(nid) where field_job_hospital_nid =%d '. $date_clause.' order by nid Desc limit 1 ';
 // print $hospital_nid . $query; exit();
  $code_id = $hospital_nid;
  $result = db_query($query, $hospital_nid);
  if ($row = db_fetch_array($result)) {
    $code_arr = explode('-' , $row['new_code_id']);
    if (!empty($hospital_code))
      $last_code = $code_arr[3]; 
    else 
      $last_code = $code_arr[2];
    //print $query; exit(); 
    $code_id = "SR-" . $hospital_code  .$current_year. "-". ($last_code + 1);
  }
  else {
    $code_id = "SR-" . $hospital_code  . $current_year. "-". (1);

  }

  return $code_id;
}


/**
 * checks if specific job exist for that organization / individual hospital 
 * return true or false based on the result
 */
function _check_job_id_exist($hospital_nid, $job_id, $nid) {
  $query = "select nid,title from node inner join content_type_job using(nid) where field_job_hospital_nid =$hospital_nid and title='$job_id' and node.nid <> %d";
  //print $query; exit();
  $result = db_query($query, $nid);
  if ($row = db_fetch_array($result)) {
	  return $row['nid'];
	}
  else {
    return false;
  }
}



/**
 * Returns Current Year
 * 
 * @return $current_year 
 *   Current Year
 */
function _get_current_year() {
  $time = strtotime('today');
  $todayh = getdate($time);
  $current_year = $todayh[year];
  return $current_year;
 
}

/**
 * Handles maintenance Form Alter Functionality
 * @param $hospital_nid
 *   Hospital Node Id
 * 
 * @param $form 
 *   mcontracts_node_form
 */
function handle_mcontracts_form_alter($hospital_nid, &$form) {
 

  if (arg(1) == 'add') {
    drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/add_contract_fields.css');
  }
  else {

    drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/edit_contract_fields.css');
  }
  global $user;
  // show and hide feilds according cmms type and according to workflow
  global $cmms_type;
  

  if ($cmms_type == INDIVIDUAL_HOSPITAL || $cmms_type == HEIRARCHIAL_HOSPITALS ) {
    /*$form['field_equ_name_english']['#access'] = FALSE;
    $form['field_job_client']['#access'] = FALSE;
    $form['field_equipment_name']['#access'] = FALSE;
    $form['field_job_medical_equip']['#required'] = true;*/
    $form['field_mcontracts_total_price']['#access'] = FALSE;
    //$form['field_mcontracts_hosp']['#access'] = FALSE;
    $form['field_mcontracts_type']['#access'] = FALSE;
  }
  else {
    
    $form['field_mcontracts_total_price']['#access'] = FALSE;
    //$form['field_mcontracts_hosp']['#access'] = FALSE;
    $form['field_mcontracts_company']['#access'] = FALSE;
    $form['field_mcontracts_type']['#access'] = FALSE;
    //$form['field_job_notify_comp_hos_person']['#access'] = FALSE;
  }
}

/**
 * Handles Call Form Alter Functionality
 * @param $hospital_nid
 *   Hospital Node Id
 * 
 * @param $form 
 *   job_node_form
 */
function handle_job_form_alter($hospital_nid, &$form) {
  if (variable_get('show_second_sn_in_call', 0) != 1){
    $form['field_call_second_sn']['#access'] = FALSE;
  }
  global $user;
  // show and hide feilds according cmms type and according to workflow
  global $cmms_type;
  $user_group = _get_loggedin_user_group($user->uid);
  $form['field_specify_other_value']['#access'] = FALSE;
  if ( variable_get('caller_telephone', 0) != 1){
    $form['field_call_caller_telephone']['#access'] = FALSE;
  }
  if (variable_get('show_maintenance_info_based_on_first_action_in_call', 0) == 1){
    drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/hide_maintenance_info_tab.css');
  }
  $first_action_status = $form['field_job_first_action_status']['#default_value'][0]['value'];
  if ($first_action_status == 3 || $first_action_status == 4){  // 3 means fixed by phone & 4 means need a quotation
    drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/show_maintenance_info_tab.css');
  }
  if (!empty($_GET['equipment_ar']) && !empty($_GET['equipment_en']) && !empty($_GET['client'])){
    $form['field_equipment_name'][0]['#default_value']['value'] = $_GET['equipment_ar'];
    $form['field_equ_name_english'][0]['#default_value']['value'] = $_GET['equipment_en'];
    $form['field_job_client'][0]['#default_value']['nid'] = $_GET['client'];
  }
  if (variable_get('add_group_leader_in_call', 0) != 1){
    $form['field_job_group_leader']['#access'] = FALSE;
  }

  // this to check if the system will use virtual store or
  // will use actual store with real quantity
  if (variable_get('spare_part_store', 0) == 1) {
    $form['field_job_item_code']['#access'] = FALSE;
  } 
  else {
    $form['field_spare_part']['#access'] = false;
  }


  if ($cmms_type == INDIVIDUAL_HOSPITAL || $cmms_type == HEIRARCHIAL_HOSPITALS ) {
    $form['field_equ_name_english']['#access'] = FALSE;
    $form['field_job_client']['#access'] = FALSE;
    $form['field_equipment_name']['#access'] = FALSE;
    $form['field_job_medical_equip']['#required'] = true;

  }
  else {
    $form['field_job_company_name']['#access'] = FALSE;
    $form['field_job_notify_comp_hos_person']['#access'] = FALSE;
   // $form['field_job_assigned_user']['#prefix'] = '<div><input type="checkbox" id = "assigned_emp_check" onclick = "assigned_emp_checkbox()" name="assigned_emp_check" value="'. $user_group .'">'.t("Show only my group employees") .'</div>'; 
  }
  if(!empty($user->roles[SECRETARY]) || !empty($user->roles[TECHNICIAN]) || !empty($user->roles[FIELD_ENGINEER])) {

    $form['field_job_priority']['#access'] = FALSE;
    //$form['field_job_assigned_user']['#access'] = FALSE;
    //$form['field_equ_name_english']['#access'] = FALSE;
  }
  else { // it means it is maintenance company
    //$form['field_equ_name_english']['#required'] = FALSE;
    //$form['field_equipment_name']['#required'] = FALSE;
  }
  if (arg(1) == 'add') {
  }
  drupal_add_js(drupal_get_path('module', 'cis_system') . '/js/job_for_user.js');
  // use the below script if you want to handle employee for specific equipment
  //drupal_add_js(drupal_get_path('module', 'cis_system') . '/js/job.js');
  $equipment_nid = arg(3);
  if(arg(2) == 'edit') {
    $equipment_nid = $form['#node']->field_job_medical_equip[0]['nid'];
    if (_get_company_by_equipment_nid($equipment_nid) != 'all') {
      $form['field_job_company_name']['#default_value'][0]['nid'] = _get_company_by_equipment_nid($equipment_nid);
    }
  }
  else {
    _hide_mentainance_information();
  }
  if (variable_get('enable_user_location', 0) == 0 ) {
    $form['field_user_location']['#access'] = false;
  }
  if (is_numeric($equipment_nid)) {
    $javascript = "var equipment_nid = $equipment_nid;";
    drupal_add_js($javascript, 'inline'); 
  }

}


/**
 * Handles scraping Form Alter Functionality
 * @param $hospital_nid
 *   Hospital Node Id
 * 
 * @param $form 
 *   scraping_node_form
 */
function handle_scraping_form_alter($hospital_nid, &$form) {
  if(is_numeric(arg(3))) {
    // get all medical equipment that have the same medical equipment name
    $equipment_nid = arg(3);
    if(arg(2) == 'edit') {
      $equipment_nid = $form['#node']->field_scraping_med_equip_sn[0]['nid'];
    }
    // provide the popup form for the user to add spare parts
    // comments popup_by_amr
    //popups_add_popups();
    //$output .= l(t("Add New Component"),'add/spare_part/'.$equipment_nid.'/', array('attributes'=>array('class' => 'popups-form-reload')));
    //$form['field_spare_component']['#description']= t('Choose Existing Component For This Equipment OR '). $output;
  }
}

/**
 * handle item data form alter
 */
function handle_item_data_form_alter(&$form){
  $form['title']['#access'] = false;
}

/**
 * Handles quotation Form Alter Functionality
 * @param $hospital_nid
 *   Hospital Node Id
 * 
 * @param $form 
 *   quotation_node_form
 */
function handle_quotation_form_alter($hospital_nid, &$form) { 
  if (arg(1) == 'add'){
    $call_id = $_GET['quotation_job'];
  }
  else{
    $call_id = $form['field_quotation_job']['#default_value']['nid'];
  }
  $query = 'SELECT SUM(field_wrk_order_working_hours_value) total_working_hours, SUM(field_wrk_order_travelling_hours_value) total_traveling_hours FROM content_type_service_report WHERE field_service_report_job_nid = %d';
  $result = db_query($query, $call_id);
  if ($row = db_fetch_object($result)){
    $total_working_hours = $row->total_working_hours;
    $javascript = "$('#edit-field-quotation-working-hours-0-value').val($total_working_hours);$('#edit-field-quotation-traveling-hours-0-value').val($row->total_traveling_hours);";
    drupal_add_js($javascript, 'inline');
  }
    //print_r($form);exit();
  if (variable_get('maintenance_cost_functionality_in_quotation', 0) != 1){ 
    $form['field_quotation_maintenance_cost']['#access'] = false;
  }
  // this to check if the system will use virtual store or
  // will use actual store with real quantity
  if (variable_get('spare_part_store', 0) == 1) {
    $form['field_quotation_item_code']['#access'] = false;
  } 
  else {
    $form['field_spare_part']['#access'] = false;
  }
  $form['field_quotation_item_total']['#access'] = false;
  //$form['field_job_status']['#required'] = FALSE;
  //$form['field_job_status']['#access'] = FALSE;
  if (variable_get('enable_user_location', 0) == 0 ) {
    $form['field_user_location']['#access'] = false;
  }

  if(variable_get('quotation_cost_based_on', 3) == 1){
    $call = $form['field_quotation_job'];
  }
  if(!is_numeric(arg(1))) {

    if($_GET['op'] == 1) {
      drupal_set_title(t('Request spare part'));
    }
    elseif($_GET['op'] == 3){
      drupal_set_title(t('Deposit Spare part'));
    }
    elseif($_GET['op'] == 4)  {
      drupal_set_title(t('Request spare part for testing'));
    }
    elseif($_GET['op'] == 5)  {
      drupal_set_title(t('Consumable Spare parts'));
    }
    else {
          // drupal_set_title('Request spare part for Deposit in store');
    }


    $operation = $_GET['op'];
    if ($operation == 1 || $operation == 2 || $operation == 4){
      $call_nid = $_GET['quotation_job'];
      $query = db_query('SELECT field_job_assigned_user_uid FROM content_type_job WHERE nid = %d', $call_nid);
      if ($result = db_fetch_object($query)){
        $assigned_employee = $result->field_job_assigned_user_uid;
        $form['field_quotation_related_emp']['#default_value'][0]['uid'] = $assigned_employee;
      }
    }

    $equipment_id = $_GET['quotation_equipment'];
    $query1 = db_query('SELECT field_equipment_m_contract_stat_value FROM content_type_medical_equipment WHERE nid = %d', $equipment_id);
    if($result1 = db_fetch_object($query1)){
      $equipment_status = $result1->field_equipment_m_contract_stat_value;
      $form['field_quotation_equ_op_type']['#default_value'][0]['value'] = $equipment_status;
    }
    
    $equipment_nid = $node->field_service_report_equip[0]['nid'];
    $form['field_quotation_equipment']['#default_value'][0]['nid'] = $equipment_nid;
    $form['field_quotation_op_type']['#default_value'][0]['value'] = $_GET['op'];
  }
  if (arg(2) == 'edit' && $form['field_quotation_op_type']['#default_value'][0]['value'] == 2)  {
    drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/show_fields.css');
  }
  global $cmms_type;
  if (arg(1) == 'add') { 
    $operation = $_GET['op'];
  global $hospital_nid;
    $form['title']['#default_value'] = _get_quotation_new_id($hospital_nid);
    if (!empty($_GET['quotation_job']) && empty($_GET['quotation_service_report'])) {
      // this means that the quotation will be created upon call
      $job_node = node_load($_GET['quotation_job']);
      $form['#node']->field_quotation_item_code  =  $job_node->field_job_item_code;
      $form['#node']->field_quotation_part_name   =  $job_node->field_job_part_name;
      $form['#node']->field_quotaion_items_count   =  $job_node->field_job_requested_quantity;
      $form['#node']->field_quotation_type       =  $job_node->field_job_quotation_type;
      $form['#node']->field_quotation_unit_price =  $job_node->field_job_unit_price;
      $form['#node']->field_quotation_currency =  $job_node->field_call_currency;


      // transfer print info
      $form['#node']->field_pr_quotation_item_code  =  $job_node->field_job_item_code;
      $form['#node']->field_pr_quotation_part_name  =  $job_node->field_job_part_name;
      $form['#node']->field_pr_quotation_items_count =  $job_node->field_job_requested_quantity;
      $form['#node']->field_pr_quotation_unit_price =  $job_node->field_job_unit_price;
    }
    else {
      // this means that the quotation will be created upon work order
      $work_order_node = node_load($_GET['quotation_service_report']);
      $form['#node']->field_quotation_item_code  =  $work_order_node->field_wrk_order_item_code;
      $form['#node']->field_quotaion_items_count =  $work_order_node->field_wrk_order_requested_qty;
      $form['#node']->field_quotation_part_name  =  $work_order_node->field_wrk_order_part_name;
      $form['#node']->field_quotation_type       =  $work_order_node->field_quotation_type;
      $form['#node']->field_quotation_type       =  $work_order_node->field_wrk_order_quotation_type;
      // transfer print info
      $form['#node']->field_pr_quotation_item_code  =  $work_order_node->field_wrk_order_item_code;
      $form['#node']->field_pr_quotation_items_count =  $work_order_node->field_wrk_order_requested_qty;
      $form['#node']->field_pr_quotation_part_name  =  $work_order_node->field_wrk_order_part_name;
      $form['#node']->field_pr_quotation_unit_price =  $work_order_node->field_wrk_order_unit_price;
    }
    if ($operation == REQUEST_SPARE_PART){
      $form['field_quotation_returned_qty']['#access'] = false;
      $form['field_quotation_currency']['#access'] = false;
      $form['field_quotation_import']['#access'] = false;
      $form['field_quotation_discount']['#access'] = false;
    }
    elseif ($operation == 2){
      $form['field_quotation_returned_qty']['#access'] = false;
      $form['field_quotation_unit_price']['#required'] = true;
    }
    elseif  ($operation == 3 || $operation == 5){
      $form['field_quotation_returned_qty']['#access'] = false;
      $form['field_quotation_job']['#required'] = false;
      $form['field_quotation_m_situation']['#access'] = false;
      $form['field_job_status']['#access'] = false;
      $form['field_quotation_unit_price']['#required'] = true;
    }
    elseif ($operation == 4){
      $form['field_quotation_unit_price']['#access'] = false;
      $form['field_quotation_currency']['#access'] = false;
      $form['field_quotation_m_situation']['#access'] = false;
      $form['field_job_status']['#access'] = false;
      $form['field_quotation_import']['#access'] = false;
      $form['field_quotation_discount']['#access'] = false;
    }

  }
  if (arg(2) == 'edit'){
    $operation = $form['#node']->field_quotation_op_type[0]['value'];
    //print $form['field_quotation_op_type'][0]['value']; exit();
    if ($operation == 1){
      $form['field_quotation_returned_qty']['#access'] = false;
      $form['field_quotation_currency']['#access'] = false;
      $form['field_quotation_import']['#access'] = false;
      $form['field_quotation_discount']['#access'] = false;
    }
    elseif ($operation == 2){
      $form['field_quotation_returned_qty']['#access'] = false;
      $form['field_quotation_unit_price']['#required'] = true;
    }
    elseif ($operation == 3 || $operation == 5){
      $form['field_quotation_returned_qty']['#access'] = false;
      $form['field_quotation_m_situation']['#access'] = false;
      $form['field_job_status']['#access'] = false;
      $form['field_quotation_unit_price']['#required'] = true;
    }
    elseif ($operation == 4){
      $form['field_quotation_unit_price']['#access'] = false;
      $form['field_quotation_currency']['#access'] = false;
      $form['field_quotation_m_situation']['#access'] = false;
      $form['field_job_status']['#access'] = false;
      $form['field_quotation_import']['#access'] = false;
      $form['field_quotation_discount']['#access'] = false;
    }

  }
}


/**
 * Handles importcode Form Alter Functionality
 * @param $hospital_nid
 *   Hospital Node Id
 * 
 * @param $form 
 *   importcode_node_form
 */
function handle_importcode_form_alter($hospital_nid, &$form) {
  /** code added by amr **/
  //print_r($form);exit();

  //dpm($form);
  // this to check if the system will use virtual store or
  // will use actual store with real quantity
  if (variable_get('spare_part_store', 0) == 1) {
    $form['field_importcode_item_code']['#access'] = FALSE;
  }
  else {
    $form['field_spare_part']['#access'] = false;
  }


  if(arg(1) == 'add' && !is_numeric(arg(1))) { 
    $form['title']['#default_value'] = _get_importcode_new_id($hospital_nid);
     _hide_mentainance_information();
  }
  if (arg(2) == 'importcode' || arg(2) == 'edit'){
    drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/hide_maintenance_info_tab.css');
  }
  if (arg(1) == 'add') { 
    $quotation_node = node_load($_GET['import_code_quotation_id']);
    $form['#node']->field_importcode_item_code   =  $quotation_node->field_quotation_item_code;
    $form['#node']->field_importcode_items_count =  $quotation_node->field_quotaion_items_count;
    $form['#node']->field_importcode_unit_price  =  $quotation_node->field_quotation_unit_price;
    $form['#node']->field_importcode_type        =  $quotation_node->field_quotation_type;
    $form['#node']->field_importcode_discount        =  $quotation_node->field_quotation_discount;
    $form['#node']->field_importcode_part_name        =  $quotation_node->field_quotation_part_name;
    $quotation_type = $quotation_node->field_quotation_op_type[0]['value'];
    if ($quotation_type == 3 || $quotation_type == 5 || $quotation_type == 4 )
      $form['field_importcode_job']['#required'] = false;

    $equipment_nid = $_GET['importcode_equipment'];//$form['field_importcode_equipment'][0]['nid']['#default_value'];
    $query = db_query('SELECT field_equipment_m_contract_stat_value status FROM content_type_medical_equipment WHERE nid = %d', $equipment_nid);
    if($result = db_fetch_object($query)){
      $equipment_status = $result->status;
      //print $equipment_status ; exit();
      $form['field_importcode_po_eq_status']['#default_value'][0]['value'] = $equipment_status;
    }

  }


  /** end of code added by amr **/
  

  $equipment_nid = arg(3);
  if(arg(2) == 'edit') {
    $equipment_nid = $form['#node']->field_importcode_equipment[0]['nid'];
    if (_get_company_by_equipment_nid($equipment_nid) != 'all') {
      $form['field_job_company_name']['#default_value'][0]['nid'] = _get_company_by_equipment_nid($equipment_nid);
    }
  }
  $javascript = "var equipment_nid = $equipment_nid;";
  drupal_add_js($javascript, 'inline'); 
  //drupal_add_js(drupal_get_path('module', 'cis_system') . '/js/importcode.js');

  // provide the popup form for the user to add spare parts
  //popups_add_popups();
  //$output .= l(t("Add New Component"),'add/spare_part'.$equipment_nid.'/', array('attributes'=>array('class' => 'popups-form-reload')));
  //$form['field_spare_component']['#description']= t('Choose Existing Component For This Equipment OR '). $output;
}

/**
 * generates new id for internal work order
 */
function _get_internal_work_order_new_id() {
  $last_id = db_result(db_query("SELECT count(node.title) FROM node INNER JOIN content_type_service_report sr using(nid) WHERE node.type='service_report' AND sr.field_wrk_order_type_value = 1 ORDER BY nid DESC LIMIT 1"));
  $last_code = "ISR-" . _get_current_year(). "-" .($last_id + 1);
  return $last_code;
}


/**
 * Handles Service Form Alter Functionality
 * @param $hospital_nid
 *   Hospital Node Id
 *
 * @param $form 
 *   service_report_node_form
 */
function handle_service_report_form_alter($hospital_nid, &$form) {
  global $user;
  global $cmms_type;
  popups_add_popups();
  if ($form['field_wrk_order_type']['#default_value'][0]['value'] != 1){
    drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/hide_outside_repair_tab.css');
  }
  if(!empty($user->roles[GROUP_LEADER]) || !empty($user->roles[SYS_ADMIN])) {
    $form['field_wrk_order_reassigned_emplo']['#access'] = TRUE;
  }
  else{
    $form['field_wrk_order_reassigned_emplo']['#access'] = FALSE;
  }
  if (variable_get('hide_unit_price_and_quotation_type_wo', 0) == 1){
    $form['field_wrk_order_unit_price']['#access'] = FALSE;
    $form['field_wrk_order_quotation_type']['#access'] = FALSE;
  }
  if (variable_get('group_leader_review_option', 0) == 0) {
    $form['field_wrk_order_review_status']['#access'] = FALSE;
  }
  if (!empty($_GET['service_report_job'])) { 
    $job_node = node_load($_GET['service_report_job']);
    $form['#node']->field_wrk_order_quotation_type  =  $job_node->field_job_quotation_type;
    $form['#node']->field_wrk_order_unit_price  =  $job_node->field_job_unit_price; 
    $form['#node']->field_wrk_order_item_code  =  $job_node->field_job_item_code; 
    $form['#node']->field_wrk_order_part_name =  $job_node->field_job_part_name; 
    $form['#node']->field_wrk_order_requested_qty =  $job_node->field_job_requested_quantity; 
  }
  if (arg(1) == 'add'){
    if ($_GET['internal_wrk_order'] == 1){
      $form['title']['#default_value'] = _get_internal_work_order_new_id();
      $form['field_wrk_order_type']['#default_value'][0]['value'] = 1;
      $form['title']['#access'] = false;
    }
    else{
      $form['field_wrk_order_type']['#default_value'][0]['value'] = 2;
    }
  }
  if(arg(2) == 'edit'){
    $wrk_order_type = $form['field_wrk_order_type']['#default_value'][0]['value'];
    if ($wrk_order_type == 1){
      $form['title']['#access'] = false;
    }
  }
  $output .= l(t("New Equipment"),'node/add/medical-equipment/'. $_GET['wrk_order_client'], array('attributes'=>array('class' => 'popups-form-reload')));
  $form['field_service_report_equip']['#description']= $output;

  $job_id = $_GET['service_report_job'];
  // get equipment nid by job nid
  $query = db_query('SELECT field_job_medical_equip_nid FROM content_type_job WHERE nid = %d', $job_id);
  if ($result = db_fetch_object($query)){
    $equipment_id = $result->field_job_medical_equip_nid;
  }
  // get equipment contract state by equipment nid
  //print $equipment_id; exit();
  $query1 = db_query('SELECT field_equipment_m_contract_stat_value FROM content_type_medical_equipment WHERE nid = %d', $equipment_id);
  if($result1 = db_fetch_object($query1)){
    $equipment_status = $result1->field_equipment_m_contract_stat_value;
  }
  if(($equipment_status == 0 || $equipment_status == 1 ) && $equipment_status !== NULL){
    $form['field_service_report_service']['#default_value'][0]['value'] = 0;
  }
  if($equipment_status == 2){
    $form['field_service_report_service']['#default_value'][0]['value'] = 1;
  }

  $user_group = _get_loggedin_user_group($user->uid);
  if(is_numeric($_GET['service_report_job']) && is_numeric($_GET['service_report_job'])) {
    $job_nid = 0;
    $job_nid = $_GET['service_report_job'] ;
    $job_uid = db_result(db_query('select field_job_assigned_user_uid from content_type_job where nid=%d', $job_nid));
    $form['field_service_report_assigned_em']['#default_value'][0]['uid'] = $job_uid;
  }

  // this to check if the system will use virtual store or
  // will use actual store with real quantity
  if (variable_get('spare_part_store', 0) == 1) {
    $form['field_wrk_order_item_code']['#access'] = false;
  } 
  else {
    $form['field_spare_part']['#access'] = false;
  }


  if ($cmms_type == INDIVIDUAL_HOSPITAL || $cmms_type == HEIRARCHIAL_HOSPITALS) {
    $form['field_wrk_order_client']['#access'] = false;
  }
  else { // hide the company field in medical company
    $form['field_service_report_assigned_em']['#prefix'] = '<div id="assigend_emp_grp"><input type="checkbox" id = "assigned_emp_check" onclick = "wrk_assigned_emp_checkbox()" name="assigned_emp_check" value="'. $user_group .'">Show only my group employees</div>'; 
    $form['field_service_report_comp']['#access'] = false;
  }
  if(empty($user->roles[GROUP_LEADER]) || empty($user->roles[SYS_ADMIN])) {
    $form['field_job_workflow_approval']['#access'] = FALSE;
    $form['field_job_workflow_approval_cmnt']['#access'] = FALSE;
    //$form['field_equ_name_english']['#access'] = FALSE;
  }
    
  if(is_numeric($_GET['service_report_equip'])) {
    $equipment_nid = $_GET['service_report_equip'];
    if (_get_company_by_equipment_nid($equipment_nid) != 'all') {
      $form['field_job_company_name']['#default_value'][0]['nid'] = _get_company_by_equipment_nid($equipment_nid);
    }
  }
  elseif (arg(2) == 'edit') {
    if (_get_company_by_equipment_nid($equipment_nid) != 'all') {
      $form['field_job_company_name']['#default_value'][0]['nid'] = _get_company_by_equipment_nid($equipment_nid);
    }
  }

  // those fields are not needed in hospital or company we prevented
  // access to them
  $form['field_service_report_out_ret_dat']['#access'] = false;
  $form['field_service_report_return_date']['#access'] = false;
  $form['field_service_report_comments']['#access'] = false;
  if (variable_get('enable_user_location', 0) == 0 ) {
    $form['field_user_location']['#access'] = false;
  }
  $javascript = "var equipment_nid = $equipment_nid;";

  drupal_add_js($javascript, 'inline');
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'cis_system') . '/blah_blah_example.js',
  );
  //TODO review that code make conflict with main cis_system.js
 // drupal_add_js(drupal_get_path('module', 'cis_system') . '/js/service_report.js');
 
}


/**
 * Handles Call search Form Alter Functionality
 * @param $hospital_nid
 *   Hospital Node Id
 * 
 * @param $form 
 *   views_exposed_form
 */
function handle_job_search_form_alter($hospital_nid, &$form) {
  unset($form['#parameters']);// ="rt". _get_current_year();
  $form['job_id_search']['#default_value'] = 'test';// ="rt". _get_current_year();
 // unset($form['#parameters'][1]['view']->display['default']->display_options['filters']['job_id_search']['#default_value']);// ="rt". _get_current_year();
  //print_r($form); exit();
  //``:`[query[filter]
}


function handle_search_equipments_form(&$form){
  $form['equipment_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Equipment Name'),
    '#size' => 30,
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#weight' => -1,
  );
  $form['equipment_name_english'] = array(
    '#type' => 'textfield',
    '#title' => t('Equipment Name(e)'),
    '#size' => 30,
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete/english',
    '#weight' => -1,
  );
  return $form;
}
function handle_search_parts_form(&$form){
  $form['part_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Description(e)'),
    '#size' => 30,
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete/part',
    '#weight' => -1,
  );
  $form['part_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Part Number'),
    '#size' => 30,
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete/part/number',
    '#weight' => -1,
  );
  return $form;
}




/**
 * add css file to hide special information from
 * the user while using the system
 */
function _hide_mentainance_information() {
  drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/hide_maintenance_info.css');

}



/**
 * this function is not being used
 * and may be kept for reviewal and being reference
 */
function _unset_mentainance_information(&$form) {
 /* unset($form['field_job_spare_part']);
  unset($form['field_end_of_work']);
  unset($form['field_job_notify_comp_hos_person']);
  unset($form['field_job_notify_company_date']);
  unset($form['field_spare_part_used']);
  unset($form['field_job_mean_of_contact']);
  unset($form['field_job_notify_company']);
  unset($form['field_job_reason']);
  unset($form['field_job_attach_file']);
  unset($form['field_job_comment']);
  unset($form['field_job_description']);*/
}



/**
 * return status value in the status field
 * in the call / job to be available for the user
 * to choose from
 */
function _return_job_status_values() {
  global $user;
  global $cmms_type;
  if ($cmms_type == INDIVIDUAL_HOSPITAL || $cmms_type == HEIRARCHIAL_HOSPITALS) {
    // 0
    $inside_hospital = t('To be fixed inside Hospital');
    // 1
    $by_company = t('To be fixed by Company');
    // 2
    $resolved_by_hospital = t('Resolved by Hospital Employee');
    // 3
    $resolved_by_company = t('Resolved by Company');
  
    $status_array = array(0 => $inside_hospital, 1 => $by_company, 2 => $resolved_by_hospital, 3 => $resolved_by_company);
    // check differnt type of content types
    if(is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node->type == 'importcode') {
        $status_array = array(1 => $by_company, 3 => $resolved_by_company);
      }
      elseif ($node->type == 'job' && arg(2) == 'edit') {
        $status_array = array(0 => $inside_hospital , 1 => $by_company, 2 => $resolved_by_hospital);
      }
      elseif ($node->type == 'job') {
        $status_array = array(0 => $inside_hospital , 1 => $by_company, 2 => $resolved_by_hospital, 3 => $resolved_by_company);
      }
      elseif ($node->type == 'service_report' && arg(2) == 'edit') {
        $status_array = array (1 => $by_company, 3 => $resolved_by_company);
      }
    } 
  
    // check if it is service report 
    if(arg(2) == 'service-report') {
      $status_array = array(1 => $by_company, 3 => $resolved_by_company);
    }
    elseif(arg(2) == 'importcode') {
      $status_array = array(1 => $by_company, 3 => $resolved_by_company);
    } 
    return $status_array;
  }
  else {

    /*$list_of_status = array();
    $node_type = "";

    switch($node_type) {
      case 'job': // call 
        switch($role) {
          case FIELD_ENGINEER:
          case TECHNICIAN:
          case FIELD_ENGINEER:
            break;

        }
        break;
      
      case 'service_report': // work order
        break;

      case 'quotaion': // quotation
        break;

      case 'importcode': // purchase order
        break;   
    }*/
    $workflow_sql = 'select id, name from {workflow_status} where id > 3 order by id ASC';
    $results = db_query($workflow_sql);
    $workflow_options = array();
    while($row = db_fetch_object($results)) {
      $workflow_options[$row->id] = t($row->name);
    }
    return $workflow_options;
  }

}




/**
 * handles the validation need for item data
 *
 * @param $node
 * item data node
 */
function _handle_item_data_presave(&$node){
  //dpm($node);
  $term_id = $node->field_type_l2[0]['value'];
  //$node->title = _get_term_name($term_id); 
}  

function _get_term_name($term_id) {
  return  db_result(db_query('select name from term_data where tid=%d', $term_id));
}



/**
 * handles the validation need for item data
 *
 * @param $node
 * item data node
 */
function _handle_item_data_validataions(&$node){
  

  $equipment_name = $node->field_equipment_name[0]['value'];
  $equipment_brand = $node->field_type_l1[0]['value'];
  $equipment_model = $node->field_type_l2[0]['value'];
  $query = db_query("SELECT parent FROM term_hierarchy WHERE tid = %d ", $equipment_model);
  if ($get = db_fetch_object($query)){
    if ( $equipment_brand == $get->parent){
      // that is right
    }
    else{
      form_set_error("", $message = 'This model doesn\'t belong to selected brand.');
    }
  }
  $where_clause = "";
  if (is_numeric(arg(1))) {
    // to pass the validation for the same item-data 
    $where_clause = " and item.nid <> ". arg(1);
  }
  $result = db_query("SELECT item.nid as nid from content_type_item_data item INNER JOIN content_field_equipment_name name using(nid) 
                      INNER JOIN content_field_type_l1 brand using (nid) INNER JOIN content_field_type_l2 model using (nid)
                      where name.field_equipment_name_value = %d AND brand.field_type_l1_value = %d
                      AND model.field_type_l2_value = %d" . $where_clause,$equipment_name,$equipment_brand, $equipment_model);

  if ($data = db_fetch_object($result)){
    form_set_error("", $message = 'This equipment name, brand and model has been already entered before, You should specify unique composition of equipment name, brand and model check it here' . l('item', 'node/'. $data->nid), $reset = FALSE);
  }
}



/**
 * handles the validation need for equipment
 *
 * @param $node
 * equipment node
 */
function _handle_equipment_validations(&$node){
  $equipment_serial_no = $node->title;
  $model_value = $node->field_type_l2[0]['value'];
  $query = db_query('SELECT node.nid as nid, node.title equipment_serial_no, model.field_type_l2_value model_value FROM node INNER JOIN content_field_type_l2 model ON model.nid = node.nid WHERE node.title = "%s" AND model.field_type_l2_value = %d and node.nid!=%d', $equipment_serial_no, $model_value, $node->nid);
  if ($row = db_fetch_object($query)){
    form_set_error("", $message = 'Required unique serial number with model, this serial number was entered before with this model' .l('View duplicate Equipment', 'node/'. $row->nid), $reset = FALSE);
  }
  $coding = $node->field_equipment_coding[0]['nid'];
  $equipment_name = $node->field_equipment_name[0]['value'];
  $equipment_en_name = $node->field_equ_name_english[0]['value'];
  $equipment_brand = $node->field_type_l1[0]['value'];
  $equipment_model = $node->field_type_l2[0]['value'];
  $result = db_query("SELECT item.nid from content_type_item_data item INNER JOIN content_field_equipment_name name using (nid) INNER JOIN content_field_type_l1 brand using (nid) INNER JOIN content_field_type_l2 model using (nid) where name.field_equipment_name_value = %d AND brand.field_type_l1_value = %d  AND item.nid = %d", $equipment_name, $equipment_brand, $coding);
  if ($data = db_fetch_object($result)){
    //his mean that it is the first unique composit key of brand,model and equipment name
  }
  else{
    //form_set_error("", $message = 'You cannot change the equipment name, brand or model, Please choose from the lookup that match your requirements', $reset = FALSE);
  }

  if ($equipment_en_name != $equipment_name ){
    form_set_error("", $message = 'Equipment name in arabic must match the english name', $reset = FALSE);
  }
  if (!empty($equipment_model)) {
    $query = db_query("SELECT parent FROM term_hierarchy WHERE tid = %d", $equipment_model);
    if ($result = db_fetch_object($query)){
      if ( $equipment_brand != $result->parent){
        form_set_error("", $message = 'This model doesn\'t belong to this brand.');
      }
    }
  }
}

/**
 * handles the delete need for equipment
 *
 * @param $node
 * equipment node
 */
function handle_equipment_delete(&$node){
  $equipment_nid = arg(1);
  $delete = db_query('DELETE FROM equipmentmaintenance_cost WHERE equipment_nid = %d', $equipment_nid);
  $nids_array = array();
  $ppm_query = 'select ppm.nid as ppm_id,pentry.nid as pentry_id from content_type_pentry pentry inner join content_type_ppm ppm on ppm.nid = pentry.field_pentry_ppm_schedule_nid  where pentry.field_pentry_medical_equips_nid = %d ';
  $results = db_query($ppm_query, $node->nid);
  while($row = db_fetch_object($results)) {
    $nids_array[$row->ppm_id] = $row->ppm_id;
    $nids_array[$row->pentry_id] = $row->pentry_id;
  }
  $cal_query = 'select cal.nid as cal_id,centry.nid as centry_id from content_type_centry centry inner join content_type_cal cal on cal.nid = centry.field_centry_cal_schedule_nid  where centry.field_centry_medical_equips_nid = %d ';
  $results = db_query($cal_query, $node->nid);
  while($row = db_fetch_object($results)) {
    $nids_array[$row->cal_id] = $row->cal_id;
    $nids_array[$row->centry_id] = $row->centry_id;
  }
  $nids = implode(',', $nids_array);
  // get list of ppm nids
  // get list of ppm plans nids
  // get list of calibration plans nids
  // get list of calibration nids
  foreach ($nids_array as $key => $value){
    node_delete($key);
  }
}
/**
 * handles the insert need for equipment
 *
 * @param $node
 * equipment node
 */

function insert_into_equipmentmaintenance_cost(&$node){
  $equipment_nid = $node->nid;
  //$today_date = time();
  $operation_date = $node->field_equipment_operation_date[0]['value'];
  $warranty_months = $node->field_equipment_warranty_months[0]['value'];
  $extended_months = $node->field_equipment_ext_warranty_mon[0]['value'];
//  $cost_per_warranty_month = $node->field_equipment_warrantymon_cost[0]['value'];
//  $cost_per_extended_warranty_month = $node->field_equipment_extendedmon_cost[0]['value'];
  $warranty_end_date = strtotime("+$warranty_months month", $operation_date);
  $extended_warranty_end_date = strtotime("+$extended_months month", $warranty_end_date);

  if (!empty($warranty_end_date)){
    $contract_type = 1; //under warranty contract
    $from_date = $node->field_equipment_operation_date[0]['value'];
    $to_date = $warranty_end_date;
    $month_cost = $node->field_equipment_warrantymon_cost[0]['value']; // warranty month cost
    if (arg(1) == 'add'){
      $query = db_query('INSERT INTO equipmentmaintenance_cost (equipment_nid, contract_type, from_date, to_date, month_cost) VALUES (%d, %d, %d, %d, %d)', $equipment_nid, $contract_type, $from_date, $to_date, $month_cost);
    }
    else if (arg(2) == 'edit'){
      $query = db_query('UPDATE equipmentmaintenance_cost SET from_date = %d, to_date = %d, month_cost = %d WHERE equipment_nid = %d AND contract_nid = 0 AND contract_type = 1', $from_date, $to_date, $month_cost, $equipment_nid);
    }
  }
  if (!empty($extended_warranty_end_date)){
    $contract_type = 2; //under extended warranty months
    $from_date = $warranty_end_date;
    $to_date = $extended_warranty_end_date;
    $month_cost = $node->field_equipment_extendedmon_cost[0]['value']; // extended warranty month cost
    if (arg(1) == 'add'){
      $query = db_query('INSERT INTO equipmentmaintenance_cost (equipment_nid, contract_type, from_date, to_date, month_cost) VALUES (%d, %d, %d, %d, %d)', $equipment_nid, $contract_type, $from_date, $to_date, $month_cost);
    }
    else if (arg(2) == 'edit'){
      $query = db_query('UPDATE equipmentmaintenance_cost SET from_date = %d, to_date = %d, month_cost = %d WHERE equipment_nid = %d AND contract_nid = 0 AND contract_type = 2', $from_date, $to_date, $month_cost, $equipment_nid);
    }
  }

  //$from_date = $node->field_equipment_operation_date[0]['value'];
//  if (arg(1) == 'add'){
  //  $query = db_query('INSERT INTO equipmentmaintenance_cost (equipment_nid, contract_type, from_date, to_date, month_cost) VALUES (%d, %d, %d, %d, %d)', $equipment_nid, $contract_type, $from_date, $to_date, $month_cost);
 // }
//  else if (arg(2) == 'edit'){
//    $query = db_query('UPDATE equipmentmaintenance_cost SET contract_type = %d, from_date = %d, to_date = %d, month_cost = %d WHERE equipment_nid = %d AND contract_nid = 0', $contract_type, $from_date, $to_date, $month_cost, $equipment_nid);
 // }
}

/**
 * handles the validation need for call
 *
 * @param $node
 * work order ode
 */
function _handle_job_validations(&$node){
  _validate_part_name_description($node);
  $status = $node->field_job_status[0]['value'];
  if ($status == 2 || $status == 3  || $status == 6 ) {
    if (!empty($node->field_spare_component[0]['value']) && !empty($node->field_job_description[0]['value'])) {
    }
    else {
      form_set_error("", $message = 'Fault Description and Work performed can not bet empty if you had resolved this job', $reset = FALSE);
    }
  } 
}


/**
 * handles the validation need for work order
 *
 * @param $node
 * work order ode
 */
function _handle_work_order_validations(&$node){
  _validate_part_name_description($node);
  $status = $node->field_job_status[0]['value'];
  if ($status == 2 || $status == 3  || $status == 6 ) {
    if (!empty($node->field_spare_component[0]['value']) && !empty($node->field_job_description[0]['value'])) {
    }
    else {
      form_set_error("", $message = 'Fault Description and Work performed can not bet empty if you had resolved this job', $reset = FALSE);
    }
  } 
  $collect_nid = array();
  $count_array_of_data = count($node->field_wrk_order_item_code);
  for($i = 0; $i < $count_array_of_data; $i++){
    $get_nid = $node->field_wrk_order_item_code[$i]['nid'];
    if (in_array($get_nid, $collect_nid)) {
      form_set_error("", $message = 'You should not choose the same part more than one time', $reset = FALSE);
    }
    else{
      $collect_nid[] = $get_nid;
    }
    $requested_quantity = $node->field_quotaion_items_count[$i]['value'];
    $item_code_nid = $node->field_wrk_order_item_code[$i]['nid'];
    $result = db_query("select field_part_qty_on_hand_value from  content_type_part_catalog where nid = %d", $item_code_nid);
    if ($data = db_fetch_object($result)){
      $quantity_on_hand = $data->field_part_qty_on_hand_value;
      /*if($requested_quantity > $quantity_on_hand) {
        form_set_error("", $message = 'The Quantity requested should be less than quantity on hand that equals ' . $quantity_on_hand, $reset = FALSE);
      }
      else{
               //the operation will be don
      }*/
    }
  }
}

/**
 * validation to prevent any change of the 
 * description field of spare parts needed
 * in CALL, WO, QUOTATION & PO
 */
function _validate_part_name_description(&$node){
  if ($node->type == 'job'){
    $description_count = count($node->field_job_part_name);
    $item_code = $node->field_job_item_code;
    $description = $node->field_job_part_name;
  }
  if ($node->type == 'service_report'){
    $description_count = count($node->field_wrk_order_part_name);
    $item_code = $node->field_wrk_order_item_code;
    $description = $node->field_wrk_order_part_name;
  }
  if ($node->type == 'quotation'){
    $description_count = count($node->field_quotation_part_name);
    $item_code = $node->field_quotation_item_code;
    $description = $node->field_quotation_part_name;
  }
  if ($node->type == 'importcode'){
    $description_count = count($node->field_importcode_part_name);
    $item_code = $node->field_importcode_item_code;
    $description = $node->field_importcode_part_name;
  }
  if ($node->type == 'invoice'){
    $description_count = count($node->field_invoice_part_name);
    $item_code = $node->field_invoice_item_code;
    $description = $node->field_invoice_part_name;
  }
  $i = 0;
  for ($i; $i <= $description_count; $i++){
    $query = db_query('SELECT field_part_data_part_name_e_value FROM content_type_part_catalog WHERE nid = %d', $item_code[$i]['nid']);
    if ($result = db_fetch_object($query)){
      if ($result->field_part_data_part_name_e_value != $description[$i]['value']){
        $message = t("Description does not match the Part Catalog description, Use the lookup again..!!");
        form_set_error("", $message, $reset = FALSE);
      }
    }
  }
}




/**
 * handles the validation need for quotation
 *
 * @param $node
 *  quotation node
 */
function _handle_quotation_validations(&$node){
  if ((variable_get('same_total_in_quotation', 0) == 1) && arg(2) == 'edit'){
    $print_info_total = 0;
    $spare_parts_total = 0;
    $i = 0;
    foreach ($node->field_pr_quotation_unit_price as $k => $v) {
      $print_info_total = $print_info_total + (($v['value'] * $node->field_pr_quotation_items_count[$i]['value'] ) - (($v['value'] * $node->field_pr_quotation_items_count[$i]['value'] * $node->field_pr_quotation_discount[$i]['value'])/ 100));
      $i++;
    }
    $i = 0;
    foreach ($node->field_quotation_unit_price as $k => $v) {
      $spare_parts_total = $spare_parts_total + (($v['value'] * $node->field_quotaion_items_count[$i]['value'] ) - (($v['value'] * $node->field_quotaion_items_count[$i]['value'] * $node->field_quotation_discount[$i]['value'])/ 100));
      $i++;
    }
    if ($print_info_total != $spare_parts_total){
      form_set_error("", $message = 'The items total in print info isn\'t the same total of items in spare parts group', $reset = FALSE);
    }
  }
  _validate_part_name_description($node);
  $op = $_GET['op'];
  $price = $node->field_quotation_unit_price[0]['value'];
  if ($op == 3 ||  $op ==2 || $op == 5){
    if (empty($price)){
      form_set_error("", $message = 'Unit price field is required', $reset = FALSE);
    }
  }

  $collect_nid = array();
  $count_array_of_data = count($node->field_quotation_item_code);
  for($i = 0; $i < $count_array_of_data; $i++){
    $get_nid = $node->field_quotation_item_code[$i]['nid'];
    if (in_array($get_nid, $collect_nid)) {
      form_set_error("", $message = 'You should not choose the same part more than one time', $reset = FALSE);
    }
    else{
      $collect_nid[] = $get_nid;
    }
    if ($node->field_quotation_op_type[0]['value'] ==0 || $node->field_quotation_op_type[0]['value'] == 2 ) {
      $requested_quantity = $node->field_quotaion_items_count[$i]['value'];
      $item_code_nid = $node->field_quotation_item_code[$i]['nid'];
      $result = db_query("select field_part_qty_on_hand_value from  content_type_part_catalog where nid = $item_code_nid");
      if ($data = db_fetch_object($result)){
        $quantity_on_hand = $data->field_part_qty_on_hand_value;
        /*if($requested_quantity > $quantity_on_hand) {
          form_set_error("", $message = 'The Quantity requested should be less than quantity on hand that equals ' . $quantity_on_hand, $reset = FALSE);
        }
        else {
                //the operation will be done
        }*/
      }
    }
  }
}

/**
 * handles delete operation for quotation to calculate
 * part catalog's quantity on hand .
 * related to transactions
 * @param $node
 *   quotation
 */
function _handle_quotation_delete(&$node){
  $quotation_nid = $node->nid;
  $quotation_op_value = $node->field_quotation_op_type[0]['value'];
  $i = 0;
  if ($quotation_op_value == 1 || $quotation_op_value == 4){
    foreach ($node->field_quotation_item_code as $key => $value){
      $part_nid = $node->field_quotation_item_code[$i]['nid'];
      $query = db_query('DELETE FROM transactions WHERE transaction_node_nid = %d AND part_code_nid = %d', $quotation_nid, $part_nid);
      $i++;
      $item_total_deposit  = db_result(db_query('select sum(quantity_received) from transactions where part_code_nid =%d and transaction_type = 1', $part_nid));
      $item_total_withdraw = db_result(db_query('select sum(quantity_requested) from transactions where part_code_nid =%d and transaction_type = 0', $part_nid));
      $item_total_withdraw_PO = db_result(db_query('select sum(quantity_received) from transactions where part_code_nid =%d and transaction_type = 3', $part_nid));
      $item_total_withdraw_test = db_result(db_query('select sum(quantity_requested - quantity_received) from transactions where part_code_nid =%d and transaction_type = 2', $part_nid));
      $item_total_qty_requested_deposit = db_result(db_query('select sum(quantity_requested) from transactions where part_code_nid =%d and transaction_type = 1', $part_nid));
      $item_quantity_on_hand = $item_total_deposit - ( $item_total_withdraw + $item_total_withdraw_test + $item_total_withdraw_PO);
      // update quantity on hand for item code
      $part_catalog_node = node_load($part_nid);
      $part_catalog_node->field_part_qty_on_hand[0]['value'] = $item_quantity_on_hand;
      $part_catalog_node->field_part_requisitioned[0]['value'] = $item_total_qty_requested_deposit;
      node_save($part_catalog_node, 'true');
    }
  }
}

/**
 * handles calculation needed for quotation in presave op
 * purchased or taken from store .
 * 
 * @param $node
 *   quotation 
 */
function _handle_quotation_calculations(&$node) {
  if (variable_get('maintenance_cost_functionality_in_quotation', 0) == 1){ 
    $maintenance_cost = 0;
    $i = 0;
    $equipment_priority = db_result(db_query('SELECT field_equipment_priority_value FROM content_type_medical_equipment WHERE nid = %d', $node->field_quotation_equipment[0]['nid']));
    $cost_of_client = db_result(db_query('SELECT client.field_client_cost_value FROM content_type_medical_equipment equipment INNER JOIN content_type_client client ON (equipment.field_equipment_client_nid = client.nid) WHERE equipment.nid = %d', $node->field_quotation_equipment[0]['nid']));
    foreach ($node->field_quotation_estimated_workin as $k => $v) {
      $cost_of_employee_training = db_result(db_query('SELECT employee.field_employee_cost_working_hour_value FROM node INNER JOIN content_type_hospital_employee employee USING (nid) WHERE node.uid = %d', $node->field_quotation_assigned_employe[$i]['uid']));
      $estimated_working_hours = $node->field_quotation_estimated_workin[$i]['value'];
      $maintenance_cost = $maintenance_cost + $estimated_working_hours * $cost_of_employee_training * $equipment_priority * $cost_of_client;
      $i++;
    }
    $node->field_quotation_maintenance_cost[0]['value'] = $maintenance_cost;
  }
  $i = 0; 
  if (arg(1) == 'add' || arg(2) == 'edit') { // first time adding spare part

    $total_buy = 0;
    $total_maintenance = 0;
    $total_price = 0;
    $i = 0;
    if (empty($node->field_quotation_unit_price[0]['value'])) return;
    foreach ($node->field_quotation_unit_price as $k => $v) {
      $node->field_quotation_item_total[$i]['value'] = (($v['value'] * $node->field_quotaion_items_count[$i]['value'] ) - (($v['value'] * $node->field_quotaion_items_count[$i]['value'] * $node->field_quotation_discount[$i]['value'])/ 100));
      $total_price = $total_price + (($v['value'] * $node->field_quotaion_items_count[$i]['value'] ) - (($v['value'] * $node->field_quotaion_items_count[$i]['value'] * $node->field_quotation_discount[$i]['value'])/ 100));
      if($node->field_quotation_type[$i]['value'] == 0) {
        $total_buy = $total_buy + ($v['value'] * $node->field_quotaion_items_count[$i]['value'] );
      }
      elseif ($node->field_quotation_type[$i]['value'] == 1){
        $total_maintenance = $total_maintenance + ( $v['value'] * $node->field_quotaion_items_count[$i]['value'] );
      }
     $i++;

    }
    $node->field_qutation_total[0]['value']= $total_price;
    $node->field_quotation_total_buy[0]['value']= $total_buy;
    $node->field_quotation_total_maintenanc[0]['value']= $total_maintenance;
  }

    $job_node = node_load($node->field_quotation_job[0]['nid']);
    _transfer_quotation_info_to_job($job_node, $node);
}


function  _transfer_quotation_info_to_job($job_node, $node) {
  $job_node->field_job_m_situation = $node->field_quotation_m_situation;
  node_save($job_node);
  drupal_set_message("Call's last sitaution has been saved in the call"); 
}


/**
 * handles node save for quotation or request for parts to be
 * purchased or taken from store .
 * 
 * @param $node
 *   quotation 
 */
function _handle_quotation_withdraw_spare_parts(&$node) {
  if (variable_get('spare_part_store', 0) == 1){
    return;
  } 
  /*************** Either normal withdraw operation or withdraw for testing *************/
  $i = 0; 
  if (arg(1) == 'add' || arg(2) == 'edit') { // first time adding spare part
    $total_buy = 0;
    $total_maintenance = 0;
    $total_price = 0;
    $i = 0;
    $maintenance_type = $node->field_quotation_op_type[0]['value'];
    //'if (empty($node->field_quotation_unit_price[0]['value']) && ($maintenance_type !=1 && $maintenance_type !=4) ) return;
    foreach ($node->field_quotation_item_code as $k => $v) {
      // and foreach items in the spare parts section insert row in store and transaction
   
      if ($maintenance_type == 1) {  // request spart for withdraw no contract or warranty or maintenance contract
        $part_code_nid = $node->field_quotation_item_code[$i]['nid'];
        $qty_requested = $node->field_quotaion_items_count[$i]['value'];
        $item_pirce = $node->field_quotation_unit_price[$i]['value'];
        $org_id = $node->field_quotation_hospital[0]['nid'];
        $op_type = Quantity_Withdraw;
        _upsert_spare_part_item($part_code_nid, 0, $qty_requested, $item_price, $op_type, $org_id, $node->nid) ;
      }
      elseif ($node->field_quotation_op_type[0]['value'] == 4) { // request spare part for testing
        $part_code_nid = $node->field_quotation_item_code[$i]['nid'];
        $qty_requested = $node->field_quotaion_items_count[$i]['value'];
        $qty_returned = $node->field_quotation_returned_qty[$i]['value'];
        $item_pirce = $node->field_quotation_unit_price[$i]['value'];
        $org_id = $node->field_quotation_hospital[0]['nid'];
        $op_type = Quantity_For_Testing;
        _upsert_spare_part_item($part_code_nid, $qty_returned, $qty_requested, $item_price, $op_type, $org_id, $node->nid) ;
      }
      $i++;

    }
  }

  // check for quotation node status 
  // if there work order nid available 
  /*if (!empty($node->field_quotation_service_report[0]['nid'])){
    $work_order_node = node_load($node->field_quotation_service_report[0]['nid']);
    $work_order_node->field_job_status = $node->field_job_status;
    node_save($work_order_node);
  }
  elseif(!empty($_GET['quotation_service_report'])) {
    $work_order_node = node_load($_GET['quotation_service_report']);
    $work_order_node->field_job_status = $node->field_job_status;
    node_save($work_order_node);  
  }
  elseif(!empty($_GET['quotation_job'])) {
    $job_node = node_load($_GET['quotation_job']);
    $job_order_node->field_job_status = $node->field_job_status;
    node_save($job_node);  
  } 

  elseif(!empty($node->)) {
    $work_order_node = node_load($_GET['quotation_service_report']);
    $work_order_node->field_job_status = $node->field_job_status;
    node_save($work_order_node);  
  }*/
}

/**
 * handles import code presave op - to handle calculations
 * 
 * @param $node
 *   importcode node
 */
function _handle_import_code_validations(&$node) {
  _validate_part_name_description($node);
  $collect_nid = array();
  $count_array_of_data = count($node->field_importcode_item_code);
  for($i = 0; $i < $count_array_of_data; $i++){
    $get_nid = $node->field_importcode_item_code[$i]['nid'];
    if (in_array($get_nid, $collect_nid)) {
      form_set_error("", $message = 'You should not choose the same part more than one time', $reset = FALSE);
    }
    else{
      $collect_nid[] = $get_nid;
    }
  /*  $requested_quantity = $node->field_importcode_items_count[$i]['value'];
    $item_code_nid = $node->field_importcode_item_code[$i]['nid'];
    $result = db_query("select field_part_qty_on_hand_value from  content_type_part_catalog where nid = $item_code_nid");
    if ($data = db_fetch_object($result)){
      $quantity_on_hand = $data->field_part_qty_on_hand_value;
      if($requested_quantity > $quantity_on_hand) {
        form_set_error("", $message = 'This operation cannot be done,the quantity on hand of this item is ' . $quantity_on_hand, $reset = FALSE);
      }
    }
    else{
             //the operation will be done
    }
    */
  }
}

/**
 * handles delete operation for PO to calculate
 * part catalog's quantity on hand .
 * related to transactions
 * @param $node
 *   importcode node
 */
function _handle_import_code_delete(&$node){
  $po_nid = $node->nid;
  $i = 0;
  foreach ($node->field_importcode_item_code as $key => $value){
    $part_nid = $node->field_importcode_item_code[$i]['nid'];
    $query = db_query('DELETE FROM transactions WHERE transaction_node_nid = %d AND part_code_nid = %d', $po_nid, $part_nid);
    $i++;
    $item_total_deposit  = db_result(db_query('select sum(quantity_received) from transactions where part_code_nid =%d and transaction_type = 1', $part_nid));
    $item_total_withdraw = db_result(db_query('select sum(quantity_requested) from transactions where part_code_nid =%d and transaction_type = 0', $part_nid));
    $item_total_withdraw_PO = db_result(db_query('select sum(quantity_received) from transactions where part_code_nid =%d and transaction_type = 3', $part_nid));
    $item_total_withdraw_test = db_result(db_query('select sum(quantity_requested - quantity_received) from transactions where part_code_nid =%d and transaction_type = 2', $part_nid));
    $item_total_qty_requested_deposit = db_result(db_query('select sum(quantity_requested) from transactions where part_code_nid =%d and transaction_type = 1', $part_nid));
    $item_quantity_on_hand = $item_total_deposit - ( $item_total_withdraw + $item_total_withdraw_test + $item_total_withdraw_PO);
    // update quantity on hand for item code
    $part_catalog_node = node_load($part_nid);
    $part_catalog_node->field_part_qty_on_hand[0]['value'] = $item_quantity_on_hand;
    $part_catalog_node->field_part_requisitioned[0]['value'] = $item_total_qty_requested_deposit;
    node_save($part_catalog_node, 'true');
  }
}


 
/**
 * handles import code presave op - to handle calculations
 * 
 * @param $node
 *   importcode node
 */
function _handle_import_code_calculations(&$node) {
 // in case in the node add form
  $total_buy = 0;
  $total_maintenance = 0;
  $total_price = 0; 
  $i = 0; 
  if (arg(1) == 'add' || arg(2) == 'edit') { // first time adding spare part

    foreach ($node->field_importcode_unit_price as $k => $v) {
      $total_price = $total_price +  (($v['value'] * $node->field_importcode_qty_received[$i]['value'] ) - (($v['value'] * $node->field_importcode_qty_received[$i]['value'] * $node->field_importcode_discount[$i]['value'])/ 100));
      if($node->field_importcode_type[$i]['value'] == 0) {
        $total_buy = $total_buy + ($v['value'] * $node->field_importcode_qty_received[$i]['value'] );
      }
      elseif ($node->field_importcode_type[$i]['value'] == 1){
        $total_maintenance = $total_maintenance + ( $v['value'] * $node->field_importcode_qty_received[$i]['value'] );
      }
      $i++;
    }
    $node->field_importcode_total[0]['value']= $total_price;
    $node->field_importcode_total_buy[0]['value']= $total_buy;

  }

}

/**
 * handles invoice presave op - to handle calculations
 *
 * @param $node
 *   invoice node
 */
function _handle_invoice_total_calculations(&$node) {
  $total_price = 0;
  $total_qty_requested = 0;
  $i = 0;
  foreach ($node->field_invoice_unit_price as $k => $v) {
    $total_price = $total_price +  (($node->field_invoice_unit_price[$i]['value'] * $node->field_invoice_qty_recieved[$i]['value'] ) - (($node->field_invoice_unit_price[$i]['value'] * $node->field_invoice_qty_recieved[$i]['value'] * $node->field_invoice_discount[$i]['value'])/ 100));
    $total_qty_requested = $total_qty_requested + (($node->field_invoice_unit_price[$i]['value'] * $node->field_invoice_qty_requested[$i]['value'] ) - (($node->field_invoice_unit_price[$i]['value'] * $node->field_invoice_qty_requested[$i]['value'] * $node->field_invoice_discount[$i]['value'])/ 100));
    $i++;
  }
  $node->field_invoice_total[0]['value'] = $total_price;
  $total_other_invoices_related_to_po = 0;
  $query = db_query('SELECT field_invoice_total_value FROM content_type_invoice WHERE field_invoice_po_number_nid = %d AND nid != %d', $node->field_invoice_po_number[0]['nid'], $node->nid);
  while ($result = db_fetch_object($query)){
    $total_other_invoices_related_to_po += $result->field_invoice_total_value;
  } 
  $invoice_total = $node->field_invoice_total[0]['value'];
  $residual = $total_qty_requested - ( $total_other_invoices_related_to_po + $invoice_total);
  global $original_invoice_node;
  $i = 0;
  foreach ($node->field_invoice_unit_price as $k => $v) {
    if ($node->field_invoice_unit_price[$i]['value'] != $original_invoice_node->field_invoice_unit_price[$i]['value'] || $node->field_invoice_qty_recieved[$i]['value'] != $original_invoice_node->field_invoice_qty_recieved[$i]['value']){
      $node->field_invoice_residual[0]['value'] = $residual;
    }
    if (arg(1) == 'add'){
      $node->field_invoice_residual[0]['value'] = $residual;
    }
  }
}

/**
 * insert invoice info into maintenance cost table
 * NEEDED for Maintenance income report
 */
function _handle_maintenance_income(&$node){
  $invoice_no = $node->title;
  $invoice_issue_date = $node->field_invoice_issue_date[0]['value'];
  $equipment_nid = $node->field_invoice_medical_equipment[0]['nid'];
  if (!empty($invoice_no) && !empty($equipment_nid)){
    $from_date = $invoice_issue_date;
    $to_date = date("Y-m-t", $from_date);
    $to_date = strtotime($to_date);
    $month_cost = $node->field_invoice_total[0]['value'];
    if (arg(1) == 'add'){
      $query = db_query('INSERT INTO equipmentmaintenance_cost (equipment_nid, contract_nid, contract_type, from_date, to_date, month_cost) VALUES (%d, %d, 4, %d, %d, %d)', $equipment_nid, $node->nid, $from_date, $to_date, $month_cost);
    }
    else if (arg(2) == 'edit'){
      $query = db_query('SELECT contract_type FROM equipmentmaintenance_cost WHERE contract_nid = %d', $node->nid);
      if ($result = db_fetch_object($query)){
        $update = db_query('UPDATE equipmentmaintenance_cost SET from_date = %d, to_date = %d, month_cost = %d WHERE contract_nid = %d AND contract_type = 4', $from_date, $to_date, $month_cost, $node->nid);
      }
      else{
        $query = db_query('INSERT INTO equipmentmaintenance_cost (equipment_nid, contract_nid, contract_type, from_date, to_date, month_cost) VALUES (%d, %d, 4, %d, %d, %d)', $equipment_nid, $node->nid, $from_date, $to_date, $month_cost);
      }
    }
  }
}

/**
 * handles node save for import code and maitenance
 * 
 * @param $node
 *   importcode node
 */
function _handle_import_code_save(&$node) {
  if(variable_get('create_invoice_based_on_po', 0) != 1){
    $i = 0;
    if (arg(1) == 'add' || arg(2) == 'edit') { // first time adding spare part
      foreach ($node->field_importcode_unit_price as $k => $v) {
        // and foreach items in the spare parts section insert row in store and transaction
        $part_code_nid = $node->field_importcode_item_code[$i]['nid'];
        $qty_requested = $node->field_importcode_items_count[$i]['value'];
        $qty_received = $node->field_importcode_qty_received[$i]['value'];
        $item_price = $node->field_importcode_unit_price [$i]['value'];
        $org_id = $node->field_importcode_hospital[0]['nid'];

        $quotation_op_type = _get_quotation_op_type($node->field_import_code_quotation_id[0]['nid']);
        if ($quotation_op_type == QUOTATION_DEPOSIT) {
          $op_type = Quantity_Deposit;
        }
        else{
          $op_type = PO_Withdraw;
        }
        _upsert_spare_part_item($part_code_nid, $qty_received, $qty_requested, $item_price, $op_type, $org_id, $node->nid) ;
        $i++;
      }
    }
  }
}





function _get_quotation_op_type($quotation_nid) {
  $op_type = db_result(db_query('select field_quotation_op_type_value from content_type_quotation where nid=%d ', $quotation_nid));
  return $op_type;
}

/**
 * insert or update the part 
 */
function _upsert_spare_part_item($part_code_nid, $qty_received,$qty_requested, $item_price, $op_type, $org_id, $nid) {
  // check if there is already exist an item with that part_code_nid
  global $user; 
  $transaction_nid = db_result(db_query('select transaction_node_nid from {transactions} where transaction_node_nid=%d and part_code_nid = %d ', $nid, $part_code_nid));

  /******* calculate quantity on hand before any operations ******************/

  $item_total_deposit  = db_result(db_query('select sum(quantity_received) from transactions where part_code_nid =%d and transaction_type = 1', $part_code_nid));
  $item_total_withdraw = db_result(db_query('select sum(quantity_requested) from transactions where part_code_nid =%d and transaction_type = 0', $part_code_nid));
  $item_total_withdraw_PO = db_result(db_query('select sum(quantity_received) from transactions where part_code_nid =%d and transaction_type = 3', $part_code_nid));
  $item_total_withdraw_test = db_result(db_query('select sum(quantity_requested - quantity_received) from transactions where part_code_nid =%d and transaction_type = 2', $part_code_nid));
 
  $item_quantity_on_hand = $item_total_deposit - ( $item_total_withdraw + $item_total_withdraw_test + $item_total_withdraw_PO);
  $item_total_qty_requested_deposit = 0;

  /***************************************************************************/
  

  if(!empty($transaction_nid)) {
   
    //print $item_quantity_on_hand; exit();
    $trans = db_query("Update {transactions} set quantity_on_hand= %d, quantity_received =%d, quantity_requested=%d, transaction_type=%d, user_id=%d, op_type='%s', created=%d where transaction_node_nid = %d and part_code_nid = %d", $item_quantity_on_hand, $qty_received, $qty_requested, $op_type, $user->uid, $op_type, strtotime('now'), $nid, $part_code_nid);

    /******** calculate quantity on hand after the transaction ****************/
    $item_total_deposit  = db_result(db_query('select sum(quantity_received) from transactions where part_code_nid =%d and transaction_type = 1', $part_code_nid));
    $item_total_withdraw = db_result(db_query('select sum(quantity_requested) from transactions where part_code_nid =%d and transaction_type = 0', $part_code_nid));
    $item_total_withdraw_PO = db_result(db_query('select sum(quantity_received) from transactions where part_code_nid =%d and transaction_type = 3', $part_code_nid));
 
    $item_total_withdraw_test = db_result(db_query('select sum(quantity_requested - quantity_received) from transactions where part_code_nid =%d and transaction_type = 2', $part_code_nid));
    $item_total_qty_requested_deposit = db_result(db_query('select sum(quantity_requested) from transactions where part_code_nid =%d and transaction_type = 1', $part_code_nid));
    $item_quantity_on_hand = $item_total_deposit - ( $item_total_withdraw + $item_total_withdraw_test + $item_total_withdraw_PO );

  }
  else {

    $trans = db_query("INSERT INTO {transactions} VALUES(DEFAULT,%d,%d,%d,%d,'%s',%d, %d, %d, %d)",$part_code_nid, $qty_received, $op_type, $user->uid, $op_type, strtotime('now'), $nid, $qty_requested, $item_quantity_on_hand);

    /******** calculate quantity on hand after the transaction ****************/
    $item_total_deposit  = db_result(db_query('select sum(quantity_received) from transactions where part_code_nid =%d and transaction_type = 1', $part_code_nid));
    $item_total_withdraw = db_result(db_query('select sum(quantity_requested) from transactions where part_code_nid =%d and transaction_type = 0', $part_code_nid));
    $item_total_withdraw_PO = db_result(db_query('select sum(quantity_received) from transactions where part_code_nid =%d and transaction_type = 3', $part_code_nid));
    $item_total_withdraw_test = db_result(db_query('select sum(quantity_requested - quantity_received) from transactions where part_code_nid =%d and transaction_type = 2', $part_code_nid));
    $item_total_qty_requested_deposit = db_result(db_query('select sum(quantity_requested) from transactions where part_code_nid =%d and transaction_type = 1', $part_code_nid));
 
    $item_quantity_on_hand = $item_total_deposit - ( $item_total_withdraw + $item_total_withdraw_test + $item_total_withdraw_PO);
    
  }
  // update quantity on hand for item code 
  $part_catalog_node = node_load($part_code_nid);
  $part_catalog_node->field_part_qty_on_hand[0]['value'] = $item_quantity_on_hand;
  $part_catalog_node->field_part_requisitioned[0]['value'] = $item_total_qty_requested_deposit;
  node_save($part_catalog_node, 'true');
}


/**
 * get the company that is maintenaing this equipment
 * using nid of equipment
 */
function _get_company_by_equipment_nid ($equipment_nid) {
  $company_nid = 'all';
  $query = 'select distinct(field_company_name1_nid) as company_nid from content_type_maintainancecontract m inner join content_type_job job on job.field_job_medical_equip_nid = m.field_m_contract_medical_equip_nid where m.field_m_contract_medical_equip_nid =%d' ;
  $result = db_query($query, $equipment_nid);
  if ($row = db_fetch_array($result)) {
    $company_nid = $row['company_nid'];
  }
  return $company_nid;
}


/**
 * this function is called when modifiing information of
 * work order or service report and transfer to the call or job
 */
function _transer_service_report_info_to_job($job_node, $service_report_node) {
  $job_node->field_job_item_code = $service_report_node->field_wrk_order_item_code;
  $job_node->field_job_part_name = $service_report_node->field_wrk_order_part_name;
  $job_node->field_job_requested_quantity = $service_report_node->field_wrk_order_requested_qty;
  $job_node->field_job_work_hours = $service_report_node->field_wrk_order_working_hours;
  $job_node->field_job_traveling_hours = $service_report_node->field_wrk_order_travelling_hours;
  $job_node->field_job_medical_equip = $service_report_node->field_service_report_equip;
  $job_node->field_job_spare_part = $service_report_node->field_job_spare_part;
  $job_node->field_job_reason = $service_report_node->field_job_reason;
  $job_node->field_job_description = $service_report_node->field_job_description;
  $job_node->field_spare_part_used = $service_report_node->field_spare_part_used;
  $job_node->field_job_comment = $service_report_node->field_job_comment;
  $job_node->field_end_of_work = $service_report_node->field_end_of_work;
  $job_node->field_job_status = $service_report_node->field_job_status;
  //$job_node->field_job_assigned_user = $service_report_node->field_wrk_order_reassigned_emplo;
  $job_node->field_job_company_name = $service_report_node->field_job_company_name;
  $job_node->field_job_mean_of_contact = $service_report_node->field_job_mean_of_contact;
  $job_node->field_job_notify_company_date = $service_report_node->field_job_notify_company_date;
  $job_node->field_job_notify_comp_hos_person = $service_report_node->field_job_notify_comp_hos_person;
  $job_node->field_job_m_situation = $service_report_node->field_wrk_order_m_situation;
  $job_node->field_job_install_sp_date = $service_report_node->field_wrk_order_install_sp_date;
  $job_node->field_job_workflow_approval = $service_report_node->field_job_workflow_approval;
  $job_node->field_job_workflow_approval_cmnt = $service_report_node->field_job_workflow_approval_cmnt;
  $job_node->field_job_expected_date_of_visit = $service_report_node->field_job_another_visit_date;
  //$job_node->field_job_first_action_status[0]['value'] = 2;//$service_report_node->field_job_another_visit_date;
  //if($job_node->field_job_status[0]['value'] == )
  //print_r($job_node);exit();
  node_save($job_node);
  
  drupal_set_message(t('Transfering Work Order report information to the target job id :'). $job_node->title);
  //print_r($service_report_node); exit();
}


/**
 * this function is called when modifiing information of
 * import code and transfer to the service report
 */
function _transer_importcode_info_to_service_report($service_report_node, $importcode_node){
  /*$service_report_node->field_job_spare_part = $importcode_node->field_job_spare_part;
  $service_report_node->field_job_reason = $importcode_node->field_job_reason;
  $service_report_node->field_job_description = $importcode_node->field_job_description;
  $service_report_node->field_spare_part_used = $importcode_node->field_spare_part_used;
  $service_report_node->field_job_comment = $importcode_node->field_job_comment;
  $service_report_node->field_end_of_work = $importcode_node->field_end_of_work;
  $service_report_node->field_job_status = $importcode_node->field_job_status;
  $service_report_node->field_job_company_name = $importcode_node->field_job_company_name;
  $service_report_node->field_job_mean_of_contact = $importcode_node->field_job_mean_of_contact;
  $service_report_node->field_job_notify_company_date = $importcode_node->field_job_notify_company_date;
  $service_report_node->field_job_notify_comp_hos_person = $importcode_node->field_job_notify_comp_hos_person;
  */
  node_save($service_report_node);
  drupal_set_message(t('Transfering Service report information to the target service report id :'). $service_report_node->title);
  //print_r($service_report_node); exit();
}

/**
 * this function is called when modifiing information of
 * importcode and transfer to the call or job
 */
function _transer_importcode_info_to_job($job_node, $importcode_node) {
  $job_node->field_job_spare_part = $importcode_node->field_job_spare_part;
  $job_node->field_job_reason = $importcode_node->field_job_reason;
  $job_node->field_job_description = $importcode_node->field_job_description;
  $job_node->field_spare_part_used = $importcode_node->field_spare_part_used;
  $job_node->field_job_comment = $importcode_node->field_job_comment;
  $job_node->field_end_of_work = $importcode_node->field_end_of_work;
  $job_node->field_job_status = $importcode_node->field_job_status;
  $job_node->field_job_company_name = $importcode_node->field_job_company_name;
  $job_node->field_job_mean_of_contact = $importcode_node->field_job_mean_of_contact;
  $job_node->field_job_notify_company_date = $importcode_node->field_job_notify_company_date;
  $job_node->field_job_notify_comp_hos_person = $importcode_node->field_job_notify_comp_hos_person;
  node_save($job_node);
  drupal_set_message(t('Transfering Service report information to the target job id :'). $job_node->title);
  //print_r($service_report_node); exit();
}


/**
 * return quotation nid using job_nid
 */
function _get_quotation_nid_by_job_nid($job_nid) {
  $quotation_nid = 0;
  $sql = "select nid as job_nid from content_type_quotation where field_quotation_job_nid=%d";
  $result = db_query($sql, $job_nid);
  if($row = db_fetch_array($result)) {
    $quotation_nid = $row['job_nid'];
  }
  return $quotation_nid;
}


/**
 * return links of operation in the block
 * displayed in the job / call 
 */
function _return_operations_on_job () {
  //if (_get_node_type(arg(1)) == 'job') {
  global $current_node_type;
  if ($current_node_type == 'job' && arg(2) !='edit') {
    $job_node = node_load(arg(1));
    $equipment_nid = $job_node->field_job_medical_equip[0]['nid'];
    $client_nid = $job_node->field_job_client[0]['nid'];
    $quotation_type = $job_node->field_job_quotation_type[0]['value'];
    $job_nid = arg(1);
    $quotation_nid = _get_quotation_nid_by_job_nid ($job_nid);
    if($quotation_nid !=0) {
      $new_importcode_add_link =  url('node/add/importcode', array('query' => array('importcode_equipment' =>  $equipment_nid, 'importcode_job' => $job_nid, 'import_code_quotation_id' => $quotation_nid))) ;
      $import_link = "<li> <a href='".$new_importcode_add_link ."' >". t('New Purchase Order')."</a></li>";
    }
    else {
      $import_link = '';
    }
    global $cmms_type;
    if ($cmms_type == INDIVIDUAL_HOSPITAL || $cmms_type == HEIRARCHIAL_HOSPITALS ) {
    
      $new_add_link =  url('node/add/service-report', array('query' => array('service_report_equip' =>  $equipment_nid, 'service_report_job' => $job_nid))) ;
      $new_quotation_add_link =  url('node/add/quotation', array('query' => array( 'quotation_equipment' =>  $equipment_nid,  'quotation_job' =>  $job_nid, 'op' => 2))) ;
    }
    else {
      $new_add_link =  url('node/add/service-report', array('query' => array('service_report_equip' =>  $equipment_nid, 'service_report_job' => $job_nid, 'wrk_order_client' =>  $client_nid))) ;
      $internal_wrk_order_link = url('node/add/service-report', array('query' => array('service_report_equip' =>  $equipment_nid, 'service_report_job' => $job_nid, 'wrk_order_client' =>  $client_nid, 'internal_wrk_order' => 1))) ;
      $new_quotation_add_link =  url('node/add/quotation', array('query' => array( 'quotation_equipment' =>  $equipment_nid,  'quotation_job' =>  $job_nid, 'wrk_order_client' =>  $client_nid, 'op'=>2))) ;
    }
    $views_link =  url('job/'.arg(1).'/service_reports');
    $new_add_link_spare =  url('node/add/quotation', array('query' => array(  'quotation_equipment' =>  $equipment_nid,  'quotation_job' =>  $job_nid, 'op' => 1))) ;
    $new_add_link_parts_for_testing =  url('node/add/quotation', array('query' => array(  'quotation_equipment' =>  $equipment_nid, 'quotation_job' =>  $job_nid, 'op' => 4))) ;
    
    $search_quotation_link = url('job/'.arg(1).'/quotations');
    $search_request_parts_link = url('job/' .arg(1). '/request_parts');
    if ($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY ){
      $other_links = "<li> <a href='".$internal_wrk_order_link ."' >". t('New Internal Work Order')."</a></li>
                      <li> <a href='".$new_add_link_spare."' >". t('Request parts from store')."</a></li>
                      <li> <a href='".$new_add_link_parts_for_testing."'>". t('Request spare part testing')."</a></li>";
    }
    $search_po_link = url('job/' .arg(1). '/po');
    $output = "
           <ul class='unstyled profile-nav '> 
              <li> <a href='".$new_add_link ."' >". t('New Work Order')."</a></li>
              ". $other_links ." 
              <li> <a href='".$new_quotation_add_link ."' >". t('New Quotation')."</a></li>
              <li> <a href='".$views_link ."' >". t('Work Orders')."</a></li>
              <li> <a href='".$search_quotation_link ."' >". t('Quotations')."</a></li>
              <li> <a href='".$search_request_parts_link ."' >". t('Request parts')."</a></li>
              <li> <a href='".$search_po_link ."' >". t('Purchase orders')."</a></li>
           </ul> 
          ";
 
    return $output;
  }
}

/**
 * return the medical equipment type of maitnenace stat 
 * under warranty, under maintenance contract, under extended warranty
 */

function _return_equipment_maintenance_contract_status ($equipment_nid) {
 $query = "select field_equipment_m_contract_stat_value from content_type_medical_equipment where nid=%d";
 return db_result(db_query($query, $equipment_nid));
}
/**
 * return links of operation in the block
 * displayed in the work order / service report 
 */
function _return_operations_on_service_report() {
  //if (_get_node_type(arg(1)) == 'service_report') {
  global $current_node_type;
    
  if ($current_node_type == 'service_report') {
    $service_report_node = node_load(arg(1));
    $equipment_nid = $service_report_node->field_service_report_equip[0]['nid'];
    $job_nid = $service_report_node->field_service_report_job[0]['nid'];
    $new_add_link =  url('node/add/quotation', array('query' => array(  'quotation_equipment' =>  $equipment_nid, 'quotation_service_report' => arg(1), 'quotation_job' =>  $job_nid, 'op' => 2))) ;

    $maintenance_contract_status = _return_equipment_maintenance_contract_status ($equipment_nid);

    if (!empty($maintenance_contract_status)) {
      //$op_type = $maintenance_contract_status;
    }
    $new_add_link_spare =  url('node/add/quotation', array('query' => array(  'quotation_equipment' =>  $equipment_nid, 'quotation_service_report' => arg(1), 'quotation_job' =>  $job_nid, 'op' => 1))) ;
    $views_link =  url('service_report/'.arg(1).'/quotation');
    $new_add_link_parts_for_testing =  url('node/add/quotation', array('query' => array(  'quotation_equipment' =>  $equipment_nid, 'quotation_service_report' => arg(1), 'quotation_job' =>  $job_nid, 'op' => 4))) ;
    if ($cmms_type == MEDICAL_MAINTENANCE_COMPANY || $cmms_type == GENERAL_MAINTENANCE_COMPANY ){
      $other_links = "<li> <a href='".$new_add_link_spare."' >". t('Request parts from store')."</a></li>
                      <li> <a href='".$new_add_link_parts_for_testing."'>". t('Request spare part testing')."</a></li>";
    }
    $output = "
            <ul class='unstyled profile-nav '>
              ".$other_links."
              <li> <a href='".$new_add_link ."' >". t('New Quotation')."</a></li>
              <li> <a href='".$views_link ."' >". t('Quotation Reports')."</a></li>
            </ul>
          ";
 
    return $output;
  }
}



/**
 * return links of operation in the block
 * displayed in the quotation 
 */
function _return_operations_on_quotation() {
  global $current_node_type;
  
  //if (_get_node_type(arg(1)) == 'quotation') {
  if ( $current_node_type == 'quotation') {
    $quotation_node = node_load(arg(1));
    $quotation_op_type = $quotation_node->field_quotation_op_type[0]['value'];
    if ($quotation_op_type == 1 || $quotation_op_type == 4) return;
    $equipment_nid = $quotation_node->field_quotation_equipment[0]['nid'];
    $job_nid = $quotation_node->field_quotation_job[0]['nid'];
    $new_add_link =  url('node/add/importcode', array('query' => array('importcode_equipment' =>  $equipment_nid, 'importcode_job' => $job_nid , 'import_code_quotation_id' => arg(1)))) ;
    $views_link =  url('service_report/'.arg(1).'/quotation');
    $import_code_on_quotation_id = arg(1);
    $result = db_query("select field_quotation_op_type_value from content_type_quotation where nid = %d", $import_code_on_quotation_id);
    /*if ($row = db_fetch_object($result)){
      $operation_type_value = $row->field_quotation_op_type_value;
      if ($operation_type_value != 6){
        //drupal_goto("http://192.168.1.111/opencis_mohamed/node/$import_code_on_quotation_id");
      }
      else{


      }
    }*/
        $output = "
            <ul class='unstyled profile-nav '>
              <li> <a  href='".$new_add_link ."' >". t('New Purchase Order')."</a></li>
              <li> <a   href='".$views_link ."' >". t('Purchase Order')."</a></li>
            </ul>
          ";
    return $output;
 }
}



/**
 * return links of operation in the block
 * displayed in the equipment 
 */
function _return_operation_on_equipment() {
  global $current_node_type;

  //if (_get_node_type(arg(1)) == 'medical_equipment') {
  if ($current_node_type == 'medical_equipment') {
    //$equipment_node = node_load(arg(1));
    $equipment_nid = arg(1);
    //$job_nid = $quotation_node->field_quotation_job[0]['nid'];
    $equipment_node = node_load(arg(1));
    $equipment_ar = $equipment_node->field_equipment_name[0]['value'];
    $equipment_en = $equipment_node->field_equ_name_english[0]['value'];
    $client = $equipment_node->field_equipment_client[0]['nid'];
    $new_job_add_link =  url('node/add/job/'.$equipment_nid , array('query' => array('equipment_ar' => $equipment_ar, 'equipment_en' => $equipment_en , 'client' => $client))) ;
    $new_effeciency_record__link =  url('add/efficiency_record/'.$equipment_nid) ;
    $new_scraping_add_link =  url('node/add/scraping/'.$equipment_nid) ;
    //$new_maintenancecontract_add_link =  url('node/add/maintainancecontract/'.$equipment_nid) ;
    //<li> <a   href='".$new_maintenancecontract_add_link ."' >". t('New Maintenance Contract')."</a></li>
    $new_servicereport_add_link =  url('node/add/service-report', array('query' => array('service_report_equip' => $equipment_nid))) ;
    $output = " 
        <ul class='unstyled profile-nav '>
                              
                           
        <li> <a   href='".$new_job_add_link ."' >". t('New Call')."</a></li>
              <li> <a   href='".$new_effeciency_record__link ."' >". t('New Effiency Record')."</a></li>
              <li> <a  href='".$new_scraping_add_link ."' >". t('Scrape Equipment')."</a></li>
              </ul>
              ";
        
            //<li> <a href='".$new_servicereport_add_link ."' >". t('New Service Report')."</a></li>
    return $output; 
  }
}



/**
 * return links of reports in the block
 * displayed in the equipment 
 */
function _return_equipment_list_views_links() {
  global $current_node_type;

  //if (_get_node_type(arg(1)) == 'medical_equipment') {
  if ($current_node_type == 'medical_equipment') {
  //global $user;
  //$hospital_nid = _get_user_working_hospital($user->uid);
  global $hospital_nid;
  if(is_numeric(arg(1)) && arg(2) == 'revisions') {
    $equipment_node = node_load(arg(1), arg(3));
    $hospital_nid =  $equipment_node->field_medical_equip_hospital[0]['nid'];
  }
  
  $equipment_nid = arg(1);///$equipment_node->field_medical_equip_hospital[0]['nid'];
  $jobs_count =  "<span>". _get_jobs_count($equipment_nid) ."</span>" ;
  $service_reports_count = "<span>".  _get_service_reports_count($equipment_nid) ."</span>"  ;
  $quotations_count = "<span>". _get_quotations_count($equipment_nid) ."</span>" ;
  $spare_part_transactions_count = "<span>". _get_spare_part_transactions_count($equipment_nid) ."</span>" ;
  $import_codes_count = "<span>". _get_import_codes_count($equipment_nid) ."</span>"  ;
  $mcontracts_count = "<span>".  _get_mcontracts_count($equipment_nid) ."</span>"  ;
  global $language; $lang_name = $language->language; 
  if ($lang_name !='ar') {
 
   echo '<ul class="unstyled profile-nav ">';

    echo '<li>';
    print l("    Calls $jobs_count",'equipment/'.arg(1).'/'.$hospital_nid.'/jobs', array('html' => true ,   ));
    echo '</li>';

    echo '<li>';
    print l("    Work Orders $service_reports_count",'equipment/'.arg(1).'/service_reports' , array('html' => true ,   ));
    echo '</li>';

    echo '<li>';
    print l("    Quotations $quotations_count" ,'equipment/'.arg(1).'/qutation', array('html' => true ,   ));  
    echo '</li>';
    
    echo '<li>';
    print l("    Spare part transactions $spare_part_transactions_count" ,'equipment/'.arg(1).'/spare_part_transactions', array('html' => true ,   ));
    echo '</li>';

    echo '<li>';
    print l("     Purchase Orders $import_codes_count" ,'equipment/'.arg(1).'/import_codes', array('html' => true ,   ));  
    echo '</li>';
  

    echo '<li>';
    print l("     Maintainance Contracts $mcontracts_count" ,'equipment/'.arg(1).'/maintainance_contracts', array('html' => true ,   ));  
    echo '</li>';
  

    echo '<li>';
    print l('  Calibrations','equipment/'.arg(1).'/calibrations', array('html' => true ,   ));     echo '</li>';
 
    echo '<li>';
    print l('   Ppms','equipment/'.arg(1).'/ppms', array('html' => true ,   )); 
    echo '</li>';
 
    echo '<li>';
    print l(' Operation Efficiency','equipment/'.arg(1).'/efficiency_records', array('html' => true ,   )); 
    echo '</li> </ul>';


  }
  else {
 echo '<ul class="unstyled profile-nav ">'; 
    echo '<li>';
    print l("     أوامر الشغل $jobs_count",'equipment/'.arg(1).'/'.$hospital_nid.'/jobs' , array('html' => true ,   ));
    echo '</li>';

    echo '<li>';
    print l("     التقارير الفنيه$service_reports_count",'equipment/'.arg(1).'/service_reports' , array('html' => true ,   ));
    echo '</li>';

    echo '<li>';
    print l("     المقايسات$quotations_count" ,'equipment/'.arg(1).'/qutation' , array('html' => true ,   ));  
    echo '</li>';
  
    echo '<li>';
    print l("     أوامر التوريد$import_codes_count" ,'equipment/'.arg(1).'/import_codes' , array('html' => true ,   ));  
    echo '</li>';
  

    echo '<li>';
    print l("     عقد صيانة$mcontracts_count" ,'equipment/'.arg(1).'/maintainance_contracts' , array('html' => true ,   ));  
    echo '</li>';
  

    echo '<li>';
    print l('  المعايرات','equipment/'.arg(1).'/calibrations', array('html' => true ,   ));     echo '</li>';
  
    echo '<li>';
    print l('   الصيانات الدوريه','equipment/'.arg(1).'/ppms', array('html' => true ,   ));  
    echo '<li>';
    print l('  الكفاءة التشغيلية','equipment/'.arg(1).'/efficiency_records', array('html' => true ,   ));     echo '</li>';


   echo '</li></ul>';

   }  
 }
}



/**
 * return operations on PO
 */
function _return_operations_on_po() {
  if (variable_get('create_invoice_based_on_po', 0) == 1){
    global $current_node_type;
    if ($current_node_type == 'importcode') {
      $po_node = node_load(arg(1));
      $equipment = $po_node->field_importcode_equipment[0]['nid'];
      $call = $po_node->field_importcode_job[0]['nid'];
      $quotation = $po_node->field_import_code_quotation_id[0]['nid'];
      $new_add_link =  url('node/add/invoice', array('query' => array('invoice_call' => $call,'invoice_medical_equipment' => $equipment, 'invoice_po_number' => arg(1), 'invoice_quotation_id' => $quotation))) ;
      $output = "
              <ul class='unstyled profile-nav '>
                <li> <a href='".$new_add_link."' >". t('Add Invoice')."</a></li> 
                ".return_invoices_related_to_po(arg(1))."
             </ul>
                ";
      return $output;
    }
  }
}


/**
 * return count & nids of invoices related
 * to specific PO
 */
function return_invoices_related_to_po(){
  $nid = arg(1);
  $query = db_query('SELECT nid FROM content_type_invoice WHERE field_invoice_po_number_nid = %d', $nid);
  $invoice_link = array();
  while ($result = db_fetch_object($query)){
    $invoice_link[] = $result->nid;
  }
  $count_invoice_link = count($invoice_link);
  if ($count_invoice_link != 0){
    $output = "<li> <a href=>". t("Related Invoices ( ". $count_invoice_link." )")."</a></li>";
  }
  foreach($invoice_link as $key => $value){
    $key++;
    $invoice_title = db_result(db_query('SELECT title FROM node WHERE nid = %d', $value));
    $path = url('node/' . $value);
    $output .= "<li> <a href='".$path."' >". t($key.' - Invoice NO. => '.$invoice_title)."</a></li>";
  }
  return $output;
}





/**
 * get count of call/jobs made on specific equipment
 * @param $nid
 *  equipment nid
 */
function _get_jobs_count($nid) {
  $result = db_query('select count(distinct nid) as count from content_type_job where field_job_medical_equip_nid=%d', $nid);
  $row = db_fetch_object($result);
  return $row->count;
}



/**
 * get count of service report/ work orders made on specific equipment
 * @param $nid
 *  equipment nid
 */
function _get_service_reports_count($nid) {
  $result = db_query('select count(distinct nid) as count from content_type_service_report  where  	field_service_report_equip_nid=%d', $nid);
  $row = db_fetch_object($result);
  return $row->count;
}



/**
 * get count of quotations made on specific equipment
 * @param $nid
 *  equipment nid
 */
function _get_quotations_count($nid) {
  $result = db_query('select count(distinct nid) as count from content_type_quotation where field_quotation_equipment_nid =%d AND field_quotation_op_type_value = 2', $nid);
  $row = db_fetch_object($result);
  return $row->count;
}
function _get_spare_part_transactions_count($nid){
  $nid = arg(1);
  $result = db_query('SELECT count(distinct nid) as count FROM content_type_quotation WHERE field_quotation_equipment_nid =%d AND (field_quotation_op_type_value = 1 OR field_quotation_op_type_value = 4)', $nid);
  if ($row = db_fetch_object($result)) {  
    return $row->count;
  }
}


/**
 * get count of import codes made on specific equipment
 * @param $nid
 *  equipment nid
 */
function _get_import_codes_count($nid) {
  $result = db_query('select count(distinct nid) as count from content_type_importcode where  	field_importcode_equipment_nid=%d', $nid);
  $row = db_fetch_object($result);
  return $row->count;
}



/**
 * get count of maintenance contracts made on specific equipment
 * @param $nid
 *  equipment nid
 */
function _get_mcontracts_count($nid) {
  $result = db_query('select count(distinct nid) as count from  content_type_maintainancecontracts inner join content_field_mcontracts_medical_equip using(nid)  where  field_mcontracts_medical_equip_nid=%d', $nid);
  $row = db_fetch_object($result);
  return $row->count;
}



/**
 * returns the argument of hospital/organization
 * to be used in the views used in the system
 */
function _return_assigned_user() {
  global $user;
  $uid = $user->uid;
  if ($uid ==1 || !empty($user->roles[MANAGER])  || !empty($user->roles[SERVICE_MANAGER])  || !empty($user->roles[ADMINSTRATION_MANAGER])
    || !empty($user->roles[SECRETARY]) || !empty($user->roles[SYS_ADMIN]) || !empty($user->roles[GROUP_LEADER]) ) {
    $ret= 'all';
    return $ret;
  }
  else  {
    $ret= $uid;
  }
  return $ret;
}

/**
 * returns the argument of hospital/organization
 * to be used in the views used in the system
 */
function _return_hospital_arg() {
  global $user;
  //$hospital_nid = _get_user_working_hospital($user->uid);

  global $hospital_nid;
  $ret = $hospital_nid;
  if ($user->uid ==1 || in_array("CIS Administrator",$user->roles) || in_array("Manager",$user->roles) || in_array("CIS Manager",$user->roles)) {
    $ret= 'all';
  }
  else if (in_array("Hospital Administrator",$user->roles)) {
    $ret= $hospital_nid;
  }
  return $ret;
}


/**
 * return number of days for specific equipment
 * not working since the last job made on it
 */
function _get_number_of_days_equipment_not_working_and_jobnid($equipment_nid) {
  $return_arr = array();
  $now = time();
  $query = "select job.nid as nid, job.field_requested_date_value as request_date from content_type_job job inner join content_field_job_status status using(nid) where status.field_job_status_value in (0 , 1,4,5,7) and job.field_job_medical_equip_nid= $equipment_nid and job.field_requested_date_value <= $now order by job.field_requested_date_value  ASC limit 1 ";
  //print $query; exit();
  $result = db_query($query);
  if($row = db_fetch_array($result)) {
    $number_of_days_equipment_not_working = round(abs($row['request_date'] - $now) / (60*60*24)) ; 
    $job_nid = $row['nid'];
    $return_arr['number_of_days'] = $number_of_days_equipment_not_working;
    $return_arr['jobnid'] = $job_nid;
  }
  return $return_arr;
}


/**
 * used for some regular expression operation
 * need to be reviewed to see where it is being used
 */
function js_str($s) {
    return '"' . addcslashes($s, "\0..\37\"\\") . '"';
}

/**
 * used by the previouse function to be used
 * in javascript file script
 */
function js_array($array){
    $temp = array_map('js_str', $array);
    return '[' . implode(',', $temp) . ']';
}


/**
 * Ajax function to return the array of data to be displayed
 * in the chart graph
 * @return array of defect results
 */
function _get_defects_percentages_data() {
  global $user;
  if (arg(0) == 'dashboard-hospital' && is_numeric(arg(2))) {
    $hospital_nid = arg(2);
  }
  else {
    //$hospital_nid = _get_user_working_hospital($user->uid);
    global $hospital_nid;
  }


  $chart_data_array = array ();
  $year = date('Y', strtotime("Now"));
  $query = "select * from defects_percentage where hospital_id =%d and year = %d";
  $result = db_query($query, $hospital_nid, $year);
  if ($row =db_fetch_array($result)) {
    $chart_data_array = array (
      '1' => $row['mon_jan'] * 10,
      '2' => $row['mon_feb'] * 10,
      '3' => $row['mon_mar'] * 10,
      '4' => $row['mon_apr'] * 10,
      '5' => $row['mon_may'] * 10,
      '6' => $row['mon_jun'] * 10,
      '7' => $row['mon_jul'] * 10,
      '8' => $row['mon_aug'] * 10,
      '9' => $row['mon_sep'] * 10,
      '10' => $row['mon_oct'] * 10,
      '11' => $row['mon_nov'] * 10,
      '12' => $row['mon_dec'] * 10,
    );
  }
 //$js_array = json_encode($php_array);
  $javascript = "  var  defects = [
                [1, " . $row['mon_jan'] . "   ],
                [2, " . $row['mon_feb'] . "  ] ,
                [3, " . $row['mon_mar'] . "  ],
                [4," . $row['mon_apr'] . "  ],
                [5, " . $row['mon_may'] . " ],
                [6, " . $row['mon_jun'] . "  ],
                [7, " . $row['mon_jul'] . " ],
                [8, " . $row['mon_aug'] . "  ],
                [9, " . $row['mon_sep'] . "  ],
                [10, " . $row['mon_oct'] . "  ],
                [11, " . $row['mon_nov'] . " ],
                [12, " . $row['mon_dec'] . " ],
            ];


";
 
  //echo $javascript;
   drupal_add_js($javascript, 'inline');
}

/**
 * Ajax function to return the array of data to be displayed
 * in the chart graph
 * @return array of defect results
 */
function _get_fixes_percentages_data() {
  global $user;

  if (arg(0) == 'dashboard-hospital' && is_numeric(arg(2))) {
    $hospital_nid = arg(2);
  }
  else {
    //$hospital_nid = _get_user_working_hospital($user->uid);
    global $hospital_nid;
  }

  $chart_data_array = array ();
  $year = date('Y', strtotime("Now"));
  $query = "select * from fixes_percentage where hospital_id =%d and year = %d";
  $result = db_query($query, $hospital_nid, $year);
  if ($row =db_fetch_array($result)) {
    $chart_data_array = array (
      '1' => $row['mon_jan'] * 10,
      '2' => $row['mon_feb'] * 10,
      '3' => $row['mon_mar'] * 10,
      '4' => $row['mon_apr'] * 10,
      '5' => $row['mon_may'] * 10,
      '6' => $row['mon_jun'] * 10,
      '7' => $row['mon_jul'] * 10,
      '8' => $row['mon_aug'] * 10,
      '9' => $row['mon_sep'] * 10,
      '10' => $row['mon_oct'] * 10,
      '11' => $row['mon_nov'] * 10,
      '12' => $row['mon_dec'] * 10,
    );
  }

   $javascript = "     var fixes = [
                [1, " . $row['mon_jan'] . "   ],
                [2, " . $row['mon_feb'] . "  ] ,
                [3, " . $row['mon_mar'] . "  ],
                [4," . $row['mon_apr'] . "  ],
                [5, " . $row['mon_may'] . " ],
                [6, " . $row['mon_jun'] . "  ],
                [7, " . $row['mon_jul'] . " ],
                [8, " . $row['mon_aug'] . "  ],
                [9, " . $row['mon_sep'] . "  ],
                [10, " . $row['mon_oct'] . "  ],
                [11, " . $row['mon_nov'] . " ],
                [12, " . $row['mon_dec'] . " ],
            ];
";
  
   drupal_add_js($javascript, 'inline');
  //echo $javascript;
 // echo drupal_to_js($chart_data_array);
}


/**
 * Ajax function to return the array of data to be displayed
 * in the chart graph
 * @return array of defect results
 */
function _get_ppm_percentages_data() {
  global $user;
  
  if (arg(0) == 'dashboard-hospital' && is_numeric(arg(2))) {
    $hospital_nid = arg(2);
  }
  else {
    //$hospital_nid = _get_user_working_hospital($user->uid);
    global $hospital_nid;
  } 
  
  $chart_data_array = array ();
  $year = date('Y', strtotime("Now"));
  $query = "select * from ppm_percentage where hospital_id =%d and year = %d";
  $result = db_query($query, $hospital_nid, $year);
  if ($row =db_fetch_array($result)) {
    $chart_data_array = array (
      '1' => $row['mon_jan'] * 10,
      '2' => $row['mon_feb'] * 10,
      '3' => $row['mon_mar'] * 10,
      '4' => $row['mon_apr'] * 10,
      '5' => $row['mon_may'] * 10,
      '6' => $row['mon_jun'] * 10,
      '7' => $row['mon_jul'] * 10,
      '8' => $row['mon_aug'] * 10,
      '9' => $row['mon_sep'] * 10,
      '10' => $row['mon_oct'] * 10,
      '11' => $row['mon_nov'] * 10,
      '12' => $row['mon_dec'] * 10,
    );
  }

   $javascript = "     var ppms = [
                [1, " . $row['mon_jan'] . "   ],
                [2, " . $row['mon_feb'] . "  ] ,
                [3, " . $row['mon_mar'] . "  ],
                [4," . $row['mon_apr'] . "  ],
                [5, " . $row['mon_may'] . " ],
                [6, " . $row['mon_jun'] . "  ],
                [7, " . $row['mon_jul'] . " ],
                [8, " . $row['mon_aug'] . "  ],
                [9, " . $row['mon_sep'] . "  ],
                [10, " . $row['mon_oct'] . "  ],
                [11, " . $row['mon_nov'] . " ],
                [12, " . $row['mon_dec'] . " ],
            ];
";
  
   drupal_add_js($javascript, 'inline');
  //echo $javascript;
 // echo drupal_to_js($chart_data_array);
}

/**
 * Ajax function to return the array of data to be displayed
 * in the chart graph
 * @return array of defect results
 */
function _get_cal_percentages_data() {
  global $user;
  
  if (arg(0) == 'dashboard-hospital' && is_numeric(arg(2))) {
    $hospital_nid = arg(2);
  }
  else {
    //$hospital_nid = _get_user_working_hospital($user->uid);
    global $hospital_nid;
  }

  $chart_data_array = array ();
  $year = date('Y', strtotime("Now"));
  $query = "select * from cal_percentage where hospital_id =%d and year = %d";
  $result = db_query($query, $hospital_nid, $year);
  if ($row =db_fetch_array($result)) {
    $chart_data_array = array (
      '1' => $row['mon_jan'] * 10,
      '2' => $row['mon_feb'] * 10,
      '3' => $row['mon_mar'] * 10,
      '4' => $row['mon_apr'] * 10,
      '5' => $row['mon_may'] * 10,
      '6' => $row['mon_jun'] * 10,
      '7' => $row['mon_jul'] * 10,
      '8' => $row['mon_aug'] * 10,
      '9' => $row['mon_sep'] * 10,
      '10' => $row['mon_oct'] * 10,
      '11' => $row['mon_nov'] * 10,
      '12' => $row['mon_dec'] * 10,
    );
  }

   $javascript = "     var cals = [
                [1, " . $row['mon_jan'] . "   ],
                [2, " . $row['mon_feb'] . "  ] ,
                [3, " . $row['mon_mar'] . "  ],
                [4," . $row['mon_apr'] . "  ],
                [5, " . $row['mon_may'] . " ],
                [6, " . $row['mon_jun'] . "  ],
                [7, " . $row['mon_jul'] . " ],
                [8, " . $row['mon_aug'] . "  ],
                [9, " . $row['mon_sep'] . "  ],
                [10, " . $row['mon_oct'] . "  ],
                [11, " . $row['mon_nov'] . " ],
                [12, " . $row['mon_dec'] . " ],
            ];
";
  
   drupal_add_js($javascript, 'inline');
  //echo $javascript;
 // echo drupal_to_js($chart_data_array);
}


/**
 * Ajax function to return the array of data to be displayed
 * in the chart graph
 * @return array of defect results
 */
function _get_quotation_cost_data() {
  global $user;
  if (arg(0) == 'dashboard-hospital' && is_numeric(arg(2))) {
    $hospital_nid = arg(2);
  }
  else {
    //$hospital_nid = _get_user_working_hospital($user->uid);
    global $hospital_nid;
  }


  $chart_data_array = array ();
  $year = date('Y', strtotime("Now"));
  $query = "select * from quotation_cost where hospital_id =%d and year = %d";
  $result = db_query($query, $hospital_nid, $year);
  if ($row =db_fetch_array($result)) {
    $chart_data_array = array (
      '1' => $row['mon_jan'] * 10,
      '2' => $row['mon_feb'] * 10,
      '3' => $row['mon_mar'] * 10,
      '4' => $row['mon_apr'] * 10,
      '5' => $row['mon_may'] * 10,
      '6' => $row['mon_jun'] * 10,
      '7' => $row['mon_jul'] * 10,
      '8' => $row['mon_aug'] * 10,
      '9' => $row['mon_sep'] * 10,
      '10' => $row['mon_oct'] * 10,
      '11' => $row['mon_nov'] * 10,
      '12' => $row['mon_dec'] * 10,
    );
  }

   $javascript = "     var quotation_cost = [
                [1, " . $row['mon_jan'] . "   ],
                [2, " . $row['mon_feb'] . "  ] ,
                [3, " . $row['mon_mar'] . "  ],
                [4," . $row['mon_apr'] . "  ],
                [5, " . $row['mon_may'] . " ],
                [6, " . $row['mon_jun'] . "  ],
                [7, " . $row['mon_jul'] . " ],
                [8, " . $row['mon_aug'] . "  ],
                [9, " . $row['mon_sep'] . "  ],
                [10, " . $row['mon_oct'] . "  ],
                [11, " . $row['mon_nov'] . " ],
                [12, " . $row['mon_dec'] . " ],
            ];
";
  
   drupal_add_js($javascript, 'inline');
  //echo $javascript;
 // echo drupal_to_js($chart_data_array);
}


/**
 * this function need to be reviewed
 * and check where it has been called and used by the sytem
 */
function _return_report_information() {
  //global $user;
  //$hospital_nid = _get_user_working_hospital($user->uid); 
  global $hospital_nid;
  $first_day_of_month = strtotime(date('Y-m-01 00:00:00'));
  $now = time()+ (2*24*60*60);
  $start_date                        = date('d/m/Y', $first_day_of_month);
  $end_date                          = date('d/m/Y', $now);
  $total_equipments_scrapped_and_not = $total_equipments_scrapped + $total_equipments ; //sizeof($result_array['equipments']);
  $total_equipments_defects                = sizeof($result_array['equipment_not_working']);
  $total_equipments_working                = $total_equipments - $total_equipments_defects;
  

  //print_r($result_array['current_defected_equipments_all']); exit();
  if($total_equipments_scrapped_and_not> 0) {
    $chart_scrapped_precent =  round(($total_equipments_scrapped/$total_equipments_scrapped_and_not)*100, 1);
    $chart_defect_precent =  round(($total_equipments_defects/$total_equipments_scrapped_and_not)* 100, 1);
    $chart_working_precent =  round(($total_equipments_working/$total_equipments_scrapped_and_not)* 100, 1);
  }
  if($total_equipments_working > 0) {
    $defect_percent_current = round(($current_defected_equipments/ $total_equipments_working ) *100,2);
    $defect_percent_all = round(($current_defected_equipments_all/ $total_equipments_working ) *100,2);
  }
}


/**
 * returns total equipments for specific hospital/organization
 * inside the system
 */
function _get_total_equipments($hospital_nid) {
  
  // all equipments in the hospital excluding scrapped equipments 
  $total_equipments = db_result(db_query('select count(distinct nid) as count from content_type_medical_equipment equipment inner join node using (nid) where node.status = 1 and equipment.field_medical_equip_hospital_nid = %d'), $hospital_nid);
  return $total_equipments; 
}



/**
 * returns total not working equipments for specific hospital/organization
 * inside the system
 */
function _get_total_not_working_equipments ($hospital_nid) {
  $total_equipment_not_working = db_result(db_query('select count( distinct nid) as count from  content_type_medical_equipment  equipment where equipment.field_medical_equip_hospital_nid = %d and field_status_l1_value =%d', $hospital_nid, NOT_WORKING));
  return $total_equipment_not_working;

}


/**
 * returns total scrapped equipments for specific hospital/organization
 * inside the system
 */
function _get_total_scrapped_equipments($hospital_nid) {

  $total_equipments_scrapped = db_result(db_query('select count( distinct nid) as count from content_type_medical_equipment equipment inner join node using(nid) where node.status=0 and equipment.field_medical_equip_hospital_nid = %d'), $hospital_nid);
  return $total_equipments_scrapped;
}



/**
 * returns total equipments that has maintenance contract for specific hospital/organization
 * inside the system
 */
function _get_total_equipments_has_mcontracts($hospital_nid) {

  $equiments_has_mcontract = db_result(db_query('select count( distinct field_m_contract_medical_equip_nid) from  content_type_maintainancecontract where field_end_of_contract_value2 > %d  and content_type_maintainancecontract.field_maintainance_contract_hosp_nid =%d', time(), $hospital_nid));

  return $equiments_has_mcontract;

}


/**
 * returns total  equipments that has maintenance contract with spare parts for specific hospital/organization
 * inside the system
 */
function _get_total_equipments_has_contracts_with_spare_parts($hospital_nid) {

  $equipments_has_mcontract_all_spares = db_result(db_query('select count( distinct field_m_contract_medical_equip_nid) from  content_type_maintainancecontract   where field_equipment_parts_warranty_value = 0 and  field_end_of_contract_value2 > %d and content_type_maintainancecontract.field_maintainance_contract_hosp_nid =%d', time(), $hospital_nid));
  return $equipments_has_mcontract_all_spares;

} 


/**
 * returns total  equipments that has mainteancen contract with partial spare parts for specific hospital/organization
 * inside the system
 */
function _get_total_equipments_has_contracts_with_partial_spare_parts($hospital_nid) {
  
  $equipments_has_mcontract_partial_spares = db_result(db_query('select count( distinct field_m_contract_medical_equip_nid) from  content_type_maintainancecontract   where field_equipment_parts_warranty_value = 1 and  field_end_of_contract_value2 > %d and content_type_maintainancecontract.field_maintainance_contract_hosp_nid =%d', time(), $hospital_nid));

  return $equipments_has_mcontract_partial_spares;
 

}



/**
 * returns total  equipments that has mainteancen contract with no spare parts for specific hospital/organization
 * inside the system
 */
function _get_total_equipments_has_contracts_with_no_spare_parts($hospital_nid) {
 
  $equipments_has_mcontract_no_spares = db_result(db_query('select count( distinct field_m_contract_medical_equip_nid) from  content_type_maintainancecontract  where field_equipment_parts_warranty_value = 2 and  field_end_of_contract_value2 > %d and content_type_maintainancecontract.field_maintainance_contract_hosp_nid =%d', time(), $hospital_nid));

  return $equipments_has_mcontract_no_spares;
}


/**
 * returns total  equipments that is under warranty for specific hospital/organization
 * inside the system
 */
function _get_total_equipments_has_warranty($hospital_nid) {

  
  //TODO fix the equipment warranty 
  $total_equipment_warranty = db_result(db_query('select  count( distinct equipment.nid) as nid from content_type_medical_equipment equipment   where field_warranty_end_date_value > %d and equipment.field_medical_equip_hospital_nid = %d', time(), $hospital_nid)) ;
  
  return $total_equipment_warranty; 
 
}


/**
 * return array() of  defects info
 * for specific hospital within star and end period
 *
 * @param $hospital_nid
 * @param $start
 * @param $end
 */
function _return_defects_info_array_within_period($hospital_nid, $start, $end) {

  $job_query = 'select job.nid as jobnid, equipment.nid as equipmentnid, status.field_job_status_value as status from content_type_job job inner join content_field_job_status status using(nid) inner join content_type_medical_equipment equipment on (equipment.nid = job.field_job_medical_equip_nid) where  equipment.field_medical_equip_hospital_nid =%d and field_requested_date_value between %d  and %d';
 
  $job_result = db_query($job_query, $hospital_nid, $start, $end);
  
  $result_array = array();
  while ( $row = db_fetch_array($job_result)) {

    $rnid = $row['jobnid'];
    $equipmen_nid = $row['equipmentnid'];
    //print $rnid;
    $result_array['jobs'][$rnid] = $rnid;

    //print $result_array['equipments'][$rnid];
    if ( $row['status'] == JOB_TO_BE_FIXED_INSIDE_HOSPITAL) {
      $result_array['equipment_to_be_fixed_inside_hospital'][$equipmen_nid] = $equipmen_nid;
      $result_array['current_defected_equipments'][$equipmen_nid] = $equipmen_nid;
      $result_array['openjobs'][$rnid] = $rnid;

    }
    elseif ( $row['status'] == JOB_TO_BE_FIXED_BY_COMPANY) {
      $result_array['equipment_to_be_fixed_by_company'][$equipmen_nid] = $equipmen_nid;
      $result_array['current_defected_equipments'][$equipmen_nid] = $equipmen_nid;
      $result_array['openjobs'][$rnid] = $rnid;
    }
    elseif ( $row['status'] == JOB_FIXED_BY_HOSPITAL) {
      $result_array['equipment_fixed_by_hospital'][$equipmen_nid] = $equipmen_nid;
      $result_array['fixeequipments'][$equipmen_nid] = $equipmen_nid;
      $result_array['closedjobs'][$rnid] = $rnid;
    }
    elseif ( $row['status'] == JOB_FIXED_BY_COMPANY) {
      $result_array['equipment_fixed_by_company'][$equipmen_nid] = $equipmen_nid;
      $result_array['fixeequipments'][$equipmen_nid] = $equipmen_nid;
      $result_array['closedjobs'][$rnid] = $rnid;
    }
  }

  
  // Current jobs
  $total_jobs_current                       = sizeof($result_array['jobs']);
  $closed_jobs_current                      = sizeof($result_array['closedjobs']);
  $open_jobs_current                        = sizeof($result_array['openjobs']);
   // Current equipments operations 
  $fixed_equipments_current                 = sizeof($result_array['fixeequipments']);
  $fixed_equipments_by_company_current      = sizeof($result_array['equipment_fixed_by_company']);
  $fixed_equipments_by_hospital_current     = sizeof($result_array['equipment_fixed_by_hospital']);

  $equipment_to_be_fixed_by_company      = sizeof($result_array['equipment_to_be_fixed_by_company']);
  $equipment_to_be_fixed_inside_hospital = sizeof($result_array['equipment_to_be_fixed_inside_hospital']);
  $current_defected_equipments              = sizeof($result_array['current_defected_equipments']);
 
}


/**
 * returns array() of defect info 
 * for specific hosptial without period limitation
 */
function _return_defects_info_array_all($hospital_nid) {

$job_query_all = 'select node.title as title , job.nid as jobnid, equipment.nid as equipmentnid, status.field_job_status_value as status from content_type_job job inner join content_field_job_status status using(nid) inner join content_type_medical_equipment equipment on (equipment.nid = job.field_job_medical_equip_nid) inner join node on (equipment.nid = node.nid)  ' . $hospital_where_clause . " and node.status=1";

  $job_result_all = db_query($job_query_all);

  while ( $row = db_fetch_array($job_result_all)) {

    $rnid = $row['jobnid'];
    $equipmen_nid = $row['equipmentnid'];
    //print $rnid;
    
    $result_array['jobs_all'][$rnid] = $rnid;

    if ( $row['status'] == JOB_TO_BE_FIXED_INSIDE_HOSPITAL) {
      $result_array['jobs_to_be_fixed_inside_hospital_all'] [$rnid] = $rnid;
      $result_array['equipment_to_be_fixed_inside_hospital_all'][$equipmen_nid] = $equipmen_nid;
      $result_array['current_defected_equipments_all'][$equipmen_nid] = $row['title'];
      $result_array['openjobs_all'][$rnid] = $rnid;

    }
    elseif ( $row['status'] == JOB_TO_BE_FIXED_BY_COMPANY) {
      $result_array['jobs_to_be_fixed_inside_company_all'] [$rnid] = $rnid;
      $result_array['equipment_to_be_fixed_by_company_all'][$equipmen_nid] = $equipmen_nid;
      $result_array['current_defected_equipments_all'][$equipmen_nid] = $row['title'];
      $result_array['openjobs_all'][$rnid] = $rnid;
    }
    elseif ( $row['status'] == JOB_FIXED_BY_HOSPITAL) {
      $result_array['jobs_fixed_inside_hospital_all'] [$rnid] = $rnid;
      $result_array['equipment_fixed_by_hospital_all'][$equipmen_nid] = $equipmen_nid;
      $result_array['fixeequipments_all'][$equipmen_nid] = $equipmen_nid;
      $result_array['closedjobs_all'][$rnid] = $rnid;
    }
    elseif ( $row['status'] == JOB_FIXED_BY_COMPANY) {
      $result_array['jobs_fixed_inside_company_all'] [$rnid] = $rnid;
      $result_array['equipment_fixed_by_company_all'][$equipmen_nid] = $equipmen_nid;
      $result_array['fixeequipments_all'][$equipmen_nid] = $equipmen_nid;
      $result_array['closedjobs_all'][$rnid] = $rnid;
    }
  }

  // All jobs
  $total_jobs_all                       = sizeof($result_array['jobs_all']);
  $closed_jobs_all                      = sizeof($result_array['closedjobs_all']);
  $open_jobs_all                        = sizeof($result_array['openjobs_all']);
  $jobs_to_be_fixed_by_hospital_all         = sizeof($result_array['jobs_to_be_fixed_inside_hospital_all']); 
  $jobs_to_be_fixed_inside_company_all      = sizeof($result_array['jobs_to_be_fixed_inside_company_all']); 
  $jobs_fixed_inside_company_all            = sizeof($result_array['jobs_fixed_inside_company_all']); 
  $jobs_fixed_by_hospital_all         = sizeof($result_array['jobs_fixed_inside_hospital_all']);

  if($total_jobs_all > 0) {
    $chart_job_tobefixed_hospital_percent = round(($jobs_to_be_fixed_by_hospital_all/$total_jobs_all) * 100, 1);
    $chart_job_tobefixed_company_percent = round(($jobs_to_be_fixed_inside_company_all/$total_jobs_all) * 100, 1);
    $chart_job_fixed_hospital_percent = round(($jobs_fixed_by_hospital_all/$total_jobs_all) * 100, 1);
    $chart_job_fixed_company_percent = round(($jobs_fixed_inside_company_all/$total_jobs_all) * 100, 1);
  }
    
     
  // All equipments operations 
  $fixed_equipments_by_company_all      = sizeof($result_array['equipment_fixed_by_company_all']);
  $fixed_equipments_by_hospital_all     = sizeof($result_array['equipment_fixed_by_hospital_all']);
  $fixed_equipments_all                 = $fixed_equipments_by_company_all + $fixed_equipments_by_hospital_all;

  $equipment_to_be_fixed_by_company_all      = sizeof($result_array['equipment_to_be_fixed_by_company_all']);
  $equipment_to_be_fixed_inside_hospital_all = sizeof($result_array['equipment_to_be_fixed_inside_hospital_all']);

  $current_defected_equipments_all      = count($result_array['current_defected_equipments_all']);
}


/**
 * get type of node according to nid
 * @param $nid
 *   nid of node
 */
function _get_node_type($nid) {

  if(is_numeric($nid)) {
    $query = "select type from node where nid=$nid";
    $result = db_query($query);
    if ($row = db_fetch_array($result)) {
      return $row['type'];
    }
    else return false;

  }
  else return false;

}


/**
 * return count of quantity recieved for all invoices
 * except the current invoice
 * has been made for specific part item 
 * and related to specific purchase/sales order
 */
function calculate_qty_recieved_all_invoices_related_po($part_nid, $po_nid, $invoice_nid) {
  $query_sum = "select sum(q.field_invoice_qty_recieved_value) as total_qty from content_field_invoice_qty_recieved q inner join content_field_invoice_item_code i on (i.nid = q.nid and i.delta = q.delta) inner join content_type_invoice invoice on (invoice.nid = i.nid) where invoice.nid != $invoice_nid and i.field_invoice_item_code_nid = $part_nid and invoice.field_invoice_po_number_nid = $po_nid";
  //print $query_sum; exit();
  $total = db_result(db_query($query_sum));
  return $total;
}

/**
 * get the key of part catalog in the array of parts
 * inside invoice
 */
function _get_key_of_part_in_invoice($invoice_node, $part_nid) {
  $i = 0;
  $part_index = 100000;
  foreach ($invoice_node->field_invoice_item_code as $item_key => $nid ) {
    if ($nid['nid'] == $part_nid['nid']) {
      $part_index = $i;
      return $part_index;
    }
    else {
      $i++;
    }
  }
  //print print_r($nid); exit();
  return $part_index;
}
/**
 * handles node save for invoice and maitenance
 *
 * @param $node
 *   invoice node
 */
function _handle_invoice_save(&$node){
  if(variable_get('create_invoice_based_on_po', 0) == 1){
    $po_nid = $node->field_invoice_po_number[0]['nid'];
    $po_node = node_load($po_nid);
    $i = 0;
    foreach ($po_node->field_importcode_item_code as $key => $value ) {
      $item_total_invoices_received = calculate_qty_recieved_all_invoices_related_po($value['nid'], $po_nid, $node->nid);
      $invoice_item_key = _get_key_of_part_in_invoice($node, $value);
      if ($invoice_item_key != 100000) {
        $po_node->field_importcode_qty_received[$i]['value'] = $item_total_invoices_received + $node->field_invoice_qty_recieved[$invoice_item_key]['value'];
        $i++;
      }
    }
    $i = 0;
    if (arg(1) == 'add' || arg(2) == 'edit') { // first time adding spare part
      foreach ($node->field_invoice_unit_price as $k => $v) {
        // and foreach items in the spare parts section insert row in store and transaction
        $part_code_nid = $node->field_invoice_item_code[$i]['nid'];
        $qty_requested = $node->field_invoice_qty_requested[$i]['value'];
        $qty_received  = $node->field_invoice_qty_recieved[$i]['value'];
        $item_price    = $node->field_invoice_unit_price[$i]['value'];
        $org_id        = $node->field_invoice_organization[0]['nid'];
        $quotation_nid = $_GET['invoice_quotation_id'];
        $quotation_op_type = _get_quotation_op_type($quotation_nid);
        if ($quotation_op_type == QUOTATION_DEPOSIT) {
          $op_type = Quantity_Deposit;
        }
        else{
          $op_type = PO_Withdraw;
        }
        _upsert_spare_part_item($part_code_nid, $qty_received, $qty_requested, $item_price, $op_type, $org_id, $node->nid) ;
        $i++;
      }
    }
    // save PO Node
    node_save($po_node, true);
    //clear_cache_page();
  }
}


/**
 * handles delete operation for invoice to calculate
 * part catalog's quantity on hand .
 * related to transactions
 * @param $node
 *   invoice node
 */
function _handle_invoice_delete(&$node){
  $invoice_nid = $node->nid;
  $delete = db_query('DELETE FROM equipmentmaintenance_cost WHERE contract_nid = %d', $invoice_nid);
  $i = 0;
  foreach ($node->field_invoice_item_code as $key => $value){
    $part_nid = $node->field_invoice_item_code[$i]['nid'];
    $query = db_query('DELETE FROM transactions WHERE transaction_node_nid = %d AND part_code_nid = %d', $invoice_nid, $part_nid);
    $i++;
    $item_total_deposit  = db_result(db_query('select sum(quantity_received) from transactions where part_code_nid =%d and transaction_type = 1', $part_nid));
    $item_total_withdraw = db_result(db_query('select sum(quantity_requested) from transactions where part_code_nid =%d and transaction_type = 0', $part_nid));
    $item_total_withdraw_PO = db_result(db_query('select sum(quantity_received) from transactions where part_code_nid =%d and transaction_type = 3', $part_nid));
    $item_total_withdraw_test = db_result(db_query('select sum(quantity_requested - quantity_received) from transactions where part_code_nid =%d and transaction_type = 2', $part_nid));
    $item_total_qty_requested_deposit = db_result(db_query('select sum(quantity_requested) from transactions where part_code_nid =%d and transaction_type = 1', $part_nid));
    $item_quantity_on_hand = $item_total_deposit - ( $item_total_withdraw + $item_total_withdraw_test + $item_total_withdraw_PO);
    // update quantity on hand for item code
    $part_catalog_node = node_load($part_nid, NULL, TRUE);
    if(!empty($part_catalog_node->type) ) { 
      $part_catalog_node->field_part_qty_on_hand[0]['value'] = $item_quantity_on_hand;
      $part_catalog_node->field_part_requisitioned[0]['value'] = $item_total_qty_requested_deposit;
      node_save($part_catalog_node, 'true');
    }
  }
  $po_nid = $node->field_invoice_po_number[0]['nid'];
  $po_node = node_load($po_nid);
  $i = 0;
  if (is_array($po_node->field_importcode_item_code)) {
    foreach ($po_node->field_importcode_item_code as $key => $value ) {
      $item_total_invoices_received = calculate_qty_recieved_all_invoices_related_po($value['nid'], $po_nid, $node->nid);
      if ($invoice_item_key != 100000) {
        $po_node->field_importcode_qty_received[$i]['value'] = $item_total_invoices_received;
      }
      $i++;
    }
  }
  $po_node->field_importcode_total[0]['value'] -= $node->field_invoice_total[0]['value'];
  $po_node->field_importcode_total_buy[0]['value'] -= $node->field_invoice_total[0]['value'];
  node_save($po_node, true);
}


/**
 * return prices as json array of the work order
 * TODO change the string to be JSON
 */
function _return_unit_price_wo(){
  $wo_nid = arg(3);

  $query = db_query('SELECT unit_price.delta unit_price_delta, unit_price.field_wrk_order_unit_price_value unit_price_value, currency.field_wrk_order_currency_value currency_value FROM content_field_wrk_order_unit_price unit_price INNER JOIN content_field_wrk_order_currency currency USING (nid) WHERE unit_price.delta = currency.delta AND nid =%d', $wo_nid);
  while($result = db_fetch_object($query)){
    $currency .= $result->currency_value . "-";
  }
  $query = db_query('SELECT unit_price.delta unit_price_delta, unit_price.field_wrk_order_unit_price_value unit_price_value FROM content_field_wrk_order_unit_price unit_price  WHERE nid =%d', $wo_nid);

  while($result = db_fetch_object($query)){
    $delta .= $result->unit_price_delta ."-";
    $unit_price_wo .= $result->unit_price_value ."-";
  }
  echo $delta . "/". $unit_price_wo ."/". $currency;
}


/**
 * get subtraction of qty requested & qty
 * received from po (ajax call)
 */
function get_qty_requested_received_from_po(){
  $count = 1;
  $po_nid = arg(5);
  $query = db_query('SELECT qty_received.field_importcode_qty_received_value qty_received_value, qty_requested.field_importcode_items_count_value qty_requested_value FROM content_field_importcode_items_count qty_requested LEFT JOIN content_field_importcode_qty_received qty_received ON (qty_received.nid = qty_requested.nid AND qty_received.delta = qty_requested.delta) WHERE qty_requested.nid = %d', $po_nid);
  $qty_json_array = array();
  while ($result = db_fetch_object($query)){
    $qty_received = $result->qty_received_value;
    $qty_requested = $result->qty_requested_value;
    $ordered_qty = $qty_requested - $qty_received;
    $ordered_qty_string = 'ordered_qty' . $count;
    $qty_json_array[$ordered_qty_string] = $ordered_qty;
    $count++;
  }
  drupal_json($qty_json_array);
}

/**
 * set value of task review in pentry
 * (ajax call)
 */
function set_task_review_value_in_pentry(){
  $pentry_node = node_load(arg(1));
  if (arg(2) == 1){
    $pentry_node->field_pentry_task_review[0]['value'] = 1;
  }
  else if (arg(2) == 2){
    $pentry_node->field_pentry_task_review[0]['value'] = 2;
  }
  node_save($pentry_node);
  echo 1;
}

/**
 * set value of task review in work_order
 * (ajax call)
 */
function set_task_review_value_in_work_order(){
  $work_order_node = node_load(arg(1));
  if (arg(2) == 1){  // if the pressed button reviewed
    $work_order_node->field_wrk_order_review_status[0]['value'] = 1;
  }
  else if (arg(2) == 2){ // if the pressed button not reviewed
    $work_order_node->field_wrk_order_review_status[0]['value'] = 2;
  }
  node_save($work_order_node);
  echo 1;
}

/**
 * add the js and css files needed 
 * according to users 
 */
function _add_required_js_and_css_files() {

  global $cmms_type;
  $cmms_type = variable_get('cmms_type', 3); 
  /*********** load css according to the loged in user role********************/
  if ($cmms_type == MEDICAL_MAINTENANCE_COMPANY) {
    drupal_add_css(drupal_get_path('module', 'cis_system') .'/css/medical_company.css');
  }
 
}

/**
 * return holidays (ajax call)
 */
function get_official_holiday_to_set_into_calendar($check_day){
  $json_array = array();
  if ($check_day != 0){
    $query = "SELECT field_holiday_event_day_value, field_holiday_event_day_value2 FROM content_type_official_holiday WHERE field_holiday_event_day_value = $check_day OR field_holiday_event_day_value2 = $check_day OR $check_day BETWEEN field_holiday_event_day_value AND field_holiday_event_day_value2";
    $row = db_query($query);
    if ($result = db_fetch_object($row)){
      return TRUE;
    }
  }
}

/**
 * return call last situation options
 */
function _return_call_last_situation_options(){
  global $language;
  $selected_field = 'status_in_english';
  //if ($language->language == 'ar') {
   // $selected_field = 'status_in_arabic';
  //}
  $options = array();
  $query = db_query('SELECT id, '.$selected_field.' FROM call_last_situation');
  while($result = db_fetch_object($query)){
    $options[$result->id] = t($result->status_in_english);
  }
  return $options;
}

/**
 * set department select list options
 * in equipment (ajax call)
 */
function set_department_options_in_equipment(){
  if ($cmms_type == INDIVIDUAL_HOSPITAL || $cmms_type == HEIRARCHIAL_HOSPITALS ) {
    if (arg(5) == 'ar'){
      $department_name = array();
      $query = db_query('SELECT nid, title FROM node WHERE type = "department"');
      while ($result = db_fetch_object($query)){
        $department_name[] = array(
          'nid' => $result->nid,
          'name' => $result->title,
        );
      }
    }
    else{
      $query = db_query('SELECT nid, field_department_name_english_value FROM content_type_department');
      while ($result = db_fetch_object($query)){
        $department_name[] = array(
          'nid' => $result->nid,
          'name' => $result->field_department_name_english_value,
        );
      }
    }
    echo json_encode($department_name);
  }
}

/**
 * get last part price
 * from work order
 */
function get_last_part_price_wo(){
  $part_name = arg(5);
  $last_value = db_result(db_query('SELECT p.field_wrk_order_unit_price_value as last_price FROM content_field_wrk_order_part_name as name inner join content_field_wrk_order_unit_price p ON (name.nid = p.nid and name.delta = p.delta) WHERE name.field_wrk_order_part_name_value = "%s" ORDER BY p.nid DESC limit 1', $part_name));
  echo $last_value;
}

//control_outside_repair_tab();
/**
 * control outside repair tab in work order
 */
function control_outside_repair_tab(){
  $javascript = "  var wo_type = $('#edit-field-wrk-order-type-value').val();
                   if (wo_type){
                     $('.horizontal-tab-button-2').attr('style', 'display : none !important');
                   }";
  drupal_add_js($javascript, 'inline');
  $control_outside_repair_tab = variable_get('control_outside_repair_tab_in_workorder', 0); 
  if ($control_outside_repair_tab == 1){ // show outside repair tab in work order
    $javascript = "  var wo_type = $('#edit-field-wrk-order-type-value').val();
                     if (wo_type){
                       $('.horizontal-tab-button-2').attr('style', 'display : none !important');
                     }
                     if (wo_type == 1){
                       $.get(Drupal.settings.basePath +'outside/repair/tab',null, function(response) {
                       if (response == 1){
                         $('.horizontal-tab-button-2').attr('style', 'display : block !important');
                       }
                     });";
    drupal_add_js($javascript, 'inline');
  }
  return $javascript;
}
